"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cids";
exports.ids = ["vendor-chunks/cids"];
exports.modules = {

/***/ "(ssr)/./node_modules/cids/src/cid-util.js":
/*!*******************************************!*\
  !*** ./node_modules/cids/src/cid-util.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst mh = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\n\nconst CIDUtil = {\n  /**\n   * Test if the given input is a valid CID object.\n   * Returns an error message if it is not.\n   * Returns undefined if it is a valid CID.\n   *\n   * @param {any} other\n   * @returns {string|undefined}\n   */\n  checkCIDComponents: function (other) {\n    if (other == null) {\n      return 'null values are not valid CIDs'\n    }\n\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0'\n    }\n\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string'\n    }\n\n    if (other.version === 0) {\n      if (other.codec !== 'dag-pb') {\n        return \"codec must be 'dag-pb' for CIDv0\"\n      }\n      if (other.multibaseName !== 'base58btc') {\n        return \"multibaseName must be 'base58btc' for CIDv0\"\n      }\n    }\n\n    if (!(other.multihash instanceof Uint8Array)) {\n      return 'multihash must be a Uint8Array'\n    }\n\n    try {\n      mh.validate(other.multihash)\n    } catch (err) {\n      let errorMsg = err.message\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed'\n      }\n      return errorMsg\n    }\n  }\n}\n\nmodule.exports = CIDUtil\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9zcmMvY2lkLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosV0FBVyxtQkFBTyxDQUFDLGtFQUFhOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvY2lkcy9zcmMvY2lkLXV0aWwuanM/MzNmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgbWggPSByZXF1aXJlKCdtdWx0aWhhc2hlcycpXG5cbmNvbnN0IENJRFV0aWwgPSB7XG4gIC8qKlxuICAgKiBUZXN0IGlmIHRoZSBnaXZlbiBpbnB1dCBpcyBhIHZhbGlkIENJRCBvYmplY3QuXG4gICAqIFJldHVybnMgYW4gZXJyb3IgbWVzc2FnZSBpZiBpdCBpcyBub3QuXG4gICAqIFJldHVybnMgdW5kZWZpbmVkIGlmIGl0IGlzIGEgdmFsaWQgQ0lELlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gb3RoZXJcbiAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9XG4gICAqL1xuICBjaGVja0NJRENvbXBvbmVudHM6IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIGlmIChvdGhlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJ251bGwgdmFsdWVzIGFyZSBub3QgdmFsaWQgQ0lEcydcbiAgICB9XG5cbiAgICBpZiAoIShvdGhlci52ZXJzaW9uID09PSAwIHx8IG90aGVyLnZlcnNpb24gPT09IDEpKSB7XG4gICAgICByZXR1cm4gJ0ludmFsaWQgdmVyc2lvbiwgbXVzdCBiZSBhIG51bWJlciBlcXVhbCB0byAxIG9yIDAnXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvdGhlci5jb2RlYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAnY29kZWMgbXVzdCBiZSBzdHJpbmcnXG4gICAgfVxuXG4gICAgaWYgKG90aGVyLnZlcnNpb24gPT09IDApIHtcbiAgICAgIGlmIChvdGhlci5jb2RlYyAhPT0gJ2RhZy1wYicpIHtcbiAgICAgICAgcmV0dXJuIFwiY29kZWMgbXVzdCBiZSAnZGFnLXBiJyBmb3IgQ0lEdjBcIlxuICAgICAgfVxuICAgICAgaWYgKG90aGVyLm11bHRpYmFzZU5hbWUgIT09ICdiYXNlNThidGMnKSB7XG4gICAgICAgIHJldHVybiBcIm11bHRpYmFzZU5hbWUgbXVzdCBiZSAnYmFzZTU4YnRjJyBmb3IgQ0lEdjBcIlxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghKG90aGVyLm11bHRpaGFzaCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICByZXR1cm4gJ211bHRpaGFzaCBtdXN0IGJlIGEgVWludDhBcnJheSdcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgbWgudmFsaWRhdGUob3RoZXIubXVsdGloYXNoKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbGV0IGVycm9yTXNnID0gZXJyLm1lc3NhZ2VcbiAgICAgIGlmICghZXJyb3JNc2cpIHsgLy8gSnVzdCBpbiBjYXNlIG1oLnZhbGlkYXRlKCkgdGhyb3dzIGFuIGVycm9yIHdpdGggZW1wdHkgZXJyb3IgbWVzc2FnZVxuICAgICAgICBlcnJvck1zZyA9ICdNdWx0aWhhc2ggdmFsaWRhdGlvbiBmYWlsZWQnXG4gICAgICB9XG4gICAgICByZXR1cm4gZXJyb3JNc2dcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDSURVdGlsXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/src/cid-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/cids/src/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst mh = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\")\nconst multicodec = __webpack_require__(/*! multicodec */ \"(ssr)/./node_modules/multicodec/src/index.js\")\nconst CIDUtil = __webpack_require__(/*! ./cid-util */ \"(ssr)/./node_modules/cids/src/cid-util.js\")\nconst { concat: uint8ArrayConcat } = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/cjs/src/concat.js\")\nconst { toString: uint8ArrayToString } = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/cjs/src/to-string.js\")\nconst { equals: uint8ArrayEquals } = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/cjs/src/equals.js\")\n\nconst codecs = multicodec.nameToCode\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\n  p[codecs[name]] = name\n  return p\n}, /** @type {Record<CodecCode, CodecName>} */({}))\n\nconst symbol = Symbol.for('@ipld/js-cid/CID')\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash\n\n    Object.defineProperty(this, symbol, { value: true })\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = /** @type {CID} */(version)\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = cid.multihash\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16)\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec]\n    }\n\n    this.codec = /** @type {CodecName} */ (codec)\n\n    this.multihash = /** @type {Uint8Array} */ (multihash)\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  get bytes () {\n    // @ts-ignore\n    let bytes = this._bytes\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec)\n        bytes = uint8ArrayConcat([\n          [1], codec, this.multihash\n        ], 1 + codec.byteLength + this.multihash.byteLength)\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this Uint8Array so it doesn't have to be recreated\n      Object.defineProperty(this, '_bytes', { value: bytes })\n    }\n\n    return bytes\n  }\n\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n  get prefix () {\n    const codec = multicodec.getCodeVarint(this.codec)\n    const multihash = mh.prefix(this.multihash)\n    const prefix = uint8ArrayConcat([\n      [this.version], codec, multihash\n    ], 1 + codec.byteLength + multihash.byteLength)\n\n    return prefix\n  }\n\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n  get code () {\n    return codecs[this.codec]\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash, this.multibaseName)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string\n    }\n    let str\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      uint8ArrayEquals(this.multihash, other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n  static isCID (value) {\n    return value instanceof CID || Boolean(value && value[symbol])\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/src/index.js\n");

/***/ })

};
;