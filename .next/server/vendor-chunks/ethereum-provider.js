"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethereum-provider";
exports.ids = ["vendor-chunks/ethereum-provider"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethereum-provider/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/ethereum-provider/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nconst payload_1 = __webpack_require__(/*! ./payload */ \"(ssr)/./node_modules/ethereum-provider/dist/payload.js\");\nclass Provider extends events_1.default {\n    constructor(connection) {\n        super();\n        this.promises = {};\n        this.attemptedSubscriptions = new Set();\n        this.subscriptions = [];\n        this.checkConnectionRunning = false;\n        this.nextId = 1;\n        this.connected = false;\n        this.accounts = [];\n        this.selectedAddress = undefined;\n        this.coinbase = undefined;\n        this.enable = this.enable.bind(this);\n        this.doSend = this.doSend.bind(this);\n        this.send = this.send.bind(this);\n        this.sendBatch = this.sendBatch.bind(this);\n        this.subscribe = this.subscribe.bind(this);\n        this.unsubscribe = this.unsubscribe.bind(this);\n        this.resumeSubscriptions = this.resumeSubscriptions.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.sendAsyncBatch = this.sendAsyncBatch.bind(this);\n        this.isConnected = this.isConnected.bind(this);\n        this.close = this.close.bind(this);\n        this.request = this.request.bind(this);\n        this.connection = connection;\n        this.on('connect', this.resumeSubscriptions);\n        this.connection.on('connect', () => this.checkConnection(1000));\n        this.connection.on('close', () => {\n            this.connected = false;\n            this.attemptedSubscriptions.clear();\n            this.emit('close');\n            this.emit('disconnect');\n        });\n        this.connection.on('payload', payload => {\n            const { id, method, error, result } = payload;\n            if (typeof id !== 'undefined') {\n                if (this.promises[id]) { // Fulfill promise\n                    const requestMethod = this.promises[id].method;\n                    if (requestMethod && ['eth_accounts', 'eth_requestAccounts'].includes(requestMethod)) {\n                        const accounts = result || [];\n                        this.accounts = accounts;\n                        this.selectedAddress = accounts[0];\n                        this.coinbase = accounts[0];\n                    }\n                    payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result);\n                    delete this.promises[id];\n                }\n            }\n            else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n                // Events: connect, disconnect, chainChanged, chainsChanged, accountsChanged, assetsChanged, message\n                this.emit(payload.params.subscription, payload.params.result);\n                this.emit(method, payload.params); // Older EIP-1193\n                this.emit('message', {\n                    type: payload.method,\n                    data: {\n                        subscription: payload.params.subscription,\n                        result: payload.params.result\n                    }\n                });\n                this.emit('data', payload); // Backwards Compatibility\n            }\n        });\n        this.on('newListener', event => {\n            if (Object.keys(this.eventHandlers).includes(event)) {\n                if (!this.attemptedSubscription(event) && this.connected) {\n                    this.startSubscription(event);\n                    if (event === 'networkChanged') {\n                        console.warn('The networkChanged event is being deprecated, use chainChanged instead');\n                    }\n                }\n            }\n        });\n        this.eventHandlers = {\n            networkChanged: netId => {\n                this.networkVersion = (typeof netId === 'string') ? parseInt(netId) : netId;\n                this.emit('networkChanged', this.networkVersion);\n            },\n            chainChanged: chainId => {\n                this.providerChainId = chainId;\n                if (!this.manualChainId) {\n                    this.emit('chainChanged', chainId);\n                }\n            },\n            chainsChanged: chains => {\n                this.emit('chainsChanged', chains);\n            },\n            accountsChanged: (accounts) => {\n                this.selectedAddress = accounts[0];\n                this.emit('accountsChanged', accounts);\n            },\n            assetsChanged: assets => {\n                this.emit('assetsChanged', assets);\n            }\n        };\n    }\n    get chainId() {\n        return this.manualChainId || this.providerChainId;\n    }\n    async checkConnection(retryTimeout = 4000) {\n        if (this.checkConnectionRunning || this.connected)\n            return;\n        clearTimeout(this.checkConnectionTimer);\n        this.checkConnectionTimer = undefined;\n        this.checkConnectionRunning = true;\n        try {\n            this.networkVersion = await this.doSend('net_version', [], undefined, false);\n            this.providerChainId = await this.doSend('eth_chainId', [], undefined, false);\n            this.connected = true;\n        }\n        catch (e) {\n            this.checkConnectionTimer = setTimeout(() => this.checkConnection(), retryTimeout);\n            this.connected = false;\n        }\n        finally {\n            this.checkConnectionRunning = false;\n            if (this.connected) {\n                this.emit('connect', { chainId: this.providerChainId });\n            }\n        }\n    }\n    attemptedSubscription(event) {\n        return this.attemptedSubscriptions.has(event);\n    }\n    setSubscriptionAttempted(event) {\n        this.attemptedSubscriptions.add(event);\n    }\n    async startSubscription(event) {\n        console.debug(`starting subscription for ${event} events`);\n        this.setSubscriptionAttempted(event);\n        try {\n            const eventId = await (this.subscribe('eth_subscribe', event));\n            this.on(eventId, this.eventHandlers[event]);\n        }\n        catch (e) {\n            console.warn(`Unable to subscribe to ${event}`, e);\n        }\n    }\n    resumeSubscriptions() {\n        Object.keys(this.eventHandlers).forEach(event => {\n            if (this.listenerCount(event) && !this.attemptedSubscription(event))\n                this.startSubscription(event);\n        });\n    }\n    async enable() {\n        const accounts = await this.doSend('eth_accounts');\n        if (accounts.length > 0) {\n            this.accounts = accounts;\n            this.selectedAddress = accounts[0];\n            this.coinbase = accounts[0];\n            this.emit('enable');\n            return accounts;\n        }\n        else {\n            const err = new Error('User Denied Full Provider');\n            err.code = '4001';\n            throw err;\n        }\n    }\n    doSend(rawPayload, rawParams = [], targetChain = this.manualChainId, waitForConnection = true) {\n        const sendFn = (resolve, reject) => {\n            const method = (typeof rawPayload === 'object') ? rawPayload.method : rawPayload;\n            const params = (typeof rawPayload === 'object') ? rawPayload.params : rawParams;\n            const chainTarget = ((typeof rawPayload === 'object') && rawPayload.chainId) || targetChain;\n            if (!method) {\n                return reject(new Error('Method is not a valid string.'));\n            }\n            try {\n                const payload = (0, payload_1.create)(method, params, this.nextId++, chainTarget);\n                this.promises[payload.id] = {\n                    resolve: (result) => resolve(result),\n                    reject,\n                    method: payload.method\n                };\n                this.connection.send(payload);\n            }\n            catch (e) {\n                reject(e);\n            }\n        };\n        if (this.connected || !waitForConnection) {\n            return new Promise(sendFn);\n        }\n        return new Promise((resolve, reject) => {\n            const resolveSend = () => {\n                clearTimeout(disconnectTimer);\n                return resolve(new Promise(sendFn));\n            };\n            const disconnectTimer = setTimeout(() => {\n                this.off('connect', resolveSend);\n                reject(new Error('Not connected'));\n            }, 5000);\n            this.once('connect', resolveSend);\n        });\n    }\n    async send(methodOrPayload, callbackOrArgs) {\n        if (typeof methodOrPayload === 'string' &&\n            (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n            const params = callbackOrArgs;\n            return this.doSend(methodOrPayload, params);\n        }\n        if (methodOrPayload &&\n            typeof methodOrPayload === 'object' &&\n            typeof callbackOrArgs === 'function') {\n            // a callback was passed to send(), forward everything to sendAsync()\n            const cb = callbackOrArgs;\n            return this.sendAsync(methodOrPayload, cb);\n        }\n        return this.request(methodOrPayload);\n    }\n    sendBatch(requests) {\n        return Promise.all(requests.map(payload => {\n            return this.doSend(payload.method, payload.params);\n        }));\n    }\n    async subscribe(type, method, params = []) {\n        const id = await this.doSend(type, [method, ...params]);\n        this.subscriptions.push(id);\n        return id;\n    }\n    async unsubscribe(type, id) {\n        const success = await this.doSend(type, [id]);\n        if (success) {\n            this.subscriptions = this.subscriptions.filter(_id => _id !== id); // Remove subscription\n            this.removeAllListeners(id); // Remove listeners\n            return success;\n        }\n    }\n    async sendAsync(rawPayload, cb) {\n        if (!cb || typeof cb !== 'function')\n            return new Error('Invalid or undefined callback provided to sendAsync');\n        if (!rawPayload)\n            return cb(new Error('Invalid Payload'));\n        // sendAsync can be called with an array for batch requests used by web3.js 0.x\n        // this is not part of EIP-1193's backwards compatibility but we still want to support it\n        if (Array.isArray(rawPayload)) {\n            const payloads = rawPayload.map(p => ({ ...p, jsonrpc: '2.0' }));\n            const callback = cb;\n            return this.sendAsyncBatch(payloads, callback);\n        }\n        else {\n            const payload = { ...rawPayload, jsonrpc: '2.0' };\n            const callback = cb;\n            try {\n                const result = await this.doSend(payload.method, payload.params);\n                callback(null, { id: payload.id, jsonrpc: payload.jsonrpc, result });\n            }\n            catch (e) {\n                callback(e);\n            }\n        }\n    }\n    async sendAsyncBatch(payloads, cb) {\n        try {\n            const results = await this.sendBatch(payloads);\n            const result = results.map((entry, index) => {\n                return { id: payloads[index].id, jsonrpc: payloads[index].jsonrpc, result: entry };\n            });\n            cb(null, result);\n        }\n        catch (e) {\n            cb(e);\n        }\n    }\n    isConnected() {\n        return this.connected;\n    }\n    close() {\n        if (this.connection && this.connection.close)\n            this.connection.close();\n        this.off('connect', this.resumeSubscriptions);\n        this.connected = false;\n        const error = new Error('Provider closed, subscription lost, please subscribe again.');\n        this.subscriptions.forEach(id => this.emit(id, error)); // Send Error objects to any open subscriptions\n        this.subscriptions = []; // Clear subscriptions\n        this.manualChainId = undefined;\n        this.providerChainId = undefined;\n        this.networkVersion = undefined;\n        this.selectedAddress = undefined;\n        this.coinbase = undefined;\n    }\n    async request(payload) {\n        return this.doSend(payload.method, payload.params, payload.chainId);\n    }\n    setChain(chainId) {\n        if (typeof chainId === 'number')\n            chainId = '0x' + chainId.toString(16);\n        const chainChanged = (chainId !== this.chainId);\n        this.manualChainId = chainId;\n        if (chainChanged) {\n            this.emit('chainChanged', this.chainId);\n        }\n    }\n}\nexports[\"default\"] = Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereum-provider/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereum-provider/dist/payload.js":
/*!********************************************************!*\
  !*** ./node_modules/ethereum-provider/dist/payload.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.create = void 0;\nfunction create(method, params = [], id, targetChain) {\n    const payload = {\n        id, method, params, jsonrpc: '2.0'\n    };\n    if (targetChain) {\n        payload.chainId = targetChain;\n    }\n    if (payload.method === 'eth_sendTransaction') {\n        const mismatchedChain = isChainMismatch(payload);\n        if (mismatchedChain) {\n            throw new Error(`Payload chainId (${mismatchedChain}) inconsistent with specified target chainId: ${targetChain}`);\n        }\n        return updatePayloadChain(payload);\n    }\n    return payload;\n}\nexports.create = create;\nfunction isChainMismatch(payload) {\n    if (payload.method !== 'eth_sendTransaction')\n        return false;\n    const tx = payload.params[0] || {};\n    const chainId = tx.chainId;\n    return ('chainId' in tx) && parseInt(chainId) !== parseInt(payload.chainId || chainId);\n}\nfunction updatePayloadChain(payload) {\n    const tx = payload.params[0] || {};\n    return { ...payload, params: [{ ...tx, chainId: tx.chainId || payload.chainId }, ...payload.params.slice(1)] };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tcHJvdmlkZXIvZGlzdC9wYXlsb2FkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxnQkFBZ0IsZ0RBQWdELFlBQVk7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVCQUF1QiwrQ0FBK0M7QUFDbkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtLXByb3ZpZGVyL2Rpc3QvcGF5bG9hZC5qcz9mN2UxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBjcmVhdGUobWV0aG9kLCBwYXJhbXMgPSBbXSwgaWQsIHRhcmdldENoYWluKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgaWQsIG1ldGhvZCwgcGFyYW1zLCBqc29ucnBjOiAnMi4wJ1xuICAgIH07XG4gICAgaWYgKHRhcmdldENoYWluKSB7XG4gICAgICAgIHBheWxvYWQuY2hhaW5JZCA9IHRhcmdldENoYWluO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZC5tZXRob2QgPT09ICdldGhfc2VuZFRyYW5zYWN0aW9uJykge1xuICAgICAgICBjb25zdCBtaXNtYXRjaGVkQ2hhaW4gPSBpc0NoYWluTWlzbWF0Y2gocGF5bG9hZCk7XG4gICAgICAgIGlmIChtaXNtYXRjaGVkQ2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGF5bG9hZCBjaGFpbklkICgke21pc21hdGNoZWRDaGFpbn0pIGluY29uc2lzdGVudCB3aXRoIHNwZWNpZmllZCB0YXJnZXQgY2hhaW5JZDogJHt0YXJnZXRDaGFpbn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXBkYXRlUGF5bG9hZENoYWluKHBheWxvYWQpO1xuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbn1cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuZnVuY3Rpb24gaXNDaGFpbk1pc21hdGNoKHBheWxvYWQpIHtcbiAgICBpZiAocGF5bG9hZC5tZXRob2QgIT09ICdldGhfc2VuZFRyYW5zYWN0aW9uJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHR4ID0gcGF5bG9hZC5wYXJhbXNbMF0gfHwge307XG4gICAgY29uc3QgY2hhaW5JZCA9IHR4LmNoYWluSWQ7XG4gICAgcmV0dXJuICgnY2hhaW5JZCcgaW4gdHgpICYmIHBhcnNlSW50KGNoYWluSWQpICE9PSBwYXJzZUludChwYXlsb2FkLmNoYWluSWQgfHwgY2hhaW5JZCk7XG59XG5mdW5jdGlvbiB1cGRhdGVQYXlsb2FkQ2hhaW4ocGF5bG9hZCkge1xuICAgIGNvbnN0IHR4ID0gcGF5bG9hZC5wYXJhbXNbMF0gfHwge307XG4gICAgcmV0dXJuIHsgLi4ucGF5bG9hZCwgcGFyYW1zOiBbeyAuLi50eCwgY2hhaW5JZDogdHguY2hhaW5JZCB8fCBwYXlsb2FkLmNoYWluSWQgfSwgLi4ucGF5bG9hZC5wYXJhbXMuc2xpY2UoMSldIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereum-provider/dist/payload.js\n");

/***/ })

};
;