"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google";
exports.ids = ["vendor-chunks/@google"];
exports.modules = {

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/assets/close-material-svg.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/assets/close-material-svg.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" fill=\"#000000\">\n    <!-- NOTE(cdata): This SVG filter is a stop-gap until we can implement\n         support for dynamic re-coloring of UI components -->\n    <defs>\n      <filter id=\"drop-shadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\"/>\n        <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"/>\n        <feFlood flood-color=\"#000000\"/>\n        <feComposite in2=\"offsetblur\" operator=\"in\"/>\n        <feMerge>\n          <feMergeNode/>\n          <feMergeNode in=\"SourceGraphic\"/>\n        </feMerge>\n      </filter>\n    </defs>\n    <path filter=\"url(#drop-shadow)\" d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n</svg>`);\n//# sourceMappingURL=close-material-svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2Fzc2V0cy9jbG9zZS1tYXRlcmlhbC1zdmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJCO0FBQzNCLGlFQUFlLHlDQUFJO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLEVBQUM7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2Fzc2V0cy9jbG9zZS1tYXRlcmlhbC1zdmcuanM/OTRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGh0bWwgYFxuPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwiIzAwMDAwMFwiPlxuICAgIDwhLS0gTk9URShjZGF0YSk6IFRoaXMgU1ZHIGZpbHRlciBpcyBhIHN0b3AtZ2FwIHVudGlsIHdlIGNhbiBpbXBsZW1lbnRcbiAgICAgICAgIHN1cHBvcnQgZm9yIGR5bmFtaWMgcmUtY29sb3Jpbmcgb2YgVUkgY29tcG9uZW50cyAtLT5cbiAgICA8ZGVmcz5cbiAgICAgIDxmaWx0ZXIgaWQ9XCJkcm9wLXNoYWRvd1wiIHg9XCItMTAwJVwiIHk9XCItMTAwJVwiIHdpZHRoPVwiMzAwJVwiIGhlaWdodD1cIjMwMCVcIj5cbiAgICAgICAgPGZlR2F1c3NpYW5CbHVyIGluPVwiU291cmNlQWxwaGFcIiBzdGREZXZpYXRpb249XCIxXCIvPlxuICAgICAgICA8ZmVPZmZzZXQgZHg9XCIwXCIgZHk9XCIwXCIgcmVzdWx0PVwib2Zmc2V0Ymx1clwiLz5cbiAgICAgICAgPGZlRmxvb2QgZmxvb2QtY29sb3I9XCIjMDAwMDAwXCIvPlxuICAgICAgICA8ZmVDb21wb3NpdGUgaW4yPVwib2Zmc2V0Ymx1clwiIG9wZXJhdG9yPVwiaW5cIi8+XG4gICAgICAgIDxmZU1lcmdlPlxuICAgICAgICAgIDxmZU1lcmdlTm9kZS8+XG4gICAgICAgICAgPGZlTWVyZ2VOb2RlIGluPVwiU291cmNlR3JhcGhpY1wiLz5cbiAgICAgICAgPC9mZU1lcmdlPlxuICAgICAgPC9maWx0ZXI+XG4gICAgPC9kZWZzPlxuICAgIDxwYXRoIGZpbHRlcj1cInVybCgjZHJvcC1zaGFkb3cpXCIgZD1cIk0xOSA2LjQxTDE3LjU5IDUgMTIgMTAuNTkgNi40MSA1IDUgNi40MSAxMC41OSAxMiA1IDE3LjU5IDYuNDEgMTkgMTIgMTMuNDEgMTcuNTkgMTkgMTkgMTcuNTkgMTMuNDEgMTJ6XCIvPlxuICAgIDxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIi8+XG48L3N2Zz5gO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvc2UtbWF0ZXJpYWwtc3ZnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/assets/close-material-svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/assets/controls-svg.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/assets/controls-svg.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"36\">\n    <defs>\n        <path id=\"A\" d=\"M.001.232h24.997V36H.001z\" />\n    </defs>\n    <g transform=\"translate(-11 -4)\" fill=\"none\" fill-rule=\"evenodd\">\n        <path fill-opacity=\"0\" fill=\"#fff\" d=\"M0 0h44v44H0z\" />\n        <g transform=\"translate(11 3)\">\n            <path d=\"M8.733 11.165c.04-1.108.766-2.027 1.743-2.307a2.54 2.54 0 0 1 .628-.089c.16 0 .314.017.463.044 1.088.2 1.9 1.092 1.9 2.16v8.88h1.26c2.943-1.39 5-4.45 5-8.025a9.01 9.01 0 0 0-1.9-5.56l-.43-.5c-.765-.838-1.683-1.522-2.712-2-1.057-.49-2.226-.77-3.46-.77s-2.4.278-3.46.77c-1.03.478-1.947 1.162-2.71 2l-.43.5a9.01 9.01 0 0 0-1.9 5.56 9.04 9.04 0 0 0 .094 1.305c.03.21.088.41.13.617l.136.624c.083.286.196.56.305.832l.124.333a8.78 8.78 0 0 0 .509.953l.065.122a8.69 8.69 0 0 0 3.521 3.191l1.11.537v-9.178z\" fill-opacity=\".5\" fill=\"#e4e4e4\" />\n            <path d=\"M22.94 26.218l-2.76 7.74c-.172.485-.676.8-1.253.8H12.24c-1.606 0-3.092-.68-3.98-1.82-1.592-2.048-3.647-3.822-6.11-5.27-.095-.055-.15-.137-.152-.23-.004-.1.046-.196.193-.297.56-.393 1.234-.6 1.926-.6a3.43 3.43 0 0 1 .691.069l4.922.994V10.972c0-.663.615-1.203 1.37-1.203s1.373.54 1.373 1.203v9.882h2.953c.273 0 .533.073.757.21l6.257 3.874c.027.017.045.042.07.06.41.296.586.77.426 1.22M4.1 16.614c-.024-.04-.042-.083-.065-.122a8.69 8.69 0 0 1-.509-.953c-.048-.107-.08-.223-.124-.333l-.305-.832c-.058-.202-.09-.416-.136-.624l-.13-.617a9.03 9.03 0 0 1-.094-1.305c0-2.107.714-4.04 1.9-5.56l.43-.5c.764-.84 1.682-1.523 2.71-2 1.058-.49 2.226-.77 3.46-.77s2.402.28 3.46.77c1.03.477 1.947 1.16 2.712 2l.428.5a9 9 0 0 1 1.901 5.559c0 3.577-2.056 6.636-5 8.026h-1.26v-8.882c0-1.067-.822-1.96-1.9-2.16-.15-.028-.304-.044-.463-.044-.22 0-.427.037-.628.09-.977.28-1.703 1.198-1.743 2.306v9.178l-1.11-.537C6.18 19.098 4.96 18 4.1 16.614M22.97 24.09l-6.256-3.874c-.102-.063-.218-.098-.33-.144 2.683-1.8 4.354-4.855 4.354-8.243 0-.486-.037-.964-.104-1.43a9.97 9.97 0 0 0-1.57-4.128l-.295-.408-.066-.092a10.05 10.05 0 0 0-.949-1.078c-.342-.334-.708-.643-1.094-.922-1.155-.834-2.492-1.412-3.94-1.65l-.732-.088-.748-.03a9.29 9.29 0 0 0-1.482.119c-1.447.238-2.786.816-3.94 1.65a9.33 9.33 0 0 0-.813.686 9.59 9.59 0 0 0-.845.877l-.385.437-.36.5-.288.468-.418.778-.04.09c-.593 1.28-.93 2.71-.93 4.222 0 3.832 2.182 7.342 5.56 8.938l1.437.68v4.946L5 25.64a4.44 4.44 0 0 0-.888-.086c-.017 0-.034.003-.05.003-.252.004-.503.033-.75.08a5.08 5.08 0 0 0-.237.056c-.193.046-.382.107-.568.18-.075.03-.15.057-.225.1-.25.114-.494.244-.723.405a1.31 1.31 0 0 0-.566 1.122 1.28 1.28 0 0 0 .645 1.051C4 29.925 5.96 31.614 7.473 33.563a5.06 5.06 0 0 0 .434.491c1.086 1.082 2.656 1.713 4.326 1.715h6.697c.748-.001 1.43-.333 1.858-.872.142-.18.256-.38.336-.602l2.757-7.74c.094-.26.13-.53.112-.794s-.088-.52-.203-.76a2.19 2.19 0 0 0-.821-.91\" fill-opacity=\".6\" fill=\"#000\" />\n            <path d=\"M22.444 24.94l-6.257-3.874a1.45 1.45 0 0 0-.757-.211h-2.953v-9.88c0-.663-.616-1.203-1.373-1.203s-1.37.54-1.37 1.203v16.643l-4.922-.994a3.44 3.44 0 0 0-.692-.069 3.35 3.35 0 0 0-1.925.598c-.147.102-.198.198-.194.298.004.094.058.176.153.23 2.462 1.448 4.517 3.22 6.11 5.27.887 1.14 2.373 1.82 3.98 1.82h6.686c.577 0 1.08-.326 1.253-.8l2.76-7.74c.16-.448-.017-.923-.426-1.22-.025-.02-.043-.043-.07-.06z\" fill=\"#fff\" />\n            <g transform=\"translate(0 .769)\">\n                <mask id=\"B\" fill=\"#fff\">\n                    <use xlink:href=\"#A\" />\n                </mask>\n                <path d=\"M23.993 24.992a1.96 1.96 0 0 1-.111.794l-2.758 7.74c-.08.22-.194.423-.336.602-.427.54-1.11.87-1.857.872h-6.698c-1.67-.002-3.24-.633-4.326-1.715-.154-.154-.3-.318-.434-.49C5.96 30.846 4 29.157 1.646 27.773c-.385-.225-.626-.618-.645-1.05a1.31 1.31 0 0 1 .566-1.122 4.56 4.56 0 0 1 .723-.405l.225-.1a4.3 4.3 0 0 1 .568-.18l.237-.056c.248-.046.5-.075.75-.08.018 0 .034-.003.05-.003.303-.001.597.027.89.086l3.722.752V20.68l-1.436-.68c-3.377-1.596-5.56-5.106-5.56-8.938 0-1.51.336-2.94.93-4.222.015-.03.025-.06.04-.09.127-.267.268-.525.418-.778.093-.16.186-.316.288-.468.063-.095.133-.186.2-.277L3.773 5c.118-.155.26-.29.385-.437.266-.3.544-.604.845-.877a9.33 9.33 0 0 1 .813-.686C6.97 2.167 8.31 1.59 9.757 1.35a9.27 9.27 0 0 1 1.481-.119 8.82 8.82 0 0 1 .748.031c.247.02.49.05.733.088 1.448.238 2.786.816 3.94 1.65.387.28.752.588 1.094.922a9.94 9.94 0 0 1 .949 1.078l.066.092c.102.133.203.268.295.408a9.97 9.97 0 0 1 1.571 4.128c.066.467.103.945.103 1.43 0 3.388-1.67 6.453-4.353 8.243.11.046.227.08.33.144l6.256 3.874c.37.23.645.55.82.9.115.24.185.498.203.76m.697-1.195c-.265-.55-.677-1.007-1.194-1.326l-5.323-3.297c2.255-2.037 3.564-4.97 3.564-8.114 0-2.19-.637-4.304-1.84-6.114-.126-.188-.26-.37-.4-.552-.645-.848-1.402-1.6-2.252-2.204C15.472.91 13.393.232 11.238.232A10.21 10.21 0 0 0 5.23 2.19c-.848.614-1.606 1.356-2.253 2.205-.136.18-.272.363-.398.55C1.374 6.756.737 8.87.737 11.06c0 4.218 2.407 8.08 6.133 9.842l.863.41v3.092l-2.525-.51c-.356-.07-.717-.106-1.076-.106a5.45 5.45 0 0 0-3.14.996c-.653.46-1.022 1.202-.99 1.983a2.28 2.28 0 0 0 1.138 1.872c2.24 1.318 4.106 2.923 5.543 4.772 1.26 1.62 3.333 2.59 5.55 2.592h6.698c1.42-.001 2.68-.86 3.134-2.138l2.76-7.74c.272-.757.224-1.584-.134-2.325\" fill-opacity=\".05\" fill=\"#000\" mask=\"url(#B)\" />\n            </g>\n        </g>\n    </g>\n</svg>`);\n//# sourceMappingURL=controls-svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2Fzc2V0cy9jb250cm9scy1zdmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJCO0FBQzNCLGlFQUFlLHlDQUFJO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sRUFBQztBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvYXNzZXRzL2NvbnRyb2xzLXN2Zy5qcz80ZTRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuZXhwb3J0IGRlZmF1bHQgaHRtbCBgXG48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB3aWR0aD1cIjI1XCIgaGVpZ2h0PVwiMzZcIj5cbiAgICA8ZGVmcz5cbiAgICAgICAgPHBhdGggaWQ9XCJBXCIgZD1cIk0uMDAxLjIzMmgyNC45OTdWMzZILjAwMXpcIiAvPlxuICAgIDwvZGVmcz5cbiAgICA8ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTExIC00KVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICA8cGF0aCBmaWxsLW9wYWNpdHk9XCIwXCIgZmlsbD1cIiNmZmZcIiBkPVwiTTAgMGg0NHY0NEgwelwiIC8+XG4gICAgICAgIDxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgxMSAzKVwiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04LjczMyAxMS4xNjVjLjA0LTEuMTA4Ljc2Ni0yLjAyNyAxLjc0My0yLjMwN2EyLjU0IDIuNTQgMCAwIDEgLjYyOC0uMDg5Yy4xNiAwIC4zMTQuMDE3LjQ2My4wNDQgMS4wODguMiAxLjkgMS4wOTIgMS45IDIuMTZ2OC44OGgxLjI2YzIuOTQzLTEuMzkgNS00LjQ1IDUtOC4wMjVhOS4wMSA5LjAxIDAgMCAwLTEuOS01LjU2bC0uNDMtLjVjLS43NjUtLjgzOC0xLjY4My0xLjUyMi0yLjcxMi0yLTEuMDU3LS40OS0yLjIyNi0uNzctMy40Ni0uNzdzLTIuNC4yNzgtMy40Ni43N2MtMS4wMy40NzgtMS45NDcgMS4xNjItMi43MSAybC0uNDMuNWE5LjAxIDkuMDEgMCAwIDAtMS45IDUuNTYgOS4wNCA5LjA0IDAgMCAwIC4wOTQgMS4zMDVjLjAzLjIxLjA4OC40MS4xMy42MTdsLjEzNi42MjRjLjA4My4yODYuMTk2LjU2LjMwNS44MzJsLjEyNC4zMzNhOC43OCA4Ljc4IDAgMCAwIC41MDkuOTUzbC4wNjUuMTIyYTguNjkgOC42OSAwIDAgMCAzLjUyMSAzLjE5MWwxLjExLjUzN3YtOS4xNzh6XCIgZmlsbC1vcGFjaXR5PVwiLjVcIiBmaWxsPVwiI2U0ZTRlNFwiIC8+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTIyLjk0IDI2LjIxOGwtMi43NiA3Ljc0Yy0uMTcyLjQ4NS0uNjc2LjgtMS4yNTMuOEgxMi4yNGMtMS42MDYgMC0zLjA5Mi0uNjgtMy45OC0xLjgyLTEuNTkyLTIuMDQ4LTMuNjQ3LTMuODIyLTYuMTEtNS4yNy0uMDk1LS4wNTUtLjE1LS4xMzctLjE1Mi0uMjMtLjAwNC0uMS4wNDYtLjE5Ni4xOTMtLjI5Ny41Ni0uMzkzIDEuMjM0LS42IDEuOTI2LS42YTMuNDMgMy40MyAwIDAgMSAuNjkxLjA2OWw0LjkyMi45OTRWMTAuOTcyYzAtLjY2My42MTUtMS4yMDMgMS4zNy0xLjIwM3MxLjM3My41NCAxLjM3MyAxLjIwM3Y5Ljg4MmgyLjk1M2MuMjczIDAgLjUzMy4wNzMuNzU3LjIxbDYuMjU3IDMuODc0Yy4wMjcuMDE3LjA0NS4wNDIuMDcuMDYuNDEuMjk2LjU4Ni43Ny40MjYgMS4yMk00LjEgMTYuNjE0Yy0uMDI0LS4wNC0uMDQyLS4wODMtLjA2NS0uMTIyYTguNjkgOC42OSAwIDAgMS0uNTA5LS45NTNjLS4wNDgtLjEwNy0uMDgtLjIyMy0uMTI0LS4zMzNsLS4zMDUtLjgzMmMtLjA1OC0uMjAyLS4wOS0uNDE2LS4xMzYtLjYyNGwtLjEzLS42MTdhOS4wMyA5LjAzIDAgMCAxLS4wOTQtMS4zMDVjMC0yLjEwNy43MTQtNC4wNCAxLjktNS41NmwuNDMtLjVjLjc2NC0uODQgMS42ODItMS41MjMgMi43MS0yIDEuMDU4LS40OSAyLjIyNi0uNzcgMy40Ni0uNzdzMi40MDIuMjggMy40Ni43N2MxLjAzLjQ3NyAxLjk0NyAxLjE2IDIuNzEyIDJsLjQyOC41YTkgOSAwIDAgMSAxLjkwMSA1LjU1OWMwIDMuNTc3LTIuMDU2IDYuNjM2LTUgOC4wMjZoLTEuMjZ2LTguODgyYzAtMS4wNjctLjgyMi0xLjk2LTEuOS0yLjE2LS4xNS0uMDI4LS4zMDQtLjA0NC0uNDYzLS4wNDQtLjIyIDAtLjQyNy4wMzctLjYyOC4wOS0uOTc3LjI4LTEuNzAzIDEuMTk4LTEuNzQzIDIuMzA2djkuMTc4bC0xLjExLS41MzdDNi4xOCAxOS4wOTggNC45NiAxOCA0LjEgMTYuNjE0TTIyLjk3IDI0LjA5bC02LjI1Ni0zLjg3NGMtLjEwMi0uMDYzLS4yMTgtLjA5OC0uMzMtLjE0NCAyLjY4My0xLjggNC4zNTQtNC44NTUgNC4zNTQtOC4yNDMgMC0uNDg2LS4wMzctLjk2NC0uMTA0LTEuNDNhOS45NyA5Ljk3IDAgMCAwLTEuNTctNC4xMjhsLS4yOTUtLjQwOC0uMDY2LS4wOTJhMTAuMDUgMTAuMDUgMCAwIDAtLjk0OS0xLjA3OGMtLjM0Mi0uMzM0LS43MDgtLjY0My0xLjA5NC0uOTIyLTEuMTU1LS44MzQtMi40OTItMS40MTItMy45NC0xLjY1bC0uNzMyLS4wODgtLjc0OC0uMDNhOS4yOSA5LjI5IDAgMCAwLTEuNDgyLjExOWMtMS40NDcuMjM4LTIuNzg2LjgxNi0zLjk0IDEuNjVhOS4zMyA5LjMzIDAgMCAwLS44MTMuNjg2IDkuNTkgOS41OSAwIDAgMC0uODQ1Ljg3N2wtLjM4NS40MzctLjM2LjUtLjI4OC40NjgtLjQxOC43NzgtLjA0LjA5Yy0uNTkzIDEuMjgtLjkzIDIuNzEtLjkzIDQuMjIyIDAgMy44MzIgMi4xODIgNy4zNDIgNS41NiA4LjkzOGwxLjQzNy42OHY0Ljk0Nkw1IDI1LjY0YTQuNDQgNC40NCAwIDAgMC0uODg4LS4wODZjLS4wMTcgMC0uMDM0LjAwMy0uMDUuMDAzLS4yNTIuMDA0LS41MDMuMDMzLS43NS4wOGE1LjA4IDUuMDggMCAwIDAtLjIzNy4wNTZjLS4xOTMuMDQ2LS4zODIuMTA3LS41NjguMTgtLjA3NS4wMy0uMTUuMDU3LS4yMjUuMS0uMjUuMTE0LS40OTQuMjQ0LS43MjMuNDA1YTEuMzEgMS4zMSAwIDAgMC0uNTY2IDEuMTIyIDEuMjggMS4yOCAwIDAgMCAuNjQ1IDEuMDUxQzQgMjkuOTI1IDUuOTYgMzEuNjE0IDcuNDczIDMzLjU2M2E1LjA2IDUuMDYgMCAwIDAgLjQzNC40OTFjMS4wODYgMS4wODIgMi42NTYgMS43MTMgNC4zMjYgMS43MTVoNi42OTdjLjc0OC0uMDAxIDEuNDMtLjMzMyAxLjg1OC0uODcyLjE0Mi0uMTguMjU2LS4zOC4zMzYtLjYwMmwyLjc1Ny03Ljc0Yy4wOTQtLjI2LjEzLS41My4xMTItLjc5NHMtLjA4OC0uNTItLjIwMy0uNzZhMi4xOSAyLjE5IDAgMCAwLS44MjEtLjkxXCIgZmlsbC1vcGFjaXR5PVwiLjZcIiBmaWxsPVwiIzAwMFwiIC8+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTIyLjQ0NCAyNC45NGwtNi4yNTctMy44NzRhMS40NSAxLjQ1IDAgMCAwLS43NTctLjIxMWgtMi45NTN2LTkuODhjMC0uNjYzLS42MTYtMS4yMDMtMS4zNzMtMS4yMDNzLTEuMzcuNTQtMS4zNyAxLjIwM3YxNi42NDNsLTQuOTIyLS45OTRhMy40NCAzLjQ0IDAgMCAwLS42OTItLjA2OSAzLjM1IDMuMzUgMCAwIDAtMS45MjUuNTk4Yy0uMTQ3LjEwMi0uMTk4LjE5OC0uMTk0LjI5OC4wMDQuMDk0LjA1OC4xNzYuMTUzLjIzIDIuNDYyIDEuNDQ4IDQuNTE3IDMuMjIgNi4xMSA1LjI3Ljg4NyAxLjE0IDIuMzczIDEuODIgMy45OCAxLjgyaDYuNjg2Yy41NzcgMCAxLjA4LS4zMjYgMS4yNTMtLjhsMi43Ni03Ljc0Yy4xNi0uNDQ4LS4wMTctLjkyMy0uNDI2LTEuMjItLjAyNS0uMDItLjA0My0uMDQzLS4wNy0uMDZ6XCIgZmlsbD1cIiNmZmZcIiAvPlxuICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAgLjc2OSlcIj5cbiAgICAgICAgICAgICAgICA8bWFzayBpZD1cIkJcIiBmaWxsPVwiI2ZmZlwiPlxuICAgICAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCIjQVwiIC8+XG4gICAgICAgICAgICAgICAgPC9tYXNrPlxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMjMuOTkzIDI0Ljk5MmExLjk2IDEuOTYgMCAwIDEtLjExMS43OTRsLTIuNzU4IDcuNzRjLS4wOC4yMi0uMTk0LjQyMy0uMzM2LjYwMi0uNDI3LjU0LTEuMTEuODctMS44NTcuODcyaC02LjY5OGMtMS42Ny0uMDAyLTMuMjQtLjYzMy00LjMyNi0xLjcxNS0uMTU0LS4xNTQtLjMtLjMxOC0uNDM0LS40OUM1Ljk2IDMwLjg0NiA0IDI5LjE1NyAxLjY0NiAyNy43NzNjLS4zODUtLjIyNS0uNjI2LS42MTgtLjY0NS0xLjA1YTEuMzEgMS4zMSAwIDAgMSAuNTY2LTEuMTIyIDQuNTYgNC41NiAwIDAgMSAuNzIzLS40MDVsLjIyNS0uMWE0LjMgNC4zIDAgMCAxIC41NjgtLjE4bC4yMzctLjA1NmMuMjQ4LS4wNDYuNS0uMDc1Ljc1LS4wOC4wMTggMCAuMDM0LS4wMDMuMDUtLjAwMy4zMDMtLjAwMS41OTcuMDI3Ljg5LjA4NmwzLjcyMi43NTJWMjAuNjhsLTEuNDM2LS42OGMtMy4zNzctMS41OTYtNS41Ni01LjEwNi01LjU2LTguOTM4IDAtMS41MS4zMzYtMi45NC45My00LjIyMi4wMTUtLjAzLjAyNS0uMDYuMDQtLjA5LjEyNy0uMjY3LjI2OC0uNTI1LjQxOC0uNzc4LjA5My0uMTYuMTg2LS4zMTYuMjg4LS40NjguMDYzLS4wOTUuMTMzLS4xODYuMi0uMjc3TDMuNzczIDVjLjExOC0uMTU1LjI2LS4yOS4zODUtLjQzNy4yNjYtLjMuNTQ0LS42MDQuODQ1LS44NzdhOS4zMyA5LjMzIDAgMCAxIC44MTMtLjY4NkM2Ljk3IDIuMTY3IDguMzEgMS41OSA5Ljc1NyAxLjM1YTkuMjcgOS4yNyAwIDAgMSAxLjQ4MS0uMTE5IDguODIgOC44MiAwIDAgMSAuNzQ4LjAzMWMuMjQ3LjAyLjQ5LjA1LjczMy4wODggMS40NDguMjM4IDIuNzg2LjgxNiAzLjk0IDEuNjUuMzg3LjI4Ljc1Mi41ODggMS4wOTQuOTIyYTkuOTQgOS45NCAwIDAgMSAuOTQ5IDEuMDc4bC4wNjYuMDkyYy4xMDIuMTMzLjIwMy4yNjguMjk1LjQwOGE5Ljk3IDkuOTcgMCAwIDEgMS41NzEgNC4xMjhjLjA2Ni40NjcuMTAzLjk0NS4xMDMgMS40MyAwIDMuMzg4LTEuNjcgNi40NTMtNC4zNTMgOC4yNDMuMTEuMDQ2LjIyNy4wOC4zMy4xNDRsNi4yNTYgMy44NzRjLjM3LjIzLjY0NS41NS44Mi45LjExNS4yNC4xODUuNDk4LjIwMy43Nm0uNjk3LTEuMTk1Yy0uMjY1LS41NS0uNjc3LTEuMDA3LTEuMTk0LTEuMzI2bC01LjMyMy0zLjI5N2MyLjI1NS0yLjAzNyAzLjU2NC00Ljk3IDMuNTY0LTguMTE0IDAtMi4xOS0uNjM3LTQuMzA0LTEuODQtNi4xMTQtLjEyNi0uMTg4LS4yNi0uMzctLjQtLjU1Mi0uNjQ1LS44NDgtMS40MDItMS42LTIuMjUyLTIuMjA0QzE1LjQ3Mi45MSAxMy4zOTMuMjMyIDExLjIzOC4yMzJBMTAuMjEgMTAuMjEgMCAwIDAgNS4yMyAyLjE5Yy0uODQ4LjYxNC0xLjYwNiAxLjM1Ni0yLjI1MyAyLjIwNS0uMTM2LjE4LS4yNzIuMzYzLS4zOTguNTVDMS4zNzQgNi43NTYuNzM3IDguODcuNzM3IDExLjA2YzAgNC4yMTggMi40MDcgOC4wOCA2LjEzMyA5Ljg0MmwuODYzLjQxdjMuMDkybC0yLjUyNS0uNTFjLS4zNTYtLjA3LS43MTctLjEwNi0xLjA3Ni0uMTA2YTUuNDUgNS40NSAwIDAgMC0zLjE0Ljk5NmMtLjY1My40Ni0xLjAyMiAxLjIwMi0uOTkgMS45ODNhMi4yOCAyLjI4IDAgMCAwIDEuMTM4IDEuODcyYzIuMjQgMS4zMTggNC4xMDYgMi45MjMgNS41NDMgNC43NzIgMS4yNiAxLjYyIDMuMzMzIDIuNTkgNS41NSAyLjU5Mmg2LjY5OGMxLjQyLS4wMDEgMi42OC0uODYgMy4xMzQtMi4xMzhsMi43Ni03Ljc0Yy4yNzItLjc1Ny4yMjQtMS41ODQtLjEzNC0yLjMyNVwiIGZpbGwtb3BhY2l0eT1cIi4wNVwiIGZpbGw9XCIjMDAwXCIgbWFzaz1cInVybCgjQilcIiAvPlxuICAgICAgICAgICAgPC9nPlxuICAgICAgICA8L2c+XG4gICAgPC9nPlxuPC9zdmc+YDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyb2xzLXN2Zy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/assets/controls-svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<svg version=\"1.1\" id=\"view_x5F_in_x5F_AR_x5F_icon\"\n\t xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\"\n\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<rect id=\"Bounding_Box\" x=\"0\" y=\"0\" fill=\"none\" width=\"24\" height=\"24\"/>\n<g id=\"Art_layer\">\n\t<path d=\"M3,4c0-0.55,0.45-1,1-1h2V1H4C2.35,1,1,2.35,1,4v2h2V4z\"/>\n\t<path d=\"M20,3c0.55,0,1,0.45,1,1v2h2V4c0-1.65-1.35-3-3-3h-2v2H20z\"/>\n\t<path d=\"M4,21c-0.55,0-1-0.45-1-1v-2H1v2c0,1.65,1.35,3,3,3h2v-2H4z\"/>\n\t<path d=\"M20,21c0.55,0,1-0.45,1-1v-2h2v2c0,1.65-1.35,3-3,3h-2v-2H20z\"/>\n\t<g>\n\t\t<path d=\"M18.25,7.6l-5.5-3.18c-0.46-0.27-1.04-0.27-1.5,0L5.75,7.6C5.29,7.87,5,8.36,5,8.9v6.35c0,0.54,0.29,1.03,0.75,1.3\n\t\t\tl5.5,3.18c0.46,0.27,1.04,0.27,1.5,0l5.5-3.18c0.46-0.27,0.75-0.76,0.75-1.3V8.9C19,8.36,18.71,7.87,18.25,7.6z M7,14.96v-4.62\n\t\t\tl4,2.32v4.61L7,14.96z M12,10.93L8,8.61l4-2.31l4,2.31L12,10.93z M13,17.27v-4.61l4-2.32v4.62L13,17.27z\"/>\n\t</g>\n</g>\n</svg>`);\n//# sourceMappingURL=view-in-ar-material-svg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2Fzc2V0cy92aWV3LWluLWFyLW1hdGVyaWFsLXN2Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkI7QUFDM0IsaUVBQWUseUNBQUk7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxFQUFDO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9hc3NldHMvdmlldy1pbi1hci1tYXRlcmlhbC1zdmcuanM/NDQxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGh0bWwgYFxuPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgaWQ9XCJ2aWV3X3g1Rl9pbl94NUZfQVJfeDVGX2ljb25cIlxuXHQgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiXG5cdCB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbjxyZWN0IGlkPVwiQm91bmRpbmdfQm94XCIgeD1cIjBcIiB5PVwiMFwiIGZpbGw9XCJub25lXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIvPlxuPGcgaWQ9XCJBcnRfbGF5ZXJcIj5cblx0PHBhdGggZD1cIk0zLDRjMC0wLjU1LDAuNDUtMSwxLTFoMlYxSDRDMi4zNSwxLDEsMi4zNSwxLDR2MmgyVjR6XCIvPlxuXHQ8cGF0aCBkPVwiTTIwLDNjMC41NSwwLDEsMC40NSwxLDF2MmgyVjRjMC0xLjY1LTEuMzUtMy0zLTNoLTJ2MkgyMHpcIi8+XG5cdDxwYXRoIGQ9XCJNNCwyMWMtMC41NSwwLTEtMC40NS0xLTF2LTJIMXYyYzAsMS42NSwxLjM1LDMsMywzaDJ2LTJINHpcIi8+XG5cdDxwYXRoIGQ9XCJNMjAsMjFjMC41NSwwLDEtMC40NSwxLTF2LTJoMnYyYzAsMS42NS0xLjM1LDMtMywzaC0ydi0ySDIwelwiLz5cblx0PGc+XG5cdFx0PHBhdGggZD1cIk0xOC4yNSw3LjZsLTUuNS0zLjE4Yy0wLjQ2LTAuMjctMS4wNC0wLjI3LTEuNSwwTDUuNzUsNy42QzUuMjksNy44Nyw1LDguMzYsNSw4Ljl2Ni4zNWMwLDAuNTQsMC4yOSwxLjAzLDAuNzUsMS4zXG5cdFx0XHRsNS41LDMuMThjMC40NiwwLjI3LDEuMDQsMC4yNywxLjUsMGw1LjUtMy4xOGMwLjQ2LTAuMjcsMC43NS0wLjc2LDAuNzUtMS4zVjguOUMxOSw4LjM2LDE4LjcxLDcuODcsMTguMjUsNy42eiBNNywxNC45NnYtNC42MlxuXHRcdFx0bDQsMi4zMnY0LjYxTDcsMTQuOTZ6IE0xMiwxMC45M0w4LDguNjFsNC0yLjMxbDQsMi4zMUwxMiwxMC45M3ogTTEzLDE3LjI3di00LjYxbDQtMi4zMnY0LjYyTDEzLDE3LjI3elwiLz5cblx0PC9nPlxuPC9nPlxuPC9zdmc+YDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpZXctaW4tYXItbWF0ZXJpYWwtc3ZnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HAS_INTERSECTION_OBSERVER: () => (/* binding */ HAS_INTERSECTION_OBSERVER),\n/* harmony export */   HAS_RESIZE_OBSERVER: () => (/* binding */ HAS_RESIZE_OBSERVER),\n/* harmony export */   HAS_WEBXR_DEVICE_API: () => (/* binding */ HAS_WEBXR_DEVICE_API),\n/* harmony export */   HAS_WEBXR_HIT_TEST_API: () => (/* binding */ HAS_WEBXR_HIT_TEST_API),\n/* harmony export */   IS_ANDROID: () => (/* binding */ IS_ANDROID),\n/* harmony export */   IS_AR_QUICKLOOK_CANDIDATE: () => (/* binding */ IS_AR_QUICKLOOK_CANDIDATE),\n/* harmony export */   IS_CHROMEOS: () => (/* binding */ IS_CHROMEOS),\n/* harmony export */   IS_FIREFOX: () => (/* binding */ IS_FIREFOX),\n/* harmony export */   IS_IOS: () => (/* binding */ IS_IOS),\n/* harmony export */   IS_IOS_CHROME: () => (/* binding */ IS_IOS_CHROME),\n/* harmony export */   IS_IOS_SAFARI: () => (/* binding */ IS_IOS_SAFARI),\n/* harmony export */   IS_MOBILE: () => (/* binding */ IS_MOBILE),\n/* harmony export */   IS_OCULUS: () => (/* binding */ IS_OCULUS),\n/* harmony export */   IS_SAFARI: () => (/* binding */ IS_SAFARI),\n/* harmony export */   IS_SCENEVIEWER_CANDIDATE: () => (/* binding */ IS_SCENEVIEWER_CANDIDATE),\n/* harmony export */   IS_WEBXR_AR_CANDIDATE: () => (/* binding */ IS_WEBXR_AR_CANDIDATE),\n/* harmony export */   IS_WKWEBVIEW: () => (/* binding */ IS_WKWEBVIEW)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// NOTE(cdata): The HAS_WEBXR_* constants can be enabled in Chrome by turning on\n// the appropriate flags. However, just because we have the API does not\n// guarantee that AR will work.\nconst HAS_WEBXR_DEVICE_API = navigator.xr != null &&\n    self.XRSession != null && navigator.xr.isSessionSupported != null;\nconst HAS_WEBXR_HIT_TEST_API = HAS_WEBXR_DEVICE_API &&\n    self.XRSession.prototype.requestHitTestSource != null;\nconst HAS_RESIZE_OBSERVER = self.ResizeObserver != null;\nconst HAS_INTERSECTION_OBSERVER = self.IntersectionObserver != null;\nconst IS_WEBXR_AR_CANDIDATE = HAS_WEBXR_HIT_TEST_API;\nconst IS_MOBILE = (() => {\n    const userAgent = navigator.userAgent || navigator.vendor || self.opera;\n    let check = false;\n    // eslint-disable-next-line\n    if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n        .test(userAgent) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n            .test(userAgent.substr(0, 4))) {\n        check = true;\n    }\n    return check;\n})();\nconst IS_CHROMEOS = /\\bCrOS\\b/.test(navigator.userAgent);\nconst IS_ANDROID = /android/i.test(navigator.userAgent);\n// Prior to iOS 13, detecting iOS Safari was relatively straight-forward.\n// As of iOS 13, Safari on iPad (in its default configuration) reports the same\n// user-agent string as Safari on desktop MacOS. Strictly speaking, we only care\n// about iOS for the purposes if selecting for cases where Quick Look is known\n// to be supported. However, for API correctness purposes, we must rely on\n// known, detectable signals to distinguish iOS Safari from MacOS Safari. At the\n// time of this writing, there are no non-iOS/iPadOS Apple devices with\n// multi-touch displays.\n// @see https://stackoverflow.com/questions/57765958/how-to-detect-ipad-and-ipad-os-version-in-ios-13-and-up\n// @see https://forums.developer.apple.com/thread/119186\n// @see https://github.com/google/model-viewer/issues/758\nconst IS_IOS = (/iPad|iPhone|iPod/.test(navigator.userAgent) && !self.MSStream) ||\n    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n// @see https://developer.chrome.com/multidevice/user-agent\nconst IS_SAFARI = /Safari\\//.test(navigator.userAgent);\nconst IS_FIREFOX = /firefox/i.test(navigator.userAgent);\nconst IS_OCULUS = /OculusBrowser/.test(navigator.userAgent);\nconst IS_IOS_CHROME = IS_IOS && /CriOS\\//.test(navigator.userAgent);\nconst IS_IOS_SAFARI = IS_IOS && IS_SAFARI;\nconst IS_SCENEVIEWER_CANDIDATE = IS_ANDROID && !IS_FIREFOX && !IS_OCULUS;\nconst IS_WKWEBVIEW = Boolean(window.webkit && window.webkit.messageHandlers);\n// If running in iOS Safari proper, and not within a WKWebView component instance, check for ARQL feature support.\n// Otherwise, if running in a WKWebView instance, check for known ARQL compatible iOS browsers, including:\n// Chrome (CriOS), Edge (EdgiOS), Firefox (FxiOS), Google App (GSA), DuckDuckGo (DuckDuckGo).\n// All other iOS browsers / apps will fail by default.\nconst IS_AR_QUICKLOOK_CANDIDATE = (() => {\n    if (IS_IOS) {\n        if (!IS_WKWEBVIEW) {\n            const tempAnchor = document.createElement('a');\n            return Boolean(tempAnchor.relList && tempAnchor.relList.supports && tempAnchor.relList.supports('ar'));\n        }\n        else {\n            return Boolean(/CriOS\\/|EdgiOS\\/|FxiOS\\/|GSA\\/|DuckDuckGo\\//.test(navigator.userAgent));\n        }\n    }\n    else {\n        return false;\n    }\n})();\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/decorators.js":
/*!*************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/decorators.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   style: () => (/* binding */ style)\n/* harmony export */ });\n/* harmony import */ var _styles_evaluators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/evaluators */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js\");\n/* harmony import */ var _styles_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styles/parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* harmony import */ var _styles_style_effector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./styles/style-effector */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/style-effector.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * The @style decorator is responsible for coordinating the conversion of a\n * CSS-like string property value into numbers that can be applied to\n * lower-level constructs. It also can optionally manage the lifecycle of a\n * StyleEffector which allows automatic updates for styles that use env() or\n * var() functions.\n *\n * The decorator is configured with Intrinsics and the property key for a\n * method that handles updates. The named update handler is invoked with the\n * result of parsing and evaluating the raw property string value. The format of\n * the evaluated result is derived from the basis of the configured Intrinsics,\n * and is always an array of numbers of fixed length.\n *\n * NOTE: This decorator depends on the property updating mechanism defined by\n * UpdatingElement as exported by the lit-element module. That means it *must*\n * be used in conjunction with the @property decorator, or equivalent\n * JavaScript.\n *\n * Supported configurations are:\n *\n *  - `intrinsics`: An Intrinsics struct that describes how to interpret a\n * serialized style attribute. For more detail on intrinsics see\n * ./styles/evaluators.ts\n *  - `updateHandler`: A string or Symbol that is the key of a method to be\n * invoked with the result of parsing and evaluating a serialized style string.\n *  - `observeEffects`: Optional, if set to true then styles that use env() will\n * cause their update handlers to be invoked every time the corresponding\n * environment variable changes (even if the style attribute itself remains\n * static).\n */\nconst style = (config) => {\n    const observeEffects = config.observeEffects || false;\n    const getIntrinsics = config.intrinsics instanceof Function ?\n        config.intrinsics :\n        (() => config.intrinsics);\n    return (proto, propertyName) => {\n        const originalUpdated = proto.updated;\n        const originalConnectedCallback = proto.connectedCallback;\n        const originalDisconnectedCallback = proto.disconnectedCallback;\n        const $styleEffector = Symbol(`${propertyName}StyleEffector`);\n        const $styleEvaluator = Symbol(`${propertyName}StyleEvaluator`);\n        const $updateEvaluator = Symbol(`${propertyName}UpdateEvaluator`);\n        const $evaluateAndSync = Symbol(`${propertyName}EvaluateAndSync`);\n        Object.defineProperties(proto, {\n            [$styleEffector]: { value: null, writable: true },\n            [$styleEvaluator]: { value: null, writable: true },\n            [$updateEvaluator]: {\n                value: function () {\n                    const ast = (0,_styles_parsers__WEBPACK_IMPORTED_MODULE_1__.parseExpressions)(this[propertyName]);\n                    this[$styleEvaluator] =\n                        new _styles_evaluators__WEBPACK_IMPORTED_MODULE_0__.StyleEvaluator(ast, getIntrinsics(this));\n                    if (this[$styleEffector] == null && observeEffects) {\n                        this[$styleEffector] =\n                            new _styles_style_effector__WEBPACK_IMPORTED_MODULE_2__.StyleEffector(() => this[$evaluateAndSync]());\n                    }\n                    if (this[$styleEffector] != null) {\n                        this[$styleEffector].observeEffectsFor(ast);\n                    }\n                }\n            },\n            [$evaluateAndSync]: {\n                value: function () {\n                    if (this[$styleEvaluator] == null) {\n                        return;\n                    }\n                    const result = this[$styleEvaluator].evaluate();\n                    // @see https://github.com/microsoft/TypeScript/pull/30769\n                    // @see https://github.com/Microsoft/TypeScript/issues/1863\n                    this[config.updateHandler](result);\n                }\n            },\n            updated: {\n                value: function (changedProperties) {\n                    // Always invoke updates to styles first. This gives a class that\n                    // uses this decorator the opportunity to override the effect, or\n                    // respond to it, in its own implementation of `updated`.\n                    if (changedProperties.has(propertyName)) {\n                        this[$updateEvaluator]();\n                        this[$evaluateAndSync]();\n                    }\n                    originalUpdated.call(this, changedProperties);\n                }\n            },\n            connectedCallback: {\n                value: function () {\n                    originalConnectedCallback.call(this);\n                    this.requestUpdate(propertyName, this[propertyName]);\n                }\n            },\n            disconnectedCallback: {\n                value: function () {\n                    originalDisconnectedCallback.call(this);\n                    if (this[$styleEffector] != null) {\n                        this[$styleEffector].dispose();\n                        this[$styleEffector] = null;\n                    }\n                }\n            }\n        });\n    };\n};\n//# sourceMappingURL=decorators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/decorators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/animation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/animation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimationMixin: () => (/* binding */ AnimationMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\nconst MILLISECONDS_PER_SECOND = 1000.0;\nconst $changeAnimation = Symbol('changeAnimation');\nconst $paused = Symbol('paused');\nconst DEFAULT_PLAY_OPTIONS = {\n    repetitions: Infinity,\n    pingpong: false\n};\nconst AnimationMixin = (ModelViewerElement) => {\n    var _a;\n    class AnimationModelViewerElement extends ModelViewerElement {\n        constructor(...args) {\n            super(args);\n            this.autoplay = false;\n            this.animationName = undefined;\n            this.animationCrossfadeDuration = 300;\n            this[_a] = true;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].subscribeMixerEvent('loop', (e) => {\n                const count = e.action._loopCount;\n                this.dispatchEvent(new CustomEvent('loop', { detail: { count } }));\n            });\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].subscribeMixerEvent('finished', () => {\n                this[$paused] = true;\n                this.dispatchEvent(new CustomEvent('finished'));\n            });\n        }\n        /**\n         * Returns an array\n         */\n        get availableAnimations() {\n            if (this.loaded) {\n                return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationNames;\n            }\n            return [];\n        }\n        get duration() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].duration;\n        }\n        get paused() {\n            return this[$paused];\n        }\n        get currentTime() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTime;\n        }\n        set currentTime(value) {\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTime = value;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n        }\n        get timeScale() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTimeScale;\n        }\n        set timeScale(value) {\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].animationTimeScale = value;\n        }\n        pause() {\n            if (this[$paused]) {\n                return;\n            }\n            this[$paused] = true;\n            this.dispatchEvent(new CustomEvent('pause'));\n        }\n        play(options) {\n            if (this.availableAnimations.length > 0) {\n                this[$paused] = false;\n                this[$changeAnimation](options);\n                this.dispatchEvent(new CustomEvent('play'));\n            }\n        }\n        [(_a = $paused, _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad)]() {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad]();\n            this[$paused] = true;\n            if (this.autoplay) {\n                this.play();\n            }\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$tick](_time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$tick](_time, delta);\n            if (this[$paused] ||\n                (!this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$getModelIsVisible]() && !this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].isPresenting)) {\n                return;\n            }\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].updateAnimation(delta / MILLISECONDS_PER_SECOND);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('autoplay') && this.autoplay) {\n                this.play();\n            }\n            if (changedProperties.has('animationName')) {\n                this[$changeAnimation]();\n            }\n        }\n        [$changeAnimation](options = DEFAULT_PLAY_OPTIONS) {\n            var _b;\n            const repetitions = (_b = options.repetitions) !== null && _b !== void 0 ? _b : Infinity;\n            const mode = options.pingpong ?\n                three__WEBPACK_IMPORTED_MODULE_2__.LoopPingPong :\n                (repetitions === 1 ? three__WEBPACK_IMPORTED_MODULE_2__.LoopOnce : three__WEBPACK_IMPORTED_MODULE_2__.LoopRepeat);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].playAnimation(this.animationName, this.animationCrossfadeDuration / MILLISECONDS_PER_SECOND, mode, repetitions);\n            // If we are currently paused, we need to force a render so that\n            // the scene updates to the first frame of the new animation\n            if (this[$paused]) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].updateAnimation(0);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean })\n    ], AnimationModelViewerElement.prototype, \"autoplay\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'animation-name' })\n    ], AnimationModelViewerElement.prototype, \"animationName\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'animation-crossfade-duration' })\n    ], AnimationModelViewerElement.prototype, \"animationCrossfadeDuration\", void 0);\n    return AnimationModelViewerElement;\n};\n//# sourceMappingURL=animation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/animation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/annotation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/annotation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnnotationMixin: () => (/* binding */ AnnotationMixin)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_Hotspot_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../three-components/Hotspot.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $hotspotMap = Symbol('hotspotMap');\nconst $mutationCallback = Symbol('mutationCallback');\nconst $observer = Symbol('observer');\nconst $addHotspot = Symbol('addHotspot');\nconst $removeHotspot = Symbol('removeHotspot');\nconst worldToModel = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nconst worldToModelNormal = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix3();\n/**\n * AnnotationMixin implements a declarative API to add hotspots and annotations.\n * Child elements of the <model-viewer> element that have a slot name that\n * begins with \"hotspot\" and data-position and data-normal attributes in\n * the format of the camera-target attribute will be added to the scene and\n * track the specified model coordinates.\n */\nconst AnnotationMixin = (ModelViewerElement) => {\n    var _a, _b, _c;\n    class AnnotationModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this[_a] = new Map();\n            this[_b] = (mutations) => {\n                mutations.forEach((mutation) => {\n                    // NOTE: Be wary that in ShadyDOM cases, the MutationRecord\n                    // only has addedNodes and removedNodes (and no other details).\n                    if (!(mutation instanceof MutationRecord) ||\n                        mutation.type === 'childList') {\n                        mutation.addedNodes.forEach((node) => {\n                            this[$addHotspot](node);\n                        });\n                        mutation.removedNodes.forEach((node) => {\n                            this[$removeHotspot](node);\n                        });\n                        this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$needsRender]();\n                    }\n                });\n            };\n            this[_c] = new MutationObserver(this[$mutationCallback]);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            for (let i = 0; i < this.children.length; ++i) {\n                this[$addHotspot](this.children[i]);\n            }\n            const { ShadyDOM } = self;\n            if (ShadyDOM == null) {\n                this[$observer].observe(this, { childList: true });\n            }\n            else {\n                this[$observer] =\n                    ShadyDOM.observeChildren(this, this[$mutationCallback]);\n            }\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            const { ShadyDOM } = self;\n            if (ShadyDOM == null) {\n                this[$observer].disconnect();\n            }\n            else {\n                ShadyDOM.unobserveChildren(this[$observer]);\n            }\n        }\n        [(_a = $hotspotMap, _b = $mutationCallback, _c = $observer, _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$tick)](time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$tick](time, delta);\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene];\n            const { annotationRenderer } = scene;\n            const camera = scene.getCamera();\n            if (scene.shouldRender()) {\n                scene.updateHotspots(camera.position);\n                annotationRenderer.domElement.style.display = '';\n                annotationRenderer.render(scene, camera);\n            }\n        }\n        /**\n         * Since the data-position and data-normal attributes are not observed, use\n         * this method to move a hotspot. Keep in mind that all hotspots with the\n         * same slot name use a single location and the first definition takes\n         * precedence, until updated with this method.\n         */\n        updateHotspot(config) {\n            const hotspot = this[$hotspotMap].get(config.name);\n            if (hotspot == null) {\n                return;\n            }\n            hotspot.updatePosition(config.position);\n            hotspot.updateNormal(config.normal);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$needsRender]();\n        }\n        /**\n         * This method returns in-scene data about a requested hotspot including\n         * its position in screen (canvas) space and its current visibility.\n         */\n        queryHotspot(name) {\n            const hotspot = this[$hotspotMap].get(name);\n            if (hotspot == null) {\n                return null;\n            }\n            const position = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hotspot.position);\n            const normal = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hotspot.normal);\n            const facingCamera = hotspot.facingCamera;\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene];\n            const camera = scene.getCamera();\n            const vector = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n            vector.setFromMatrixPosition(hotspot.matrixWorld);\n            vector.project(camera);\n            const widthHalf = scene.width / 2;\n            const heightHalf = scene.height / 2;\n            vector.x = (vector.x * widthHalf) + widthHalf;\n            vector.y = -(vector.y * heightHalf) + heightHalf;\n            const canvasPosition = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(vector.x, vector.y, vector.z));\n            if (!Number.isFinite(canvasPosition.x) ||\n                !Number.isFinite(canvasPosition.y)) {\n                return null;\n            }\n            return { position, normal, canvasPosition, facingCamera };\n        }\n        /**\n         * This method returns the model position, normal and texture coordinate\n         * of the point on the mesh corresponding to the input pixel coordinates\n         * given relative to the model-viewer element. The position and normal\n         * are returned as strings in the format suitable for putting in a\n         * hotspot's data-position and data-normal attributes. If the mesh is\n         * not hit, the result is null.\n         */\n        positionAndNormalFromPoint(pixelX, pixelY) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene];\n            const ndcPosition = scene.getNDC(pixelX, pixelY);\n            const hit = scene.positionAndNormalFromPoint(ndcPosition);\n            if (hit == null) {\n                return null;\n            }\n            worldToModel.copy(scene.target.matrixWorld).invert();\n            const position = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hit.position.applyMatrix4(worldToModel));\n            worldToModelNormal.getNormalMatrix(worldToModel);\n            const normal = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector3D)(hit.normal.applyNormalMatrix(worldToModelNormal));\n            let uv = null;\n            if (hit.uv != null) {\n                uv = (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.toVector2D)(hit.uv);\n            }\n            return { position: position, normal: normal, uv: uv };\n        }\n        [$addHotspot](node) {\n            if (!(node instanceof HTMLElement &&\n                node.slot.indexOf('hotspot') === 0)) {\n                return;\n            }\n            let hotspot = this[$hotspotMap].get(node.slot);\n            if (hotspot != null) {\n                hotspot.increment();\n            }\n            else {\n                hotspot = new _three_components_Hotspot_js__WEBPACK_IMPORTED_MODULE_1__.Hotspot({\n                    name: node.slot,\n                    position: node.dataset.position,\n                    normal: node.dataset.normal,\n                });\n                this[$hotspotMap].set(node.slot, hotspot);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].addHotspot(hotspot);\n            }\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].queueRender();\n        }\n        [$removeHotspot](node) {\n            if (!(node instanceof HTMLElement)) {\n                return;\n            }\n            const hotspot = this[$hotspotMap].get(node.slot);\n            if (!hotspot) {\n                return;\n            }\n            if (hotspot.decrement()) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].removeHotspot(hotspot);\n                this[$hotspotMap].delete(node.slot);\n            }\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.$scene].queueRender();\n        }\n    }\n    return AnnotationModelViewerElement;\n};\n//# sourceMappingURL=annotation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/annotation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/ar.js":
/*!**************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/ar.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $openIOSARQuickLook: () => (/* binding */ $openIOSARQuickLook),\n/* harmony export */   $openSceneViewer: () => (/* binding */ $openSceneViewer),\n/* harmony export */   ARMixin: () => (/* binding */ ARMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three_examples_jsm_exporters_USDZExporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/exporters/USDZExporter.js */ \"(ssr)/./node_modules/three/examples/jsm/exporters/USDZExporter.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/constants.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_deserializers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/deserializers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/deserializers.js\");\n/* harmony import */ var _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../three-components/ARRenderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\nlet isWebXRBlocked = false;\nlet isSceneViewerBlocked = false;\nconst noArViewerSigil = '#model-viewer-no-ar-fallback';\nconst deserializeARModes = (0,_styles_deserializers_js__WEBPACK_IMPORTED_MODULE_3__.enumerationDeserializer)(['quick-look', 'scene-viewer', 'webxr', 'none']);\nconst DEFAULT_AR_MODES = 'webxr scene-viewer quick-look';\nconst ARMode = {\n    QUICK_LOOK: 'quick-look',\n    SCENE_VIEWER: 'scene-viewer',\n    WEBXR: 'webxr',\n    NONE: 'none'\n};\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nconst $openSceneViewer = Symbol('openSceneViewer');\nconst $openIOSARQuickLook = Symbol('openIOSARQuickLook');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $arAnchor = Symbol('arAnchor');\nconst $preload = Symbol('preload');\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\nconst $onARStatus = Symbol('onARStatus');\nconst $onARTracking = Symbol('onARTracking');\nconst $onARTap = Symbol('onARTap');\nconst $selectARMode = Symbol('selectARMode');\nconst $triggerLoad = Symbol('triggerLoad');\nconst ARMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    class ARModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.ar = false;\n            this.arScale = 'auto';\n            this.arPlacement = 'floor';\n            this.arModes = DEFAULT_AR_MODES;\n            this.iosSrc = null;\n            this.xrEnvironment = false;\n            this[_a] = false;\n            // TODO: Add this to the shadow root as part of this mixin's\n            // implementation:\n            this[_b] = this.shadowRoot.querySelector('.ar-button');\n            this[_c] = document.createElement('a');\n            this[_d] = new Set();\n            this[_e] = ARMode.NONE;\n            this[_f] = false;\n            this[_g] = (event) => {\n                event.preventDefault();\n                this.activateAR();\n            };\n            this[_h] = ({ status }) => {\n                if (status === _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.NOT_PRESENTING ||\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.presentedScene === this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene]) {\n                    this.setAttribute('ar-status', status);\n                    this.dispatchEvent(new CustomEvent('ar-status', { detail: { status } }));\n                    if (status === _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.NOT_PRESENTING) {\n                        this.removeAttribute('ar-tracking');\n                    }\n                    else if (status === _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.SESSION_STARTED) {\n                        this.setAttribute('ar-tracking', _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARTracking.TRACKING);\n                    }\n                }\n            };\n            this[_j] = ({ status }) => {\n                this.setAttribute('ar-tracking', status);\n                this.dispatchEvent(new CustomEvent('ar-tracking', { detail: { status } }));\n            };\n            this[_k] = (event) => {\n                if (event.data == '_apple_ar_quicklook_button_tapped') {\n                    this.dispatchEvent(new CustomEvent('quick-look-button-tapped'));\n                }\n            };\n        }\n        get canActivateAR() {\n            return this[$arMode] !== ARMode.NONE;\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.addEventListener('status', this[$onARStatus]);\n            this.setAttribute('ar-status', _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.NOT_PRESENTING);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.addEventListener('tracking', this[$onARTracking]);\n            this[$arAnchor].addEventListener('message', this[$onARTap]);\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.removeEventListener('status', this[$onARStatus]);\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.removeEventListener('tracking', this[$onARTracking]);\n            this[$arAnchor].removeEventListener('message', this[$onARTap]);\n        }\n        update(changedProperties) {\n            super.update(changedProperties);\n            if (changedProperties.has('arScale')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].canScale = this.arScale !== 'fixed';\n            }\n            if (changedProperties.has('arPlacement')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].updateShadow();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$needsRender]();\n            }\n            if (changedProperties.has('arModes')) {\n                this[$arModes] = deserializeARModes(this.arModes);\n            }\n            if (changedProperties.has('ar') || changedProperties.has('arModes') ||\n                changedProperties.has('src') || changedProperties.has('iosSrc')) {\n                this[$selectARMode]();\n            }\n        }\n        /**\n         * Activates AR. Note that for any mode that is not WebXR-based, this\n         * method most likely has to be called synchronous from a user\n         * interaction handler. Otherwise, attempts to activate modes that\n         * require user interaction will most likely be ignored.\n         */\n        async activateAR() {\n            switch (this[$arMode]) {\n                case ARMode.QUICK_LOOK:\n                    this[$openIOSARQuickLook]();\n                    break;\n                case ARMode.WEBXR:\n                    await this[$enterARWithWebXR]();\n                    break;\n                case ARMode.SCENE_VIEWER:\n                    this[$openSceneViewer]();\n                    break;\n                default:\n                    console.warn('No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n                    break;\n            }\n        }\n        async [(_a = $canActivateAR, _b = $arButtonContainer, _c = $arAnchor, _d = $arModes, _e = $arMode, _f = $preload, _g = $onARButtonContainerClick, _h = $onARStatus, _j = $onARTracking, _k = $onARTap, $selectARMode)]() {\n            let arMode = ARMode.NONE;\n            if (this.ar) {\n                if (this.src != null) {\n                    for (const value of this[$arModes]) {\n                        if (value === 'webxr' && _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_WEBXR_AR_CANDIDATE && !isWebXRBlocked &&\n                            await this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.supportsPresentation()) {\n                            arMode = ARMode.WEBXR;\n                            break;\n                        }\n                        if (value === 'scene-viewer' && _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_SCENEVIEWER_CANDIDATE &&\n                            !isSceneViewerBlocked) {\n                            arMode = ARMode.SCENE_VIEWER;\n                            break;\n                        }\n                        if (value === 'quick-look' && _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_AR_QUICKLOOK_CANDIDATE) {\n                            arMode = ARMode.QUICK_LOOK;\n                            break;\n                        }\n                    }\n                }\n                // The presence of ios-src overrides the absence of quick-look\n                // ar-mode.\n                if (arMode === ARMode.NONE && this.iosSrc != null &&\n                    _constants_js__WEBPACK_IMPORTED_MODULE_1__.IS_AR_QUICKLOOK_CANDIDATE) {\n                    arMode = ARMode.QUICK_LOOK;\n                }\n            }\n            if (arMode !== ARMode.NONE) {\n                this[$arButtonContainer].classList.add('enabled');\n                this[$arButtonContainer].addEventListener('click', this[$onARButtonContainerClick]);\n            }\n            else if (this[$arButtonContainer].classList.contains('enabled')) {\n                this[$arButtonContainer].removeEventListener('click', this[$onARButtonContainerClick]);\n                this[$arButtonContainer].classList.remove('enabled');\n                // If AR went from working to not, notify the element.\n                const status = _three_components_ARRenderer_js__WEBPACK_IMPORTED_MODULE_4__.ARStatus.FAILED;\n                this.setAttribute('ar-status', status);\n                this.dispatchEvent(new CustomEvent('ar-status', { detail: { status } }));\n            }\n            this[$arMode] = arMode;\n        }\n        async [$enterARWithWebXR]() {\n            console.log('Attempting to present in AR with WebXR...');\n            await this[$triggerLoad]();\n            try {\n                this[$arButtonContainer].removeEventListener('click', this[$onARButtonContainerClick]);\n                const { arRenderer } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer];\n                arRenderer.placeOnWall = this.arPlacement === 'wall';\n                await arRenderer.present(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene], this.xrEnvironment);\n            }\n            catch (error) {\n                console.warn('Error while trying to present in AR with WebXR');\n                console.error(error);\n                await this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.stopPresenting();\n                isWebXRBlocked = true;\n                console.warn('Falling back to next ar-mode');\n                await this[$selectARMode]();\n                this.activateAR();\n            }\n            finally {\n                this[$selectARMode]();\n            }\n        }\n        async [$triggerLoad]() {\n            if (!this.loaded) {\n                this[$preload] = true;\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$updateSource]();\n                await (0,_utilities_js__WEBPACK_IMPORTED_MODULE_5__.waitForEvent)(this, 'load');\n                this[$preload] = false;\n            }\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$shouldAttemptPreload]() {\n            return super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$shouldAttemptPreload]() || this[$preload];\n        }\n        /**\n         * Takes a URL and a title string, and attempts to launch Scene Viewer on\n         * the current device.\n         */\n        [$openSceneViewer]() {\n            const location = self.location.toString();\n            const locationUrl = new URL(location);\n            const modelUrl = new URL(this.src, location);\n            const params = new URLSearchParams(modelUrl.search);\n            locationUrl.hash = noArViewerSigil;\n            // modelUrl can contain title/link/sound etc.\n            params.set('mode', 'ar_preferred');\n            if (!params.has('disable_occlusion')) {\n                params.set('disable_occlusion', 'true');\n            }\n            if (this.arScale === 'fixed') {\n                params.set('resizable', 'false');\n            }\n            if (this.arPlacement === 'wall') {\n                params.set('enable_vertical_placement', 'true');\n            }\n            if (params.has('sound')) {\n                const soundUrl = new URL(params.get('sound'), location);\n                params.set('sound', soundUrl.toString());\n            }\n            if (params.has('link')) {\n                const linkUrl = new URL(params.get('link'), location);\n                params.set('link', linkUrl.toString());\n            }\n            const intent = `intent://arvr.google.com/scene-viewer/1.0?${params.toString() + '&file=' +\n                encodeURIComponent(modelUrl\n                    .toString())}#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${encodeURIComponent(locationUrl.toString())};end;`;\n            const undoHashChange = () => {\n                if (self.location.hash === noArViewerSigil) {\n                    isSceneViewerBlocked = true;\n                    // The new history will be the current URL with a new hash.\n                    // Go back one step so that we reset to the expected URL.\n                    // NOTE(cdata): this should not invoke any browser-level navigation\n                    // because hash-only changes modify the URL in-place without\n                    // navigating:\n                    self.history.back();\n                    console.warn('Error while trying to present in AR with Scene Viewer');\n                    console.warn('Falling back to next ar-mode');\n                    this[$selectARMode]();\n                    // Would be nice to activateAR() here, but webXR fails due to not\n                    // seeing a user activation.\n                }\n            };\n            self.addEventListener('hashchange', undoHashChange, { once: true });\n            this[$arAnchor].setAttribute('href', intent);\n            console.log('Attempting to present in AR with Scene Viewer...');\n            this[$arAnchor].click();\n        }\n        /**\n         * Takes a URL to a USDZ file and sets the appropriate fields so that\n         * Safari iOS can intent to their AR Quick Look.\n         */\n        async [$openIOSARQuickLook]() {\n            const generateUsdz = !this.iosSrc;\n            this[$arButtonContainer].classList.remove('enabled');\n            const objectURL = generateUsdz ? await this.prepareUSDZ() : this.iosSrc;\n            const modelUrl = new URL(objectURL, self.location.toString());\n            if (generateUsdz) {\n                const location = self.location.toString();\n                const locationUrl = new URL(location);\n                const srcUrl = new URL(this.src, locationUrl);\n                if (srcUrl.hash) {\n                    modelUrl.hash = srcUrl.hash;\n                }\n            }\n            if (this.arScale === 'fixed') {\n                if (modelUrl.hash) {\n                    modelUrl.hash += '&';\n                }\n                modelUrl.hash += 'allowsContentScaling=0';\n            }\n            const anchor = this[$arAnchor];\n            anchor.setAttribute('rel', 'ar');\n            const img = document.createElement('img');\n            anchor.appendChild(img);\n            anchor.setAttribute('href', modelUrl.toString());\n            if (generateUsdz) {\n                anchor.setAttribute('download', 'model.usdz');\n            }\n            // attach anchor to shadow DOM to ensure iOS16 ARQL banner click message event propagation \n            anchor.style.display = 'none';\n            if (!anchor.isConnected)\n                this.shadowRoot.appendChild(anchor);\n            console.log('Attempting to present in AR with Quick Look...');\n            anchor.click();\n            anchor.removeChild(img);\n            if (generateUsdz) {\n                URL.revokeObjectURL(objectURL);\n            }\n            this[$arButtonContainer].classList.add('enabled');\n        }\n        async prepareUSDZ() {\n            const updateSourceProgress = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$progressTracker].beginActivity();\n            await this[$triggerLoad]();\n            const { model, shadow } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            if (model == null) {\n                return '';\n            }\n            let visible = false;\n            // Remove shadow from export\n            if (shadow != null) {\n                visible = shadow.visible;\n                shadow.visible = false;\n            }\n            updateSourceProgress(0.2);\n            const exporter = new three_examples_jsm_exporters_USDZExporter_js__WEBPACK_IMPORTED_MODULE_6__.USDZExporter();\n            const arraybuffer = await exporter.parse(model);\n            const blob = new Blob([arraybuffer], {\n                type: 'model/vnd.usdz+zip',\n            });\n            const url = URL.createObjectURL(blob);\n            updateSourceProgress(1);\n            if (shadow != null) {\n                shadow.visible = visible;\n            }\n            return url;\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'ar' })\n    ], ARModelViewerElement.prototype, \"ar\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ar-scale' })\n    ], ARModelViewerElement.prototype, \"arScale\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ar-placement' })\n    ], ARModelViewerElement.prototype, \"arPlacement\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ar-modes' })\n    ], ARModelViewerElement.prototype, \"arModes\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'ios-src' })\n    ], ARModelViewerElement.prototype, \"iosSrc\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'xr-environment' })\n    ], ARModelViewerElement.prototype, \"xrEnvironment\", void 0);\n    return ARModelViewerElement;\n};\n//# sourceMappingURL=ar.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/ar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/controls.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $controls: () => (/* binding */ $controls),\n/* harmony export */   $fingerAnimatedContainers: () => (/* binding */ $fingerAnimatedContainers),\n/* harmony export */   $panElement: () => (/* binding */ $panElement),\n/* harmony export */   $promptAnimatedContainer: () => (/* binding */ $promptAnimatedContainer),\n/* harmony export */   $promptElement: () => (/* binding */ $promptElement),\n/* harmony export */   ControlsMixin: () => (/* binding */ ControlsMixin),\n/* harmony export */   DEFAULT_CAMERA_ORBIT: () => (/* binding */ DEFAULT_CAMERA_ORBIT),\n/* harmony export */   DEFAULT_FOV_DEG: () => (/* binding */ DEFAULT_FOV_DEG),\n/* harmony export */   DEFAULT_INTERACTION_PROMPT_THRESHOLD: () => (/* binding */ DEFAULT_INTERACTION_PROMPT_THRESHOLD),\n/* harmony export */   DEFAULT_MIN_FOV_DEG: () => (/* binding */ DEFAULT_MIN_FOV_DEG),\n/* harmony export */   INTERACTION_PROMPT: () => (/* binding */ INTERACTION_PROMPT),\n/* harmony export */   InteractionPromptStrategy: () => (/* binding */ InteractionPromptStrategy),\n/* harmony export */   InteractionPromptStyle: () => (/* binding */ InteractionPromptStyle),\n/* harmony export */   TouchAction: () => (/* binding */ TouchAction),\n/* harmony export */   cameraOrbitIntrinsics: () => (/* binding */ cameraOrbitIntrinsics),\n/* harmony export */   cameraTargetIntrinsics: () => (/* binding */ cameraTargetIntrinsics),\n/* harmony export */   fieldOfViewIntrinsics: () => (/* binding */ fieldOfViewIntrinsics)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../decorators.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/decorators.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_evaluators_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles/evaluators.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* harmony import */ var _three_components_Damper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../three-components/Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* harmony import */ var _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../three-components/SmoothControls.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js\");\n/* harmony import */ var _utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/animation.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/animation.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n// NOTE(cdata): The following \"animation\" timing functions are deliberately\n// being used in favor of CSS animations. In Safari 12.1 and 13, CSS animations\n// would cause the interaction prompt to glitch unexpectedly\n// @see https://github.com/google/model-viewer/issues/839\nconst PROMPT_ANIMATION_TIME = 5000;\n// For timing purposes, a \"frame\" is a timing agnostic relative unit of time\n// and a \"value\" is a target value for the Frame.\nconst wiggle = (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)({\n    initialValue: 0,\n    keyframes: [\n        { frames: 5, value: -1 },\n        { frames: 1, value: -1 },\n        { frames: 8, value: 1 },\n        { frames: 1, value: 1 },\n        { frames: 5, value: 0 },\n        { frames: 18, value: 0 }\n    ]\n});\nconst fade = (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)({\n    initialValue: 0,\n    keyframes: [\n        { frames: 1, value: 1 },\n        { frames: 5, value: 1 },\n        { frames: 1, value: 0 },\n        { frames: 6, value: 0 }\n    ]\n});\nconst DEFAULT_FOV_DEG = 30;\nconst DEFAULT_MIN_FOV_DEG = 12;\nconst DEFAULT_CAMERA_ORBIT = '0deg 75deg 105%';\nconst DEFAULT_CAMERA_TARGET = 'auto auto auto';\nconst DEFAULT_FIELD_OF_VIEW = 'auto';\nconst MINIMUM_RADIUS_RATIO = 2.2;\nconst AZIMUTHAL_QUADRANT_LABELS = ['front', 'right', 'back', 'left'];\nconst POLAR_TRIENT_LABELS = ['upper-', '', 'lower-'];\nconst DEFAULT_INTERACTION_PROMPT_THRESHOLD = 3000;\nconst INTERACTION_PROMPT = '. Use mouse, touch or arrow keys to move.';\nconst InteractionPromptStrategy = {\n    AUTO: 'auto',\n    NONE: 'none'\n};\nconst InteractionPromptStyle = {\n    BASIC: 'basic',\n    WIGGLE: 'wiggle'\n};\nconst TouchAction = {\n    PAN_Y: 'pan-y',\n    PAN_X: 'pan-x',\n    NONE: 'none'\n};\nconst fieldOfViewIntrinsics = () => {\n    return {\n        basis: [(0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.degreesToRadians)((0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(DEFAULT_FOV_DEG, 'deg'))],\n        keywords: { auto: [null] }\n    };\n};\nconst minFieldOfViewIntrinsics = () => {\n    return {\n        basis: [(0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.degreesToRadians)((0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(DEFAULT_MIN_FOV_DEG, 'deg'))],\n        keywords: { auto: [null] }\n    };\n};\nconst cameraOrbitIntrinsics = (() => {\n    const defaultTerms = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.parseExpressions)(DEFAULT_CAMERA_ORBIT)[0]\n        .terms;\n    const theta = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.normalizeUnit)(defaultTerms[0]);\n    const phi = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.normalizeUnit)(defaultTerms[1]);\n    return (element) => {\n        const radius = element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].idealCameraDistance();\n        return {\n            basis: [theta, phi, (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(radius, 'm')],\n            keywords: { auto: [null, null, (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(105, '%')] }\n        };\n    };\n})();\nconst minCameraOrbitIntrinsics = (element) => {\n    const radius = MINIMUM_RADIUS_RATIO * element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].boundingSphere.radius;\n    return {\n        basis: [\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(-Infinity, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(Math.PI / 8, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(radius, 'm')\n        ],\n        keywords: { auto: [null, null, null] }\n    };\n};\nconst maxCameraOrbitIntrinsics = (element) => {\n    const orbitIntrinsics = cameraOrbitIntrinsics(element);\n    const evaluator = new _styles_evaluators_js__WEBPACK_IMPORTED_MODULE_4__.StyleEvaluator([], orbitIntrinsics);\n    const defaultRadius = evaluator.evaluate()[2];\n    return {\n        basis: [\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(Infinity, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(Math.PI - Math.PI / 8, 'rad'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(defaultRadius, 'm')\n        ],\n        keywords: { auto: [null, null, null] }\n    };\n};\nconst cameraTargetIntrinsics = (element) => {\n    const center = element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].boundingBox.getCenter(new three__WEBPACK_IMPORTED_MODULE_9__.Vector3());\n    return {\n        basis: [\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(center.x, 'm'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(center.y, 'm'),\n            (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_5__.numberNode)(center.z, 'm')\n        ],\n        keywords: { auto: [null, null, null] }\n    };\n};\nconst HALF_PI = Math.PI / 2.0;\nconst THIRD_PI = Math.PI / 3.0;\nconst QUARTER_PI = HALF_PI / 2.0;\nconst TAU = 2.0 * Math.PI;\nconst $controls = Symbol('controls');\nconst $panElement = Symbol('panElement');\nconst $promptElement = Symbol('promptElement');\nconst $promptAnimatedContainer = Symbol('promptAnimatedContainer');\nconst $fingerAnimatedContainers = Symbol('fingerAnimatedContainers');\nconst $deferInteractionPrompt = Symbol('deferInteractionPrompt');\nconst $updateAria = Symbol('updateAria');\nconst $updateCameraForRadius = Symbol('updateCameraForRadius');\nconst $onChange = Symbol('onChange');\nconst $onPointerChange = Symbol('onPointerChange');\nconst $waitingToPromptUser = Symbol('waitingToPromptUser');\nconst $userHasInteracted = Symbol('userHasInteracted');\nconst $promptElementVisibleTime = Symbol('promptElementVisibleTime');\nconst $lastPromptOffset = Symbol('lastPromptOffset');\nconst $lastSpherical = Symbol('lastSpherical');\nconst $jumpCamera = Symbol('jumpCamera');\nconst $initialized = Symbol('initialized');\nconst $maintainThetaPhi = Symbol('maintainThetaPhi');\nconst $syncCameraOrbit = Symbol('syncCameraOrbit');\nconst $syncFieldOfView = Symbol('syncFieldOfView');\nconst $syncCameraTarget = Symbol('syncCameraTarget');\nconst $syncMinCameraOrbit = Symbol('syncMinCameraOrbit');\nconst $syncMaxCameraOrbit = Symbol('syncMaxCameraOrbit');\nconst $syncMinFieldOfView = Symbol('syncMinFieldOfView');\nconst $syncMaxFieldOfView = Symbol('syncMaxFieldOfView');\nconst ControlsMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n    class ControlsModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.cameraControls = false;\n            this.cameraOrbit = DEFAULT_CAMERA_ORBIT;\n            this.cameraTarget = DEFAULT_CAMERA_TARGET;\n            this.fieldOfView = DEFAULT_FIELD_OF_VIEW;\n            this.minCameraOrbit = 'auto';\n            this.maxCameraOrbit = 'auto';\n            this.minFieldOfView = 'auto';\n            this.maxFieldOfView = 'auto';\n            this.interactionPromptThreshold = DEFAULT_INTERACTION_PROMPT_THRESHOLD;\n            this.interactionPrompt = InteractionPromptStrategy.AUTO;\n            this.interactionPromptStyle = InteractionPromptStyle.WIGGLE;\n            this.orbitSensitivity = 1;\n            this.touchAction = TouchAction.NONE;\n            this.disableZoom = false;\n            this.disablePan = false;\n            this.disableTap = false;\n            this.interpolationDecay = _three_components_Damper_js__WEBPACK_IMPORTED_MODULE_6__.DECAY_MILLISECONDS;\n            this[_a] = this.shadowRoot.querySelector('.interaction-prompt');\n            this[_b] = this.shadowRoot.querySelector('#prompt');\n            this[_c] = [\n                this.shadowRoot.querySelector('#finger0'),\n                this.shadowRoot.querySelector('#finger1')\n            ];\n            this[_d] = this.shadowRoot.querySelector('.pan-target');\n            this[_e] = 0;\n            this[_f] = Infinity;\n            this[_g] = false;\n            this[_h] = false;\n            this[_j] = new _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.SmoothControls(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].camera, this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement], this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene]);\n            this[_k] = new three__WEBPACK_IMPORTED_MODULE_9__.Spherical();\n            this[_l] = false;\n            this[_m] = false;\n            this[_o] = false;\n            this[_p] = ({ source }) => {\n                this[$updateAria]();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$needsRender]();\n                if (source === _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.USER_INTERACTION) {\n                    this[$userHasInteracted] = true;\n                    this[$deferInteractionPrompt]();\n                }\n                this.dispatchEvent(new CustomEvent('camera-change', { detail: { source } }));\n            };\n            this[_q] = (event) => {\n                if (event.type === 'pointer-change-start') {\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$container].classList.add('pointer-tumbling');\n                }\n                else {\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$container].classList.remove('pointer-tumbling');\n                }\n            };\n        }\n        get inputSensitivity() {\n            return this[$controls].inputSensitivity;\n        }\n        set inputSensitivity(value) {\n            this[$controls].inputSensitivity = value;\n        }\n        getCameraOrbit() {\n            const { theta, phi, radius } = this[$lastSpherical];\n            return {\n                theta,\n                phi,\n                radius,\n                toString() {\n                    return `${this.theta}rad ${this.phi}rad ${this.radius}m`;\n                }\n            };\n        }\n        getCameraTarget() {\n            return (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.toVector3D)(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].isPresenting ? this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.target :\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].getTarget());\n        }\n        getFieldOfView() {\n            return this[$controls].getFieldOfView();\n        }\n        // Provided so user code does not have to parse these from attributes.\n        getMinimumFieldOfView() {\n            return this[$controls].options.minimumFieldOfView;\n        }\n        getMaximumFieldOfView() {\n            return this[$controls].options.maximumFieldOfView;\n        }\n        getIdealAspect() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].idealAspect;\n        }\n        jumpCameraToGoal() {\n            this[$jumpCamera] = true;\n            this.requestUpdate($jumpCamera, false);\n        }\n        resetInteractionPrompt() {\n            this[$lastPromptOffset] = 0;\n            this[$promptElementVisibleTime] = Infinity;\n            this[$userHasInteracted] = false;\n            this[$waitingToPromptUser] =\n                this.interactionPrompt === InteractionPromptStrategy.AUTO &&\n                    this.cameraControls;\n        }\n        zoom(keyPresses) {\n            const event = new WheelEvent('wheel', { deltaY: -30 * keyPresses });\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement].dispatchEvent(event);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this[$controls].addEventListener('change', this[$onChange]);\n            this[$controls].addEventListener('pointer-change-start', this[$onPointerChange]);\n            this[$controls].addEventListener('pointer-change-end', this[$onPointerChange]);\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this[$controls].removeEventListener('change', this[$onChange]);\n            this[$controls].removeEventListener('pointer-change-start', this[$onPointerChange]);\n            this[$controls].removeEventListener('pointer-change-end', this[$onPointerChange]);\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            const controls = this[$controls];\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            if (changedProperties.has('cameraControls')) {\n                if (this.cameraControls) {\n                    controls.enableInteraction();\n                    if (this.interactionPrompt === InteractionPromptStrategy.AUTO) {\n                        this[$waitingToPromptUser] = true;\n                    }\n                }\n                else {\n                    controls.disableInteraction();\n                    this[$deferInteractionPrompt]();\n                }\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement].setAttribute('aria-label', this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$ariaLabel]);\n            }\n            if (changedProperties.has('disableZoom')) {\n                controls.disableZoom = this.disableZoom;\n            }\n            if (changedProperties.has('disablePan')) {\n                controls.enablePan = !this.disablePan;\n            }\n            if (changedProperties.has('disableTap')) {\n                controls.enableTap = !this.disableTap;\n            }\n            if (changedProperties.has('interactionPrompt') ||\n                changedProperties.has('cameraControls') ||\n                changedProperties.has('src')) {\n                if (this.interactionPrompt === InteractionPromptStrategy.AUTO &&\n                    this.cameraControls && !this[$userHasInteracted]) {\n                    this[$waitingToPromptUser] = true;\n                }\n                else {\n                    this[$deferInteractionPrompt]();\n                }\n            }\n            if (changedProperties.has('interactionPromptStyle')) {\n                this[$promptAnimatedContainer].style.opacity =\n                    this.interactionPromptStyle == InteractionPromptStyle.BASIC ? '1' :\n                        '0';\n            }\n            if (changedProperties.has('touchAction')) {\n                const touchAction = this.touchAction;\n                controls.applyOptions({ touchAction });\n                controls.updateTouchActionStyle();\n            }\n            if (changedProperties.has('orbitSensitivity')) {\n                controls.orbitSensitivity = this.orbitSensitivity;\n            }\n            if (changedProperties.has('interpolationDecay')) {\n                controls.setDamperDecayTime(this.interpolationDecay);\n                scene.setTargetDamperDecayTime(this.interpolationDecay);\n            }\n            if (this[$jumpCamera] === true) {\n                Promise.resolve().then(() => {\n                    controls.jumpToGoal();\n                    scene.jumpToGoal();\n                    this[$jumpCamera] = false;\n                });\n            }\n        }\n        async updateFraming() {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const oldFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n            await scene.updateFraming();\n            const newFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n            const zoom = this[$controls].getFieldOfView() / oldFramedFoV;\n            this[$controls].setFieldOfView(newFramedFoV * zoom);\n            this[$maintainThetaPhi] = true;\n            this.requestUpdate('maxFieldOfView');\n            this.requestUpdate('fieldOfView');\n            this.requestUpdate('minCameraOrbit');\n            this.requestUpdate('maxCameraOrbit');\n            this.requestUpdate('cameraOrbit');\n            await this.updateComplete;\n        }\n        interact(duration, finger0, finger1) {\n            const inputElement = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$userInputElement];\n            const fingerElements = this[$fingerAnimatedContainers];\n            if (fingerElements[0].style.opacity === '1') {\n                console.warn('interact() failed because an existing interaction is running.');\n                return;\n            }\n            const xy = new Array();\n            xy.push({ x: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger0.x), y: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger0.y) });\n            const positions = [{ x: xy[0].x(0), y: xy[0].y(0) }];\n            if (finger1 != null) {\n                xy.push({ x: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger1.x), y: (0,_utilities_animation_js__WEBPACK_IMPORTED_MODULE_8__.timeline)(finger1.y) });\n                positions.push({ x: xy[1].x(0), y: xy[1].y(0) });\n            }\n            let startTime = performance.now();\n            const { width, height } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const dispatchTouches = (type) => {\n                for (const [i, position] of positions.entries()) {\n                    const { style } = fingerElements[i];\n                    style.transform = `translateX(${width * position.x}px) translateY(${height * position.y}px)`;\n                    if (type === 'pointerdown') {\n                        style.opacity = '1';\n                    }\n                    else if (type === 'pointerup') {\n                        style.opacity = '0';\n                    }\n                    const init = {\n                        pointerId: i - 5678,\n                        pointerType: 'touch',\n                        target: inputElement,\n                        clientX: width * position.x,\n                        clientY: height * position.y,\n                        altKey: true // flag that this is not a user interaction\n                    };\n                    inputElement.dispatchEvent(new PointerEvent(type, init));\n                }\n            };\n            const moveTouches = () => {\n                // Cancel interaction if something else moves the camera or input is\n                // removed from the DOM.\n                const { changeSource } = this[$controls];\n                if (changeSource !== _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.AUTOMATIC ||\n                    !inputElement.isConnected) {\n                    for (const fingerElement of this[$fingerAnimatedContainers]) {\n                        fingerElement.style.opacity = '0';\n                    }\n                    dispatchTouches('pointercancel');\n                    this.dispatchEvent(new CustomEvent('interact-stopped', { detail: { source: changeSource } }));\n                    document.removeEventListener('visibilitychange', onVisibilityChange);\n                    return;\n                }\n                const time = Math.min(1, (performance.now() - startTime) / duration);\n                for (const [i, position] of positions.entries()) {\n                    position.x = xy[i].x(time);\n                    position.y = xy[i].y(time);\n                }\n                dispatchTouches('pointermove');\n                if (time < 1) {\n                    requestAnimationFrame(moveTouches);\n                }\n                else {\n                    dispatchTouches('pointerup');\n                    this.dispatchEvent(new CustomEvent('interact-stopped', { detail: { source: changeSource } }));\n                    document.removeEventListener('visibilitychange', onVisibilityChange);\n                }\n            };\n            const onVisibilityChange = () => {\n                let elapsed = 0;\n                if (document.visibilityState === 'hidden') {\n                    elapsed = performance.now() - startTime;\n                }\n                else {\n                    startTime = performance.now() - elapsed;\n                }\n            };\n            document.addEventListener('visibilitychange', onVisibilityChange);\n            dispatchTouches('pointerdown');\n            requestAnimationFrame(moveTouches);\n        }\n        [(_a = $promptElement, _b = $promptAnimatedContainer, _c = $fingerAnimatedContainers, _d = $panElement, _e = $lastPromptOffset, _f = $promptElementVisibleTime, _g = $userHasInteracted, _h = $waitingToPromptUser, _j = $controls, _k = $lastSpherical, _l = $jumpCamera, _m = $initialized, _o = $maintainThetaPhi, $syncFieldOfView)](style) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            scene.framedFoVDeg = style[0] * 180 / Math.PI;\n            this[$controls].setFieldOfView(scene.adjustedFoV(scene.framedFoVDeg));\n        }\n        [$syncCameraOrbit](style) {\n            const controls = this[$controls];\n            if (this[$maintainThetaPhi]) {\n                const { theta, phi } = this.getCameraOrbit();\n                style[0] = theta;\n                style[1] = phi;\n                this[$maintainThetaPhi] = false;\n            }\n            controls.changeSource = _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.NONE;\n            controls.setOrbit(style[0], style[1], style[2]);\n        }\n        [$syncMinCameraOrbit](style) {\n            this[$controls].applyOptions({\n                minimumAzimuthalAngle: style[0],\n                minimumPolarAngle: style[1],\n                minimumRadius: style[2]\n            });\n            this.jumpCameraToGoal();\n        }\n        [$syncMaxCameraOrbit](style) {\n            this[$controls].applyOptions({\n                maximumAzimuthalAngle: style[0],\n                maximumPolarAngle: style[1],\n                maximumRadius: style[2]\n            });\n            this[$updateCameraForRadius](style[2]);\n            this.jumpCameraToGoal();\n        }\n        [$syncMinFieldOfView](style) {\n            this[$controls].applyOptions({ minimumFieldOfView: style[0] * 180 / Math.PI });\n            this.jumpCameraToGoal();\n        }\n        [$syncMaxFieldOfView](style) {\n            const fov = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].adjustedFoV(style[0] * 180 / Math.PI);\n            this[$controls].applyOptions({ maximumFieldOfView: fov });\n            this.jumpCameraToGoal();\n        }\n        [$syncCameraTarget](style) {\n            const [x, y, z] = style;\n            if (!this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.isPresenting) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].setTarget(x, y, z);\n            }\n            this[$controls].changeSource = _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.NONE;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].arRenderer.updateTarget();\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta);\n            if (this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].isPresenting || !this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$getModelIsVisible]()) {\n                return;\n            }\n            const controls = this[$controls];\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const now = performance.now();\n            if (this[$waitingToPromptUser]) {\n                if (this.loaded &&\n                    now > this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$loadedTime] + this.interactionPromptThreshold) {\n                    this[$waitingToPromptUser] = false;\n                    this[$promptElementVisibleTime] = now;\n                    this[$promptElement].classList.add('visible');\n                }\n            }\n            if (isFinite(this[$promptElementVisibleTime]) &&\n                this.interactionPromptStyle === InteractionPromptStyle.WIGGLE) {\n                const animationTime = ((now - this[$promptElementVisibleTime]) / PROMPT_ANIMATION_TIME) %\n                    1;\n                const offset = wiggle(animationTime);\n                const opacity = fade(animationTime);\n                this[$promptAnimatedContainer].style.opacity = `${opacity}`;\n                if (offset !== this[$lastPromptOffset]) {\n                    const xOffset = offset * scene.width * 0.05;\n                    const deltaTheta = (offset - this[$lastPromptOffset]) * Math.PI / 16;\n                    this[$promptAnimatedContainer].style.transform =\n                        `translateX(${xOffset}px)`;\n                    controls.changeSource = _three_components_SmoothControls_js__WEBPACK_IMPORTED_MODULE_7__.ChangeSource.AUTOMATIC;\n                    controls.adjustOrbit(deltaTheta, 0, 0);\n                    this[$lastPromptOffset] = offset;\n                }\n            }\n            controls.update(time, delta);\n            if (scene.updateTarget(delta)) {\n                this[$onChange]({ type: 'change', source: controls.changeSource });\n            }\n        }\n        [$deferInteractionPrompt]() {\n            // Effectively cancel the timer waiting for user interaction:\n            this[$waitingToPromptUser] = false;\n            this[$promptElement].classList.remove('visible');\n            this[$promptElementVisibleTime] = Infinity;\n        }\n        /**\n         * Updates the camera's near and far planes to enclose the scene when\n         * orbiting at the supplied radius.\n         */\n        [$updateCameraForRadius](radius) {\n            const maximumRadius = Math.max(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].boundingSphere.radius, radius);\n            const near = 0;\n            const far = 2 * maximumRadius;\n            this[$controls].updateNearFar(near, far);\n        }\n        [$updateAria]() {\n            const { theta, phi } = this[$controls].getCameraSpherical(this[$lastSpherical]);\n            const azimuthalQuadrant = (4 + Math.floor(((theta % TAU) + QUARTER_PI) / HALF_PI)) % 4;\n            const polarTrient = Math.floor(phi / THIRD_PI);\n            const azimuthalQuadrantLabel = AZIMUTHAL_QUADRANT_LABELS[azimuthalQuadrant];\n            const polarTrientLabel = POLAR_TRIENT_LABELS[polarTrient];\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$updateStatus](`View from stage ${polarTrientLabel}${azimuthalQuadrantLabel}`);\n        }\n        get [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$ariaLabel]() {\n            return super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$ariaLabel] +\n                (this.cameraControls ? INTERACTION_PROMPT : '');\n        }\n        async [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onResize](event) {\n            const controls = this[$controls];\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene];\n            const oldFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n            // The super of $onResize may update the scene's adjustedFoV, so we\n            // compare the before and after to calculate the proper zoom.\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onResize](event);\n            const fovRatio = scene.adjustedFoV(scene.framedFoVDeg) / oldFramedFoV;\n            const fov = controls.getFieldOfView() * (isFinite(fovRatio) ? fovRatio : 1);\n            controls.updateAspect(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].aspect);\n            this.requestUpdate('maxFieldOfView', this.maxFieldOfView);\n            await this.updateComplete;\n            this[$controls].setFieldOfView(fov);\n            this.jumpCameraToGoal();\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onModelLoad]() {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$onModelLoad]();\n            if (this[$initialized]) {\n                this[$maintainThetaPhi] = true;\n            }\n            else {\n                this[$initialized] = true;\n            }\n            this.requestUpdate('maxFieldOfView', this.maxFieldOfView);\n            this.requestUpdate('fieldOfView', this.fieldOfView);\n            this.requestUpdate('minCameraOrbit', this.minCameraOrbit);\n            this.requestUpdate('maxCameraOrbit', this.maxCameraOrbit);\n            this.requestUpdate('cameraOrbit', this.cameraOrbit);\n            this.requestUpdate('cameraTarget', this.cameraTarget);\n            this.jumpCameraToGoal();\n        }\n    }\n    _p = $onChange, _q = $onPointerChange;\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'camera-controls' })\n    ], ControlsModelViewerElement.prototype, \"cameraControls\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: cameraOrbitIntrinsics,\n            observeEffects: true,\n            updateHandler: $syncCameraOrbit\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'camera-orbit', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"cameraOrbit\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: cameraTargetIntrinsics,\n            observeEffects: true,\n            updateHandler: $syncCameraTarget\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'camera-target', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"cameraTarget\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: fieldOfViewIntrinsics,\n            observeEffects: true,\n            updateHandler: $syncFieldOfView\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'field-of-view', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"fieldOfView\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: minCameraOrbitIntrinsics,\n            updateHandler: $syncMinCameraOrbit\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'min-camera-orbit', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"minCameraOrbit\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: maxCameraOrbitIntrinsics,\n            updateHandler: $syncMaxCameraOrbit\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'max-camera-orbit', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"maxCameraOrbit\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({\n            intrinsics: minFieldOfViewIntrinsics,\n            updateHandler: $syncMinFieldOfView\n        }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'min-field-of-view', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"minFieldOfView\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({ intrinsics: fieldOfViewIntrinsics, updateHandler: $syncMaxFieldOfView }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'max-field-of-view', hasChanged: () => true })\n    ], ControlsModelViewerElement.prototype, \"maxFieldOfView\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'interaction-prompt-threshold' })\n    ], ControlsModelViewerElement.prototype, \"interactionPromptThreshold\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'interaction-prompt' })\n    ], ControlsModelViewerElement.prototype, \"interactionPrompt\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'interaction-prompt-style' })\n    ], ControlsModelViewerElement.prototype, \"interactionPromptStyle\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'orbit-sensitivity' })\n    ], ControlsModelViewerElement.prototype, \"orbitSensitivity\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'touch-action' })\n    ], ControlsModelViewerElement.prototype, \"touchAction\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'disable-zoom' })\n    ], ControlsModelViewerElement.prototype, \"disableZoom\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'disable-pan' })\n    ], ControlsModelViewerElement.prototype, \"disablePan\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'disable-tap' })\n    ], ControlsModelViewerElement.prototype, \"disableTap\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'interpolation-decay' })\n    ], ControlsModelViewerElement.prototype, \"interpolationDecay\", void 0);\n    return ControlsModelViewerElement;\n};\n//# sourceMappingURL=controls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/environment.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $currentBackground: () => (/* binding */ $currentBackground),\n/* harmony export */   $currentEnvironmentMap: () => (/* binding */ $currentEnvironmentMap),\n/* harmony export */   $updateEnvironment: () => (/* binding */ $updateEnvironment),\n/* harmony export */   BASE_OPACITY: () => (/* binding */ BASE_OPACITY),\n/* harmony export */   EnvironmentMixin: () => (/* binding */ EnvironmentMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\nconst BASE_OPACITY = 0.5;\nconst DEFAULT_SHADOW_INTENSITY = 0.0;\nconst DEFAULT_SHADOW_SOFTNESS = 1.0;\nconst DEFAULT_EXPOSURE = 1.0;\nconst $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nconst $currentBackground = Symbol('currentBackground');\nconst $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\nconst EnvironmentMixin = (ModelViewerElement) => {\n    var _a, _b, _c;\n    class EnvironmentModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.environmentImage = null;\n            this.skyboxImage = null;\n            this.shadowIntensity = DEFAULT_SHADOW_INTENSITY;\n            this.shadowSoftness = DEFAULT_SHADOW_SOFTNESS;\n            this.exposure = DEFAULT_EXPOSURE;\n            this[_a] = null;\n            this[_b] = null;\n            this[_c] = null;\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('shadowIntensity')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setShadowIntensity(this.shadowIntensity * BASE_OPACITY);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n            if (changedProperties.has('shadowSoftness')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setShadowSoftness(this.shadowSoftness);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n            if (changedProperties.has('exposure')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].exposure = this.exposure;\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n            if ((changedProperties.has('environmentImage') ||\n                changedProperties.has('skyboxImage')) &&\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$shouldAttemptPreload]()) {\n                this[$updateEnvironment]();\n            }\n        }\n        hasBakedShadow() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].bakedShadows.size > 0;\n        }\n        async [(_a = $currentEnvironmentMap, _b = $currentBackground, _c = $cancelEnvironmentUpdate, $updateEnvironment)]() {\n            const { skyboxImage, environmentImage } = this;\n            if (this[$cancelEnvironmentUpdate] != null) {\n                this[$cancelEnvironmentUpdate]();\n                this[$cancelEnvironmentUpdate] = null;\n            }\n            const { textureUtils } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer];\n            if (textureUtils == null) {\n                return;\n            }\n            const updateEnvProgress = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].beginActivity();\n            try {\n                const { environmentMap, skybox } = await textureUtils.generateEnvironmentMapAndSkybox((0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.deserializeUrl)(skyboxImage), environmentImage, (progress) => updateEnvProgress((0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(progress, 0, 1)));\n                if (this[$currentEnvironmentMap] !== environmentMap) {\n                    this[$currentEnvironmentMap] = environmentMap;\n                    this.dispatchEvent(new CustomEvent('environment-change'));\n                }\n                if (skybox != null) {\n                    // When using the same environment and skybox, use the environment as\n                    // it gives HDR filtering.\n                    this[$currentBackground] =\n                        skybox.name === environmentMap.name ? environmentMap : skybox;\n                }\n                else {\n                    this[$currentBackground] = null;\n                }\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setEnvironmentAndSkybox(this[$currentEnvironmentMap], this[$currentBackground]);\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].dispatchEvent({ type: 'envmap-update' });\n            }\n            catch (errorOrPromise) {\n                if (errorOrPromise instanceof Error) {\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].setEnvironmentAndSkybox(null, null);\n                    throw errorOrPromise;\n                }\n            }\n            finally {\n                updateEnvProgress(1.0);\n            }\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'environment-image' })\n    ], EnvironmentModelViewerElement.prototype, \"environmentImage\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'skybox-image' })\n    ], EnvironmentModelViewerElement.prototype, \"skyboxImage\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'shadow-intensity' })\n    ], EnvironmentModelViewerElement.prototype, \"shadowIntensity\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'shadow-softness' })\n    ], EnvironmentModelViewerElement.prototype, \"shadowSoftness\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({\n            type: Number,\n        })\n    ], EnvironmentModelViewerElement.prototype, \"exposure\", void 0);\n    return EnvironmentModelViewerElement;\n};\n//# sourceMappingURL=environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/loading.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/loading.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $defaultPosterElement: () => (/* binding */ $defaultPosterElement),\n/* harmony export */   $defaultProgressBarElement: () => (/* binding */ $defaultProgressBarElement),\n/* harmony export */   $posterContainerElement: () => (/* binding */ $posterContainerElement),\n/* harmony export */   LoadingMixin: () => (/* binding */ LoadingMixin),\n/* harmony export */   POSTER_TRANSITION_TIME: () => (/* binding */ POSTER_TRANSITION_TIME),\n/* harmony export */   PROGRESS_BAR_UPDATE_THRESHOLD: () => (/* binding */ PROGRESS_BAR_UPDATE_THRESHOLD)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../three-components/CachingGLTFLoader.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\");\n/* harmony import */ var _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../three-components/Renderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\nconst POSTER_TRANSITION_TIME = 300;\nconst PROGRESS_BAR_UPDATE_THRESHOLD = 100;\nconst DEFAULT_DRACO_DECODER_LOCATION = 'https://www.gstatic.com/draco/versioned/decoders/1.4.1/';\nconst DEFAULT_KTX2_TRANSCODER_LOCATION = 'https://www.gstatic.com/basis-universal/versioned/2021-04-15-ba1c3e4/';\nconst RevealStrategy = {\n    AUTO: 'auto',\n    MANUAL: 'manual'\n};\nconst LoadingStrategy = {\n    AUTO: 'auto',\n    LAZY: 'lazy',\n    EAGER: 'eager'\n};\nconst $defaultProgressBarElement = Symbol('defaultProgressBarElement');\nconst $posterContainerElement = Symbol('posterContainerElement');\nconst $defaultPosterElement = Symbol('defaultPosterElement');\nconst $shouldDismissPoster = Symbol('shouldDismissPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $updateProgressBar = Symbol('updateProgressBar');\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\nconst $onProgress = Symbol('onProgress');\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * self.ModelViewerElement = self.ModelViewerElement || {};\n * self.ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\nconst LoadingMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    class LoadingModelViewerElement extends ModelViewerElement {\n        constructor(...args) {\n            super(...args);\n            /**\n             * A URL pointing to the image to use as a poster in scenarios where the\n             * <model-viewer> is not ready to reveal a rendered model to the viewer.\n             */\n            this.poster = null;\n            /**\n             * An enumerable attribute describing under what conditions the\n             * <model-viewer> should reveal a model to the viewer.\n             *\n             * The default value is \"auto\". The only supported alternative values is\n             * \"manual\".\n             */\n            this.reveal = RevealStrategy.AUTO;\n            /**\n             * An enumerable attribute describing under what conditions the\n             * <model-viewer> should preload a model.\n             *\n             * The default value is \"auto\". The only supported alternative values are\n             * \"lazy\" and \"eager\". Auto is equivalent to lazy, which loads the model\n             * when it is near the viewport for reveal = \"auto\", and when interacted\n             * with for reveal = \"interaction\". Eager loads the model immediately.\n             */\n            this.loading = LoadingStrategy.AUTO;\n            this[_a] = false;\n            this[_b] = false;\n            // TODO: Add this to the shadow root as part of this mixin's\n            // implementation:\n            this[_c] = this.shadowRoot.querySelector('.slot.poster');\n            this[_d] = this.shadowRoot.querySelector('#default-poster');\n            this[_e] = this.shadowRoot.querySelector('#default-progress-bar > .bar');\n            this[_f] = this[$defaultPosterElement].getAttribute('aria-label');\n            this[_g] = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.throttle)((progress) => {\n                const parentNode = this[$defaultProgressBarElement].parentNode;\n                requestAnimationFrame(() => {\n                    this[$defaultProgressBarElement].style.transform =\n                        `scaleX(${progress})`;\n                    if (progress === 0) {\n                        // NOTE(cdata): We remove and re-append the progress bar in this\n                        // condition so that the progress bar does not appear to\n                        // transition backwards from the right when we reset to 0 (or\n                        // otherwise <1) progress after having already reached 1 progress\n                        // previously.\n                        parentNode.removeChild(this[$defaultProgressBarElement]);\n                        parentNode.appendChild(this[$defaultProgressBarElement]);\n                    }\n                    // NOTE(cdata): IE11 does not properly respect the second parameter\n                    // of classList.toggle, which this implementation originally used.\n                    // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11865865/\n                    if (progress === 1.0) {\n                        this[$defaultProgressBarElement].classList.add('hide');\n                    }\n                    else {\n                        this[$defaultProgressBarElement].classList.remove('hide');\n                    }\n                });\n            }, PROGRESS_BAR_UPDATE_THRESHOLD);\n            this[_h] = (event) => {\n                const progress = event.detail.totalProgress;\n                if (progress === 1.0) {\n                    this[$updateProgressBar].flush();\n                    if (this.loaded &&\n                        (this[$shouldDismissPoster] ||\n                            this.reveal === RevealStrategy.AUTO)) {\n                        this[$hidePoster]();\n                    }\n                }\n                this[$updateProgressBar](progress);\n                this.dispatchEvent(new CustomEvent('progress', { detail: { totalProgress: progress } }));\n            };\n            const ModelViewerElement = self.ModelViewerElement || {};\n            const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation ||\n                DEFAULT_DRACO_DECODER_LOCATION;\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n            const ktx2TranscoderLocation = ModelViewerElement.ktx2TranscoderLocation ||\n                DEFAULT_KTX2_TRANSCODER_LOCATION;\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setKTX2TranscoderLocation(ktx2TranscoderLocation);\n            if (ModelViewerElement.meshoptDecoderLocation) {\n                _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setMeshoptDecoderLocation(ModelViewerElement.meshoptDecoderLocation);\n            }\n        }\n        static set dracoDecoderLocation(value) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setDRACODecoderLocation(value);\n        }\n        static get dracoDecoderLocation() {\n            return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.getDRACODecoderLocation();\n        }\n        static set ktx2TranscoderLocation(value) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setKTX2TranscoderLocation(value);\n        }\n        static get ktx2TranscoderLocation() {\n            return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.getKTX2TranscoderLocation();\n        }\n        static set meshoptDecoderLocation(value) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.setMeshoptDecoderLocation(value);\n        }\n        static get meshoptDecoderLocation() {\n            return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.CachingGLTFLoader.getMeshoptDecoderLocation();\n        }\n        /**\n         * If provided, the callback will be passed each resource URL before a\n         * request is sent. The callback may return the original URL, or a new URL\n         * to override loading behavior. This behavior can be used to load assets\n         * from .ZIP files, drag-and-drop APIs, and Data URIs.\n         */\n        static mapURLs(callback) {\n            _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_3__.Renderer.singleton.loader[_three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.$loader].manager.setURLModifier(callback);\n        }\n        /**\n         * Dismisses the poster, causing the model to load and render if\n         * necessary. This is currently effectively the same as interacting with\n         * the poster via user input.\n         */\n        dismissPoster() {\n            if (this.loaded) {\n                this[$hidePoster]();\n            }\n            else {\n                this[$shouldDismissPoster] = true;\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$updateSource]();\n            }\n        }\n        /**\n         * Displays the poster, hiding the 3D model. If this is called after the 3D\n         * model has been revealed, then it must be dismissed by a call to\n         * dismissPoster().\n         */\n        showPoster() {\n            const posterContainerElement = this[$posterContainerElement];\n            if (posterContainerElement.classList.contains('show')) {\n                return;\n            }\n            posterContainerElement.classList.add('show');\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$userInputElement].classList.remove('show');\n            const defaultPosterElement = this[$defaultPosterElement];\n            defaultPosterElement.removeAttribute('tabindex');\n            defaultPosterElement.removeAttribute('aria-hidden');\n            const oldVisibility = this.modelIsVisible;\n            this[$modelIsRevealed] = false;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$announceModelVisibility](oldVisibility);\n        }\n        /**\n         * Returns the model's bounding box dimensions in meters, independent of\n         * turntable rotation.\n         */\n        getDimensions() {\n            return (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.toVector3D)(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].size);\n        }\n        getBoundingBoxCenter() {\n            return (0,_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.toVector3D)(this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene].boundingBox.getCenter(new three__WEBPACK_IMPORTED_MODULE_5__.Vector3()));\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.showPoster();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].addEventListener('progress', this[$onProgress]);\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].removeEventListener('progress', this[$onProgress]);\n        }\n        async updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('poster') && this.poster != null) {\n                this[$defaultPosterElement].style.backgroundImage =\n                    `url(${this.poster})`;\n            }\n            if (changedProperties.has('alt')) {\n                this[$defaultPosterElement].setAttribute('aria-label', this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$altDefaulted]);\n            }\n            if (changedProperties.has('reveal') || changedProperties.has('loading')) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$updateSource]();\n            }\n        }\n        [(_a = $modelIsRevealed, _b = $shouldDismissPoster, _c = $posterContainerElement, _d = $defaultPosterElement, _e = $defaultProgressBarElement, _f = $ariaLabelCallToAction, _g = $updateProgressBar, _h = $onProgress, _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$shouldAttemptPreload)]() {\n            return !!this.src &&\n                (this[$shouldDismissPoster] ||\n                    this.loading === LoadingStrategy.EAGER ||\n                    (this.reveal === RevealStrategy.AUTO && this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$isElementInViewport]));\n        }\n        [$hidePoster]() {\n            this[$shouldDismissPoster] = false;\n            const posterContainerElement = this[$posterContainerElement];\n            if (!posterContainerElement.classList.contains('show')) {\n                return;\n            }\n            posterContainerElement.classList.remove('show');\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$userInputElement].classList.add('show');\n            const oldVisibility = this.modelIsVisible;\n            this[$modelIsRevealed] = true;\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$announceModelVisibility](oldVisibility);\n            const root = this.getRootNode();\n            // If the <model-viewer> is still focused, forward the focus to\n            // the canvas that has just been revealed\n            if (root && root.activeElement === this) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$userInputElement].focus();\n            }\n            // Ensure that the poster is no longer focusable or visible to\n            // screen readers\n            const defaultPosterElement = this[$defaultPosterElement];\n            defaultPosterElement.setAttribute('aria-hidden', 'true');\n            defaultPosterElement.tabIndex = -1;\n            this.dispatchEvent(new CustomEvent('poster-dismissed'));\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$getModelIsVisible]() {\n            return super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$getModelIsVisible]() && this[$modelIsRevealed];\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String })\n    ], LoadingModelViewerElement.prototype, \"poster\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String })\n    ], LoadingModelViewerElement.prototype, \"reveal\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String })\n    ], LoadingModelViewerElement.prototype, \"loading\", void 0);\n    return LoadingModelViewerElement;\n};\n//# sourceMappingURL=loading.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/loading.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $currentGLTF: () => (/* binding */ $currentGLTF),\n/* harmony export */   $model: () => (/* binding */ $model),\n/* harmony export */   $originalGltfJson: () => (/* binding */ $originalGltfJson),\n/* harmony export */   SceneGraphMixin: () => (/* binding */ SceneGraphMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_exporters_GLTFExporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/exporters/GLTFExporter.js */ \"(ssr)/./node_modules/three/examples/jsm/exporters/GLTFExporter.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_gltf_instance_VariantMaterialExporterPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../three-components/gltf-instance/VariantMaterialExporterPlugin */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js\");\n/* harmony import */ var _scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scene-graph/model.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/model.js\");\n/* harmony import */ var _scene_graph_texture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scene-graph/texture */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\nconst $currentGLTF = Symbol('currentGLTF');\nconst $originalGltfJson = Symbol('originalGltfJson');\nconst $model = Symbol('model');\nconst $getOnUpdateMethod = Symbol('getOnUpdateMethod');\nconst $textureLoader = Symbol('textureLoader');\n/**\n * SceneGraphMixin manages exposes a model API in order to support operations on\n * the <model-viewer> scene graph.\n */\nconst SceneGraphMixin = (ModelViewerElement) => {\n    var _a, _b, _c, _d;\n    class SceneGraphModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this[_a] = undefined;\n            this[_b] = null;\n            this[_c] = new three__WEBPACK_IMPORTED_MODULE_5__.TextureLoader();\n            this[_d] = null;\n            this.variantName = null;\n            this.orientation = '0 0 0';\n            this.scale = '1 1 1';\n        }\n        // Scene-graph API:\n        /** @export */\n        get model() {\n            return this[$model];\n        }\n        get availableVariants() {\n            return this.model ? this.model[_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$availableVariants]() : [];\n        }\n        /**\n         * Returns a deep copy of the gltf JSON as loaded. It will not reflect\n         * changes to the scene-graph, nor will editing it have any effect.\n         */\n        get originalGltfJson() {\n            return this[$originalGltfJson];\n        }\n        [(_a = $model, _b = $currentGLTF, _c = $textureLoader, _d = $originalGltfJson, $getOnUpdateMethod)]() {\n            return () => {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            };\n        }\n        async createTexture(uri, type = 'image/png') {\n            const currentGLTF = this[$currentGLTF];\n            const texture = await new Promise((resolve) => this[$textureLoader].load(uri, resolve));\n            if (!currentGLTF || !texture) {\n                return null;\n            }\n            // Applies default settings.\n            texture.encoding = three__WEBPACK_IMPORTED_MODULE_5__.sRGBEncoding;\n            texture.wrapS = three__WEBPACK_IMPORTED_MODULE_5__.RepeatWrapping;\n            texture.wrapT = three__WEBPACK_IMPORTED_MODULE_5__.RepeatWrapping;\n            texture.flipY = false;\n            texture.userData.mimeType = type;\n            return new _scene_graph_texture__WEBPACK_IMPORTED_MODULE_4__.Texture(this[$getOnUpdateMethod](), texture);\n        }\n        async updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('variantName')) {\n                const updateVariantProgress = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$progressTracker].beginActivity();\n                updateVariantProgress(0.1);\n                const model = this[$model];\n                const { variantName } = this;\n                if (model != null) {\n                    await model[_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$switchVariant](variantName);\n                    this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n                    this.dispatchEvent(new CustomEvent('variant-applied'));\n                }\n                updateVariantProgress(1.0);\n            }\n            if (changedProperties.has('orientation') ||\n                changedProperties.has('scale')) {\n                if (!this.loaded) {\n                    return;\n                }\n                const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n                scene.applyTransform();\n                scene.updateBoundingBox();\n                scene.updateShadow();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].arRenderer.onUpdateScene();\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$needsRender]();\n            }\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad]() {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onModelLoad]();\n            const { currentGLTF } = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n            if (currentGLTF != null) {\n                const { correlatedSceneGraph } = currentGLTF;\n                if (correlatedSceneGraph != null &&\n                    currentGLTF !== this[$currentGLTF]) {\n                    this[$model] =\n                        new _scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.Model(correlatedSceneGraph, this[$getOnUpdateMethod]());\n                    this[$originalGltfJson] =\n                        JSON.parse(JSON.stringify(correlatedSceneGraph.gltf));\n                }\n                // KHR_materials_variants extension spec:\n                // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants\n                if ('variants' in currentGLTF.userData) {\n                    this.requestUpdate('variantName');\n                }\n            }\n            this[$currentGLTF] = currentGLTF;\n        }\n        /** @export */\n        async exportScene(options) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n            return new Promise(async (resolve, reject) => {\n                // Defaults\n                const opts = {\n                    binary: true,\n                    onlyVisible: true,\n                    maxTextureSize: Infinity,\n                    includeCustomExtensions: false,\n                    forceIndices: false\n                };\n                Object.assign(opts, options);\n                // Not configurable\n                opts.animations = scene.animations;\n                opts.truncateDrawRange = true;\n                const shadow = scene.shadow;\n                let visible = false;\n                // Remove shadow from export\n                if (shadow != null) {\n                    visible = shadow.visible;\n                    shadow.visible = false;\n                }\n                await this[$model][_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$prepareVariantsForExport]();\n                const exporter = new three_examples_jsm_exporters_GLTFExporter_js__WEBPACK_IMPORTED_MODULE_6__.GLTFExporter()\n                    .register((writer) => new _three_components_gltf_instance_VariantMaterialExporterPlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"](writer));\n                exporter.parse(scene.model, (gltf) => {\n                    return resolve(new Blob([opts.binary ? gltf : JSON.stringify(gltf)], {\n                        type: opts.binary ? 'application/octet-stream' :\n                            'application/json'\n                    }));\n                }, () => {\n                    return reject('glTF export failed');\n                }, opts);\n                if (shadow != null) {\n                    shadow.visible = visible;\n                }\n            });\n        }\n        materialFromPoint(pixelX, pixelY) {\n            const scene = this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$scene];\n            const ndcCoords = scene.getNDC(pixelX, pixelY);\n            scene.raycaster.setFromCamera(ndcCoords, scene.getCamera());\n            return this[$model][_scene_graph_model_js__WEBPACK_IMPORTED_MODULE_3__.$materialFromPoint](scene.raycaster);\n        }\n    }\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'variant-name' })\n    ], SceneGraphModelViewerElement.prototype, \"variantName\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'orientation' })\n    ], SceneGraphModelViewerElement.prototype, \"orientation\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'scale' })\n    ], SceneGraphModelViewerElement.prototype, \"scale\", void 0);\n    return SceneGraphModelViewerElement;\n};\n//# sourceMappingURL=scene-graph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/image.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $applyTexture: () => (/* binding */ $applyTexture),\n/* harmony export */   $threeTexture: () => (/* binding */ $threeTexture),\n/* harmony export */   Image: () => (/* binding */ Image)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../three-components/Renderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst quadMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial();\nconst quad = new three__WEBPACK_IMPORTED_MODULE_3__.PlaneGeometry(2, 2);\nlet adhocNum = 0;\nconst $threeTexture = Symbol('threeTexture');\nconst $applyTexture = Symbol('applyTexture');\n/**\n * Image facade implementation for Three.js textures\n */\nclass Image extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.ThreeDOMElement {\n    get [$threeTexture]() {\n        var _a;\n        console.assert(this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects] != null && this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects].size > 0, 'Image correlated object is undefined');\n        return (_a = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n    }\n    constructor(onUpdate, texture, gltfImage) {\n        gltfImage = gltfImage !== null && gltfImage !== void 0 ? gltfImage : {\n            name: (texture && texture.image && texture.image.src) ?\n                texture.image.src.split('/').pop() :\n                'adhoc_image',\n            uri: (texture && texture.image && texture.image.src) ?\n                texture.image.src :\n                'adhoc_image' + adhocNum++\n        };\n        super(onUpdate, gltfImage, new Set(texture ? [texture] : []));\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name || '';\n    }\n    get uri() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].uri;\n    }\n    get bufferView() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].bufferView;\n    }\n    get type() {\n        return this.uri != null ? 'external' : 'embedded';\n    }\n    set name(name) {\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name = name;\n    }\n    async createThumbnail(width, height) {\n        const scene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n        quadMaterial.map = this[$threeTexture];\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(quad, quadMaterial);\n        scene.add(mesh);\n        const camera = new three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const { threeRenderer } = _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_1__.Renderer.singleton;\n        const renderTarget = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(width, height);\n        threeRenderer.setRenderTarget(renderTarget);\n        threeRenderer.render(scene, camera);\n        threeRenderer.setRenderTarget(null);\n        const buffer = new Uint8Array(width * height * 4);\n        threeRenderer.readRenderTargetPixels(renderTarget, 0, 0, width, height, buffer);\n        _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.width = width;\n        _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.height = height;\n        const blobContext = _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.getContext('2d');\n        const imageData = blobContext.createImageData(width, height);\n        imageData.data.set(buffer);\n        blobContext.putImageData(imageData, 0, 0);\n        return new Promise(async (resolve, reject) => {\n            _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_0__.blobCanvas.toBlob(blob => {\n                if (!blob) {\n                    return reject('Failed to capture thumbnail.');\n                }\n                resolve(URL.createObjectURL(blob));\n            }, 'image/png');\n        });\n    }\n}\n//# sourceMappingURL=image.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL2ltYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQ3JEO0FBQ007QUFDOEI7QUFDNUYseUJBQXlCLG9EQUFpQjtBQUMxQyxpQkFBaUIsZ0RBQWE7QUFDOUI7QUFDTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ08sb0JBQW9CLGtFQUFlO0FBQzFDO0FBQ0E7QUFDQSw0QkFBNEIscUVBQWtCLGtCQUFrQixxRUFBa0I7QUFDbEYsMEJBQTBCLHFFQUFrQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnRUFBYTtBQUNqQztBQUNBO0FBQ0Esb0JBQW9CLGdFQUFhO0FBQ2pDO0FBQ0E7QUFDQSxvQkFBb0IsZ0VBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWE7QUFDMUI7QUFDQTtBQUNBLDBCQUEwQix3Q0FBSztBQUMvQjtBQUNBLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBLDJCQUEyQixxREFBa0I7QUFDN0MsZ0JBQWdCLGdCQUFnQixFQUFFLG1FQUFRO0FBQzFDLGlDQUFpQyxvREFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNkRBQVU7QUFDbEIsUUFBUSw2REFBVTtBQUNsQiw0QkFBNEIsNkRBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZEQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9mZWF0dXJlcy9zY2VuZS1ncmFwaC9pbWFnZS5qcz9hMmMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IE1lc2gsIE1lc2hCYXNpY01hdGVyaWFsLCBPcnRob2dyYXBoaWNDYW1lcmEsIFBsYW5lR2VvbWV0cnksIFNjZW5lLCBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGJsb2JDYW52YXMgfSBmcm9tICcuLi8uLi9tb2RlbC12aWV3ZXItYmFzZS5qcyc7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4uLy4uL3RocmVlLWNvbXBvbmVudHMvUmVuZGVyZXIuanMnO1xuaW1wb3J0IHsgJGNvcnJlbGF0ZWRPYmplY3RzLCAkc291cmNlT2JqZWN0LCBUaHJlZURPTUVsZW1lbnQgfSBmcm9tICcuL3RocmVlLWRvbS1lbGVtZW50LmpzJztcbmNvbnN0IHF1YWRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpO1xuY29uc3QgcXVhZCA9IG5ldyBQbGFuZUdlb21ldHJ5KDIsIDIpO1xubGV0IGFkaG9jTnVtID0gMDtcbmV4cG9ydCBjb25zdCAkdGhyZWVUZXh0dXJlID0gU3ltYm9sKCd0aHJlZVRleHR1cmUnKTtcbmV4cG9ydCBjb25zdCAkYXBwbHlUZXh0dXJlID0gU3ltYm9sKCdhcHBseVRleHR1cmUnKTtcbi8qKlxuICogSW1hZ2UgZmFjYWRlIGltcGxlbWVudGF0aW9uIGZvciBUaHJlZS5qcyB0ZXh0dXJlc1xuICovXG5leHBvcnQgY2xhc3MgSW1hZ2UgZXh0ZW5kcyBUaHJlZURPTUVsZW1lbnQge1xuICAgIGdldCBbJHRocmVlVGV4dHVyZV0oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc29sZS5hc3NlcnQodGhpc1skY29ycmVsYXRlZE9iamVjdHNdICE9IG51bGwgJiYgdGhpc1skY29ycmVsYXRlZE9iamVjdHNdLnNpemUgPiAwLCAnSW1hZ2UgY29ycmVsYXRlZCBvYmplY3QgaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzWyRjb3JyZWxhdGVkT2JqZWN0c10pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZXMoKS5uZXh0KCkudmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9uVXBkYXRlLCB0ZXh0dXJlLCBnbHRmSW1hZ2UpIHtcbiAgICAgICAgZ2x0ZkltYWdlID0gZ2x0ZkltYWdlICE9PSBudWxsICYmIGdsdGZJbWFnZSAhPT0gdm9pZCAwID8gZ2x0ZkltYWdlIDoge1xuICAgICAgICAgICAgbmFtZTogKHRleHR1cmUgJiYgdGV4dHVyZS5pbWFnZSAmJiB0ZXh0dXJlLmltYWdlLnNyYykgP1xuICAgICAgICAgICAgICAgIHRleHR1cmUuaW1hZ2Uuc3JjLnNwbGl0KCcvJykucG9wKCkgOlxuICAgICAgICAgICAgICAgICdhZGhvY19pbWFnZScsXG4gICAgICAgICAgICB1cmk6ICh0ZXh0dXJlICYmIHRleHR1cmUuaW1hZ2UgJiYgdGV4dHVyZS5pbWFnZS5zcmMpID9cbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmltYWdlLnNyYyA6XG4gICAgICAgICAgICAgICAgJ2FkaG9jX2ltYWdlJyArIGFkaG9jTnVtKytcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIob25VcGRhdGUsIGdsdGZJbWFnZSwgbmV3IFNldCh0ZXh0dXJlID8gW3RleHR1cmVdIDogW10pKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdLm5hbWUgfHwgJyc7XG4gICAgfVxuICAgIGdldCB1cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdLnVyaTtcbiAgICB9XG4gICAgZ2V0IGJ1ZmZlclZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdLmJ1ZmZlclZpZXc7XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cmkgIT0gbnVsbCA/ICdleHRlcm5hbCcgOiAnZW1iZWRkZWQnO1xuICAgIH1cbiAgICBzZXQgbmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXNbJHNvdXJjZU9iamVjdF0ubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZVRodW1ibmFpbCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gbmV3IFNjZW5lKCk7XG4gICAgICAgIHF1YWRNYXRlcmlhbC5tYXAgPSB0aGlzWyR0aHJlZVRleHR1cmVdO1xuICAgICAgICBjb25zdCBtZXNoID0gbmV3IE1lc2gocXVhZCwgcXVhZE1hdGVyaWFsKTtcbiAgICAgICAgc2NlbmUuYWRkKG1lc2gpO1xuICAgICAgICBjb25zdCBjYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKC0xLCAxLCAxLCAtMSwgMCwgMSk7XG4gICAgICAgIGNvbnN0IHsgdGhyZWVSZW5kZXJlciB9ID0gUmVuZGVyZXIuc2luZ2xldG9uO1xuICAgICAgICBjb25zdCByZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRocmVlUmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XG4gICAgICAgIHRocmVlUmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgICAgICB0aHJlZVJlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgICAgdGhyZWVSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzKHJlbmRlclRhcmdldCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgYnVmZmVyKTtcbiAgICAgICAgYmxvYkNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICBibG9iQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgY29uc3QgYmxvYkNvbnRleHQgPSBibG9iQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGJsb2JDb250ZXh0LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGEuc2V0KGJ1ZmZlcik7XG4gICAgICAgIGJsb2JDb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYmxvYkNhbnZhcy50b0Jsb2IoYmxvYiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFibG9iKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0ZhaWxlZCB0byBjYXB0dXJlIHRodW1ibmFpbC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcbiAgICAgICAgICAgIH0sICdpbWFnZS9wbmcnKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/material.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $ensureMaterialIsLoaded: () => (/* binding */ $ensureMaterialIsLoaded),\n/* harmony export */   $getLoadedMaterial: () => (/* binding */ $getLoadedMaterial),\n/* harmony export */   $gltfIndex: () => (/* binding */ $gltfIndex),\n/* harmony export */   $lazyLoadGLTFInfo: () => (/* binding */ $lazyLoadGLTFInfo),\n/* harmony export */   $setActive: () => (/* binding */ $setActive),\n/* harmony export */   $variantIndices: () => (/* binding */ $variantIndices),\n/* harmony export */   $variantSet: () => (/* binding */ $variantSet),\n/* harmony export */   Material: () => (/* binding */ Material)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _pbr_metallic_roughness_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pbr-metallic-roughness.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js\");\n/* harmony import */ var _texture_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./texture-info.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n\n\n\n\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\nconst $backingThreeMaterial = Symbol('backingThreeMaterial');\nconst $applyAlphaCutoff = Symbol('applyAlphaCutoff');\nconst $lazyLoadGLTFInfo = Symbol('lazyLoadGLTFInfo');\nconst $initialize = Symbol('initialize');\nconst $getLoadedMaterial = Symbol('getLoadedMaterial');\nconst $ensureMaterialIsLoaded = Symbol('ensureMaterialIsLoaded');\nconst $gltfIndex = Symbol('gltfIndex');\nconst $setActive = Symbol('setActive');\nconst $variantIndices = Symbol('variantIndices');\nconst $isActive = Symbol('isActive');\nconst $variantSet = Symbol('variantSet');\nconst $modelVariants = Symbol('modelVariants');\n/**\n * Material facade implementation for Three.js materials\n */\nclass Material extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.ThreeDOMElement {\n    constructor(onUpdate, gltf, gltfMaterial, gltfIndex, isActive, modelVariants, correlatedMaterials, lazyLoadInfo = undefined) {\n        super(onUpdate, gltfMaterial, correlatedMaterials);\n        this[_a] = new Set();\n        this[$gltfIndex] = gltfIndex;\n        this[$isActive] = isActive;\n        this[$modelVariants] = modelVariants;\n        if (lazyLoadInfo == null) {\n            this[$initialize](gltf);\n        }\n        else {\n            this[$lazyLoadGLTFInfo] = lazyLoadInfo;\n        }\n    }\n    get [(_a = $variantSet, $backingThreeMaterial)]() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]\n            .values()\n            .next()\n            .value;\n    }\n    [$initialize](gltf) {\n        const onUpdate = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate];\n        const gltfMaterial = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject];\n        const correlatedMaterials = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects];\n        if (gltfMaterial.extensions &&\n            gltfMaterial.extensions['KHR_materials_pbrSpecularGlossiness']) {\n            console.warn(`Material ${gltfMaterial.name} uses a deprecated extension\n          \"KHR_materials_pbrSpecularGlossiness\", please use\n          \"pbrMetallicRoughness\" instead. Specular Glossiness materials are\n          currently supported for rendering, but not for our scene-graph API,\n          nor for auto-generation of USDZ for Quick Look.`);\n        }\n        if (gltfMaterial.pbrMetallicRoughness == null) {\n            gltfMaterial.pbrMetallicRoughness = {};\n        }\n        this[$pbrMetallicRoughness] = new _pbr_metallic_roughness_js__WEBPACK_IMPORTED_MODULE_0__.PBRMetallicRoughness(onUpdate, gltf, gltfMaterial.pbrMetallicRoughness, correlatedMaterials);\n        if (gltfMaterial.emissiveFactor == null) {\n            gltfMaterial.emissiveFactor = [0, 0, 0];\n        }\n        if (gltfMaterial.doubleSided == null) {\n            gltfMaterial.doubleSided = false;\n        }\n        if (gltfMaterial.alphaMode == null) {\n            gltfMaterial.alphaMode = 'OPAQUE';\n        }\n        if (gltfMaterial.alphaCutoff == null) {\n            gltfMaterial.alphaCutoff = 0.5;\n        }\n        const { normalTexture: gltfNormalTexture, occlusionTexture: gltfOcclusionTexture, emissiveTexture: gltfEmissiveTexture } = gltfMaterial;\n        const { normalMap, aoMap, emissiveMap } = correlatedMaterials.values().next().value;\n        this[$normalTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.Normal, normalMap, correlatedMaterials, gltf, gltfNormalTexture ? gltfNormalTexture : null);\n        this[$occlusionTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.Occlusion, aoMap, correlatedMaterials, gltf, gltfOcclusionTexture ? gltfOcclusionTexture : null);\n        this[$emissiveTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.Emissive, emissiveMap, correlatedMaterials, gltf, gltfEmissiveTexture ? gltfEmissiveTexture : null);\n    }\n    async [$getLoadedMaterial]() {\n        if (this[$lazyLoadGLTFInfo] != null) {\n            const { set, material } = await this[$lazyLoadGLTFInfo].doLazyLoad();\n            // Fills in the missing data.\n            this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects] = set;\n            this[$initialize](this[$lazyLoadGLTFInfo].gltf);\n            // Releases lazy load info.\n            this[$lazyLoadGLTFInfo] = undefined;\n            // Redefines the method as a noop method.\n            this.ensureLoaded = async () => { };\n            return material;\n        }\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects].values().next().value;\n    }\n    [$ensureMaterialIsLoaded]() {\n        if (this[$lazyLoadGLTFInfo] == null) {\n            return;\n        }\n        throw new Error(`Material \"${this.name}\" has not been loaded, call 'await\n    myMaterial.ensureLoaded()' before using an unloaded material.`);\n    }\n    async ensureLoaded() {\n        await this[$getLoadedMaterial]();\n    }\n    get isLoaded() {\n        return this[$lazyLoadGLTFInfo] == null;\n    }\n    get isActive() {\n        return this[$isActive];\n    }\n    [$setActive](isActive) {\n        this[$isActive] = isActive;\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name;\n    }\n    set name(name) {\n        const sourceMaterial = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject];\n        if (sourceMaterial != null) {\n            sourceMaterial.name = name;\n        }\n        if (this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects] != null) {\n            for (const threeMaterial of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n                threeMaterial.name = name;\n            }\n        }\n    }\n    get pbrMetallicRoughness() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$pbrMetallicRoughness];\n    }\n    get normalTexture() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$normalTexture];\n    }\n    get occlusionTexture() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$occlusionTexture];\n    }\n    get emissiveTexture() {\n        this[$ensureMaterialIsLoaded]();\n        return this[$emissiveTexture];\n    }\n    get emissiveFactor() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].emissiveFactor;\n    }\n    get index() {\n        return this[$gltfIndex];\n    }\n    [$variantIndices]() {\n        return this[$variantSet];\n    }\n    hasVariant(name) {\n        const variantData = this[$modelVariants].get(name);\n        return variantData != null && this[$variantSet].has(variantData.index);\n    }\n    setEmissiveFactor(rgb) {\n        this[$ensureMaterialIsLoaded]();\n        const color = new three__WEBPACK_IMPORTED_MODULE_3__.Color();\n        if (rgb instanceof Array) {\n            color.fromArray(rgb);\n        }\n        else {\n            color.set(rgb).convertSRGBToLinear();\n        }\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            material.emissive.set(color);\n        }\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].emissiveFactor =\n            color.toArray();\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    [$applyAlphaCutoff]() {\n        this[$ensureMaterialIsLoaded]();\n        const gltfMaterial = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject];\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            if (this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaMode === 'MASK') {\n                material.alphaTest = gltfMaterial.alphaCutoff;\n            }\n            else {\n                material.alphaTest = undefined;\n            }\n            material.needsUpdate = true;\n        }\n    }\n    setAlphaCutoff(cutoff) {\n        this[$ensureMaterialIsLoaded]();\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaCutoff = cutoff;\n        this[$applyAlphaCutoff]();\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    getAlphaCutoff() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaCutoff;\n    }\n    setDoubleSided(doubleSided) {\n        this[$ensureMaterialIsLoaded]();\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            // When double-sided is disabled gltf spec dictates that Back-Face culling\n            // must be disabled, in three.js parlance that would mean FrontSide\n            // rendering only.\n            // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#double-sided\n            material.side = doubleSided ? three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide : three__WEBPACK_IMPORTED_MODULE_3__.FrontSide;\n            material.needsUpdate = true;\n        }\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].doubleSided = doubleSided;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    getDoubleSided() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].doubleSided;\n    }\n    setAlphaMode(alphaMode) {\n        this[$ensureMaterialIsLoaded]();\n        const enableTransparency = (material, enabled) => {\n            material.transparent = enabled;\n            material.depthWrite = !enabled;\n        };\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaMode = alphaMode;\n        for (const material of this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects]) {\n            enableTransparency(material, alphaMode === 'BLEND');\n            this[$applyAlphaCutoff]();\n            material.needsUpdate = true;\n        }\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$onUpdate]();\n    }\n    getAlphaMode() {\n        this[$ensureMaterialIsLoaded]();\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].alphaMode;\n    }\n}\n//# sourceMappingURL=material.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/model.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/model.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $availableVariants: () => (/* binding */ $availableVariants),\n/* harmony export */   $correlatedSceneGraph: () => (/* binding */ $correlatedSceneGraph),\n/* harmony export */   $loadVariant: () => (/* binding */ $loadVariant),\n/* harmony export */   $materialFromPoint: () => (/* binding */ $materialFromPoint),\n/* harmony export */   $materials: () => (/* binding */ $materials),\n/* harmony export */   $materialsFromPoint: () => (/* binding */ $materialsFromPoint),\n/* harmony export */   $prepareVariantsForExport: () => (/* binding */ $prepareVariantsForExport),\n/* harmony export */   $primitivesList: () => (/* binding */ $primitivesList),\n/* harmony export */   $switchVariant: () => (/* binding */ $switchVariant),\n/* harmony export */   $threeScene: () => (/* binding */ $threeScene),\n/* harmony export */   $variantData: () => (/* binding */ $variantData),\n/* harmony export */   LazyLoader: () => (/* binding */ LazyLoader),\n/* harmony export */   Model: () => (/* binding */ Model)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./material.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js\");\n/* harmony import */ var _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodes/primitive-node.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c, _d, _e, _f;\n\n\n\n\nconst $materials = Symbol('materials');\nconst $hierarchy = Symbol('hierarchy');\nconst $roots = Symbol('roots');\nconst $primitivesList = Symbol('primitives');\nconst $loadVariant = Symbol('loadVariant');\nconst $correlatedSceneGraph = Symbol('correlatedSceneGraph');\nconst $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nconst $switchVariant = Symbol('switchVariant');\nconst $threeScene = Symbol('threeScene');\nconst $materialsFromPoint = Symbol('materialsFromPoint');\nconst $materialFromPoint = Symbol('materialFromPoint');\nconst $variantData = Symbol('variantData');\nconst $availableVariants = Symbol('availableVariants');\nconst $modelOnUpdate = Symbol('modelOnUpdate');\nconst $cloneMaterial = Symbol('cloneMaterial');\n// Holds onto temporary scene context information needed to perform lazy loading\n// of a resource.\nclass LazyLoader {\n    constructor(gltf, gltfElementMap, mapKey, doLazyLoad) {\n        this.gltf = gltf;\n        this.gltfElementMap = gltfElementMap;\n        this.mapKey = mapKey;\n        this.doLazyLoad = doLazyLoad;\n    }\n}\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nclass Model {\n    constructor(correlatedSceneGraph, onUpdate = () => { }) {\n        this[_a] = new Array();\n        this[_b] = new Array();\n        this[_c] = new Array();\n        this[_d] = new Array();\n        this[_e] = () => { };\n        this[_f] = new Map();\n        this[$modelOnUpdate] = onUpdate;\n        this[$correlatedSceneGraph] = correlatedSceneGraph;\n        const { gltf, threeGLTF, gltfElementMap } = correlatedSceneGraph;\n        this[$threeScene] = threeGLTF.scene;\n        for (const [i, material] of gltf.materials.entries()) {\n            const correlatedMaterial = gltfElementMap.get(material);\n            if (correlatedMaterial != null) {\n                this[$materials].push(new _material_js__WEBPACK_IMPORTED_MODULE_0__.Material(onUpdate, gltf, material, i, true, this[$variantData], correlatedMaterial));\n            }\n            else {\n                const elementArray = gltf['materials'] || [];\n                const gltfMaterialDef = elementArray[i];\n                // Loads the three.js material.\n                const capturedMatIndex = i;\n                const materialLoadCallback = async () => {\n                    const threeMaterial = await threeGLTF.parser.getDependency('material', capturedMatIndex);\n                    // Adds correlation, maps the variant gltf-def to the\n                    // three material set containing the variant material.\n                    const threeMaterialSet = new Set();\n                    gltfElementMap.set(gltfMaterialDef, threeMaterialSet);\n                    threeMaterialSet.add(threeMaterial);\n                    return { set: threeMaterialSet, material: threeMaterial };\n                };\n                // Configures the material for lazy loading.\n                this[$materials].push(new _material_js__WEBPACK_IMPORTED_MODULE_0__.Material(onUpdate, gltf, gltfMaterialDef, i, false, this[$variantData], correlatedMaterial, new LazyLoader(gltf, gltfElementMap, gltfMaterialDef, materialLoadCallback)));\n            }\n        }\n        // Creates a hierarchy of Nodes. Allows not just for switching which\n        // material is applied to a mesh but also exposes a way to provide API\n        // for switching materials and general assignment/modification.\n        // Prepares for scene iteration.\n        const parentMap = new Map();\n        const nodeStack = new Array();\n        for (const object of threeGLTF.scene.children) {\n            nodeStack.push(object);\n        }\n        // Walks the hierarchy and creates a node tree.\n        while (nodeStack.length > 0) {\n            const object = nodeStack.pop();\n            let node = null;\n            if (object instanceof three__WEBPACK_IMPORTED_MODULE_3__.Mesh) {\n                node = new _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveNode(object, this.materials, this[$variantData], correlatedSceneGraph);\n                this[$primitivesList].push(node);\n            }\n            else {\n                node = new _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.Node(object.name);\n            }\n            const parent = parentMap.get(object);\n            if (parent != null) {\n                parent[_nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.$children].push(node);\n            }\n            else {\n                this[$roots].push(node);\n            }\n            this[$hierarchy].push(node);\n            for (const child of object.children) {\n                nodeStack.push(child);\n                parentMap.set(object, node);\n            }\n        }\n    }\n    /**\n     * Materials are listed in the order of the GLTF materials array, plus a\n     * default material at the end if one is used.\n     *\n     * TODO(#1003): How do we handle non-active scenes?\n     */\n    get materials() {\n        return this[$materials];\n    }\n    [(_a = $materials, _b = $hierarchy, _c = $roots, _d = $primitivesList, _e = $modelOnUpdate, _f = $variantData, $availableVariants)]() {\n        const variants = Array.from(this[$variantData].values());\n        variants.sort((a, b) => {\n            return a.index - b.index;\n        });\n        return variants.map((data) => {\n            return data.name;\n        });\n    }\n    getMaterialByName(name) {\n        const matches = this[$materials].filter(material => {\n            return material.name === name;\n        });\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        return null;\n    }\n    /**\n     * Intersects a ray with the Model and returns a list of materials whose\n     * objects were intersected.\n     */\n    [$materialsFromPoint](raycaster) {\n        const hits = raycaster.intersectObject(this[$threeScene], true);\n        // Map the object hits to primitives and then to the active material of\n        // the primitive.\n        return hits.map((hit) => {\n            const found = this[$hierarchy].find((node) => {\n                if (node instanceof _nodes_primitive_node_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveNode) {\n                    const primitive = node;\n                    if (primitive.mesh === hit.object) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n            if (found != null) {\n                return found.getActiveMaterial();\n            }\n            return null;\n        });\n    }\n    /**\n     * Intersects a ray with the Model and returns the first material whose\n     * object was intersected.\n     */\n    [$materialFromPoint](raycaster) {\n        const materials = this[$materialsFromPoint](raycaster);\n        if (materials.length > 0) {\n            return materials[0];\n        }\n        return null;\n    }\n    /**\n     * Switches model variant to the variant name provided, or switches to\n     * default/initial materials if 'null' is provided.\n     */\n    async [$switchVariant](variantName) {\n        for (const primitive of this[$primitivesList]) {\n            await primitive.enableVariant(variantName);\n        }\n        for (const material of this.materials) {\n            material[_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](false);\n        }\n        // Marks the materials that are now in use after the variant switch.\n        for (const primitive of this[$primitivesList]) {\n            this.materials[primitive.getActiveMaterial().index][_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](true);\n        }\n    }\n    async [$prepareVariantsForExport]() {\n        const promises = new Array();\n        for (const primitive of this[$primitivesList]) {\n            promises.push(primitive.instantiateVariants());\n        }\n        await Promise.all(promises);\n    }\n    [$cloneMaterial](index, newMaterialName) {\n        const material = this.materials[index];\n        if (!material.isLoaded) {\n            console.error(`Cloning an unloaded material,\n           call 'material.ensureLoaded() before cloning the material.`);\n        }\n        const threeMaterialSet = material[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$correlatedObjects];\n        // clones the gltf material data and updates the material name.\n        const gltfSourceMaterial = JSON.parse(JSON.stringify(material[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject]));\n        gltfSourceMaterial.name = newMaterialName;\n        // Adds the source material clone to the gltf def.\n        const gltf = this[$correlatedSceneGraph].gltf;\n        gltf.materials.push(gltfSourceMaterial);\n        const clonedSet = new Set();\n        for (const [i, threeMaterial] of threeMaterialSet.entries()) {\n            const clone = threeMaterial.clone();\n            clone.name =\n                newMaterialName + (threeMaterialSet.size > 1 ? '_inst' + i : '');\n            clonedSet.add(clone);\n        }\n        const clonedMaterial = new _material_js__WEBPACK_IMPORTED_MODULE_0__.Material(this[$modelOnUpdate], this[$correlatedSceneGraph].gltf, gltfSourceMaterial, this[$materials].length, false, // Cloned as inactive.\n        this[$variantData], clonedSet);\n        this[$materials].push(clonedMaterial);\n        return clonedMaterial;\n    }\n    createMaterialInstanceForVariant(originalMaterialIndex, newMaterialName, variantName, activateVariant = true) {\n        let variantMaterialInstance = null;\n        for (const primitive of this[$primitivesList]) {\n            const variantData = this[$variantData].get(variantName);\n            // Skips the primitive if the variant already exists.\n            if (variantData != null && primitive.variantInfo.has(variantData.index)) {\n                continue;\n            }\n            // Skips the primitive if the source/original material does not exist.\n            if (primitive.getMaterial(originalMaterialIndex) == null) {\n                continue;\n            }\n            if (!this.hasVariant(variantName)) {\n                this.createVariant(variantName);\n            }\n            if (variantMaterialInstance == null) {\n                variantMaterialInstance =\n                    this[$cloneMaterial](originalMaterialIndex, newMaterialName);\n            }\n            primitive.addVariant(variantMaterialInstance, variantName);\n        }\n        if (activateVariant && variantMaterialInstance != null) {\n            variantMaterialInstance[_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](true);\n            this.materials[originalMaterialIndex][_material_js__WEBPACK_IMPORTED_MODULE_0__.$setActive](false);\n            for (const primitive of this[$primitivesList]) {\n                primitive.enableVariant(variantName);\n            }\n        }\n        return variantMaterialInstance;\n    }\n    createVariant(variantName) {\n        if (!this[$variantData].has(variantName)) {\n            // Adds the name if it's not already in the list.\n            this[$variantData].set(variantName, { name: variantName, index: this[$variantData].size });\n        }\n        else {\n            console.warn(`Variant '${variantName}'' already exists`);\n        }\n    }\n    hasVariant(variantName) {\n        return this[$variantData].has(variantName);\n    }\n    setMaterialToVariant(materialIndex, targetVariantName) {\n        if (this[$availableVariants]().find(name => name === targetVariantName) ==\n            null) {\n            console.warn(`Can't add material to '${targetVariantName}', the variant does not exist.'`);\n            return;\n        }\n        if (materialIndex < 0 || materialIndex >= this.materials.length) {\n            console.error(`setMaterialToVariant(): materialIndex is out of bounds.`);\n            return;\n        }\n        for (const primitive of this[$primitivesList]) {\n            const material = primitive.getMaterial(materialIndex);\n            // Ensures the material exists on the primitive before setting it to a\n            // variant.\n            if (material != null) {\n                primitive.addVariant(material, targetVariantName);\n            }\n        }\n    }\n    updateVariantName(currentName, newName) {\n        const variantData = this[$variantData].get(currentName);\n        if (variantData == null) {\n            return;\n        }\n        variantData.name = newName;\n        this[$variantData].set(newName, variantData);\n        this[$variantData].delete(currentName);\n    }\n    deleteVariant(variantName) {\n        const variant = this[$variantData].get(variantName);\n        if (variant == null) {\n            return;\n        }\n        for (const material of this.materials) {\n            if (material.hasVariant(variantName)) {\n                material[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantSet].delete(variant.index);\n            }\n        }\n        for (const primitive of this[$primitivesList]) {\n            primitive.deleteVariant(variant.index);\n        }\n        this[$variantData].delete(variantName);\n    }\n}\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/model.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $activeMaterialIdx: () => (/* binding */ $activeMaterialIdx),\n/* harmony export */   $children: () => (/* binding */ $children),\n/* harmony export */   $initialMaterialIdx: () => (/* binding */ $initialMaterialIdx),\n/* harmony export */   $loadVariant: () => (/* binding */ $loadVariant),\n/* harmony export */   $prepareVariantsForExport: () => (/* binding */ $prepareVariantsForExport),\n/* harmony export */   $primitives: () => (/* binding */ $primitives),\n/* harmony export */   $switchVariant: () => (/* binding */ $switchVariant),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   PrimitiveNode: () => (/* binding */ PrimitiveNode)\n/* harmony export */ });\n/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../material.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/material.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\nvar _a, _b, _c, _d, _e;\n\n\nconst $materials = Symbol('materials');\nconst $variantToMaterialMap = Symbol('variantToMaterialMap');\nconst $modelVariants = Symbol('modelVariants');\nconst $mesh = Symbol('mesh');\nconst $primitives = Symbol('primitives');\nconst $loadVariant = Symbol('loadVariant');\nconst $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nconst $switchVariant = Symbol('switchVariant');\nconst $children = Symbol('children');\nconst $initialMaterialIdx = Symbol('initialMaterialIdx');\nconst $activeMaterialIdx = Symbol('activeMaterialIdx');\n// Defines the base level node methods and data.\nclass Node {\n    constructor(name) {\n        this.name = '';\n        this[_a] = new Array();\n        this.name = name;\n    }\n}\n_a = $children;\n// Represents a primitive in a glTF mesh.\nclass PrimitiveNode extends Node {\n    constructor(mesh, mvMaterials, modelVariants, correlatedSceneGraph) {\n        super(mesh.name);\n        // Maps glTF material index number to a material that this primitive supports.\n        this[_b] = new Map();\n        // Maps variant index to material.\n        this[_c] = new Map();\n        this[_d] = 0;\n        this[_e] = 0;\n        this[$mesh] = mesh;\n        const { gltf, threeGLTF, threeObjectMap } = correlatedSceneGraph;\n        this[$modelVariants] = modelVariants;\n        this.mesh.userData.variantData = modelVariants;\n        // Captures the primitive's initial material.\n        const materialMappings = threeObjectMap.get(mesh.material);\n        if (materialMappings.materials != null) {\n            this[$initialMaterialIdx] = this[$activeMaterialIdx] =\n                materialMappings.materials;\n        }\n        else {\n            console.error(`Primitive (${mesh.name}) missing initial material reference.`);\n        }\n        // Gets the mesh index from the node.\n        const associations = mesh.userData.associations ||\n            {};\n        if (associations.meshes == null) {\n            console.error('Mesh is missing primitive index association');\n            return;\n        }\n        // The gltf mesh array to sample from.\n        const meshElementArray = gltf['meshes'] || [];\n        // List of primitives under the mesh.\n        const gltfPrimitives = (meshElementArray[associations.meshes].primitives || []);\n        const gltfPrimitive = gltfPrimitives[associations.primitives];\n        if (gltfPrimitive == null) {\n            console.error('Mesh primitive definition is missing.');\n            return;\n        }\n        // Maps the gltfPrimitive default to a material.\n        if (gltfPrimitive.material != null) {\n            this[$materials].set(gltfPrimitive.material, mvMaterials[gltfPrimitive.material]);\n        }\n        else {\n            const defaultIdx = mvMaterials.findIndex((mat) => {\n                return mat.name === 'Default';\n            });\n            if (defaultIdx >= 0) {\n                this[$materials].set(defaultIdx, mvMaterials[defaultIdx]);\n            }\n            else {\n                console.warn('gltfPrimitive has no material!');\n            }\n        }\n        if (gltfPrimitive.extensions &&\n            gltfPrimitive.extensions['KHR_materials_variants']) {\n            const variantsExtension = gltfPrimitive.extensions['KHR_materials_variants'];\n            const extensions = threeGLTF.parser.json.extensions;\n            const variantNames = extensions['KHR_materials_variants'].variants;\n            // Provides definition now that we know there are variants to\n            // support.\n            for (const mapping of variantsExtension.mappings) {\n                const mvMaterial = mvMaterials[mapping.material];\n                // Maps variant indices to Materials.\n                this[$materials].set(mapping.material, mvMaterial);\n                for (const variant of mapping.variants) {\n                    const { name } = variantNames[variant];\n                    this[$variantToMaterialMap].set(variant, mvMaterial);\n                    // Provides variant info for material self lookup.\n                    mvMaterial[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantIndices]().add(variant);\n                    // Updates the models variant data.\n                    if (!modelVariants.has(name)) {\n                        modelVariants.set(name, { name, index: variant });\n                    }\n                }\n            }\n        }\n    }\n    get mesh() {\n        return this[$mesh];\n    }\n    async setActiveMaterial(material) {\n        const mvMaterial = this[$materials].get(material);\n        if (mvMaterial != null) {\n            this.mesh.material = await mvMaterial[_material_js__WEBPACK_IMPORTED_MODULE_0__.$getLoadedMaterial]();\n            this[$activeMaterialIdx] = material;\n        }\n        return this.mesh.material;\n    }\n    getActiveMaterial() {\n        return this[$materials].get(this[$activeMaterialIdx]);\n    }\n    getMaterial(index) {\n        return this[$materials].get(index);\n    }\n    async enableVariant(name) {\n        if (name == null) {\n            return this.setActiveMaterial(this[$initialMaterialIdx]);\n        }\n        if (this[$variantToMaterialMap] != null && this[$modelVariants].has(name)) {\n            const modelVariants = this[$modelVariants].get(name);\n            return this.enableVariantHelper(modelVariants.index);\n        }\n        return null;\n    }\n    async enableVariantHelper(index) {\n        if (this[$variantToMaterialMap] != null && index != null) {\n            const material = this[$variantToMaterialMap].get(index);\n            if (material != null) {\n                return this.setActiveMaterial(material.index);\n            }\n        }\n        return null;\n    }\n    async instantiateVariants() {\n        if (this[$variantToMaterialMap] == null) {\n            return;\n        }\n        for (const index of this[$variantToMaterialMap].keys()) {\n            const variantMaterial = this.mesh.userData.variantMaterials.get(index);\n            if (variantMaterial.material != null) {\n                continue;\n            }\n            const threeMaterial = await this.enableVariantHelper(index);\n            if (threeMaterial != null) {\n                variantMaterial.material = threeMaterial;\n            }\n        }\n    }\n    get variantInfo() {\n        return this[$variantToMaterialMap];\n    }\n    addVariant(materialVariant, variantName) {\n        if (!this.ensureVariantIsUnused(variantName)) {\n            return false;\n        }\n        // Adds the variant to the model variants if needed.\n        if (!this[$modelVariants].has(variantName)) {\n            this[$modelVariants].set(variantName, { name: variantName, index: this[$modelVariants].size });\n        }\n        const modelVariantData = this[$modelVariants].get(variantName);\n        const variantIndex = modelVariantData.index;\n        // Updates materials mapped to the variant.\n        materialVariant[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantIndices]().add(variantIndex);\n        // Updates internal mappings.\n        this[$variantToMaterialMap].set(variantIndex, materialVariant);\n        this[$materials].set(materialVariant.index, materialVariant);\n        this.updateVariantUserData(variantIndex, materialVariant);\n        return true;\n    }\n    deleteVariant(variantIndex) {\n        if (this.variantInfo.has(variantIndex)) {\n            this.variantInfo.delete(variantIndex);\n            const userDataMap = this.mesh.userData.variantMaterials;\n            if (userDataMap != null) {\n                userDataMap.delete(variantIndex);\n            }\n        }\n    }\n    updateVariantUserData(variantIndex, materialVariant) {\n        // Adds variants name to material variants set.\n        materialVariant[_material_js__WEBPACK_IMPORTED_MODULE_0__.$variantIndices]().add(variantIndex);\n        this.mesh.userData.variantData = this[$modelVariants];\n        // Updates import data (see VariantMaterialLoaderPlugin.ts).\n        this.mesh.userData.variantMaterials = this.mesh.userData.variantMaterials ||\n            new Map();\n        const map = this.mesh.userData.variantMaterials;\n        map.set(variantIndex, {\n            material: materialVariant[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects].values().next().value,\n            gltfMaterialIndex: materialVariant.index,\n        });\n    }\n    ensureVariantIsUnused(variantName) {\n        const modelVariants = this[$modelVariants].get(variantName);\n        if (modelVariants != null && this.variantInfo.has(modelVariants.index)) {\n            console.warn(`Primitive cannot add variant '${variantName}' for this material, it already exists.`);\n            return false;\n        }\n        return true;\n    }\n}\n_b = $materials, _c = $variantToMaterialMap, _d = $initialMaterialIdx, _e = $activeMaterialIdx;\n//# sourceMappingURL=primitive-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PBRMetallicRoughness: () => (/* binding */ PBRMetallicRoughness)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _texture_info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture-info.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nclass PBRMetallicRoughness extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.ThreeDOMElement {\n    constructor(onUpdate, gltf, pbrMetallicRoughness, correlatedMaterials) {\n        super(onUpdate, pbrMetallicRoughness, correlatedMaterials);\n        // Assign glTF default values\n        if (pbrMetallicRoughness.baseColorFactor == null) {\n            pbrMetallicRoughness.baseColorFactor = [1, 1, 1, 1];\n        }\n        if (pbrMetallicRoughness.roughnessFactor == null) {\n            pbrMetallicRoughness.roughnessFactor = 1;\n        }\n        if (pbrMetallicRoughness.metallicFactor == null) {\n            pbrMetallicRoughness.metallicFactor = 1;\n        }\n        const { baseColorTexture: gltfBaseColorTexture, metallicRoughnessTexture: gltfMetallicRoughnessTexture } = pbrMetallicRoughness;\n        const { map, metalnessMap } = correlatedMaterials.values().next().value;\n        this[$baseColorTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.Base, map, correlatedMaterials, gltf, gltfBaseColorTexture ? gltfBaseColorTexture : null);\n        this[$metallicRoughnessTexture] = new _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureInfo(onUpdate, _texture_info_js__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.MetallicRoughness, metalnessMap, correlatedMaterials, gltf, gltfMetallicRoughnessTexture ? gltfMetallicRoughnessTexture : null);\n    }\n    get [$threeMaterials]() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects];\n    }\n    get baseColorFactor() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject]\n            .baseColorFactor;\n    }\n    get metallicFactor() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject]\n            .metallicFactor;\n    }\n    get roughnessFactor() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject]\n            .roughnessFactor;\n    }\n    get baseColorTexture() {\n        return this[$baseColorTexture];\n    }\n    get metallicRoughnessTexture() {\n        return this[$metallicRoughnessTexture];\n    }\n    setBaseColorFactor(rgba) {\n        const color = new three__WEBPACK_IMPORTED_MODULE_2__.Color();\n        if (rgba instanceof Array) {\n            color.fromArray(rgba);\n        }\n        else {\n            color.set(rgba).convertSRGBToLinear();\n        }\n        for (const material of this[$threeMaterials]) {\n            material.color.set(color);\n            if (rgba instanceof Array) {\n                material.opacity = (rgba)[3];\n            }\n            else {\n                rgba = [0, 0, 0, material.opacity];\n                color.toArray(rgba);\n            }\n        }\n        const pbrMetallicRoughness = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n        pbrMetallicRoughness.baseColorFactor = rgba;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n    }\n    setMetallicFactor(value) {\n        for (const material of this[$threeMaterials]) {\n            material.metalness = value;\n        }\n        const pbrMetallicRoughness = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n        pbrMetallicRoughness.metallicFactor = value;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n    }\n    setRoughnessFactor(value) {\n        for (const material of this[$threeMaterials]) {\n            material.roughness = value;\n        }\n        const pbrMetallicRoughness = this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n        pbrMetallicRoughness.roughnessFactor = value;\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n    }\n}\n//# sourceMappingURL=pbr-metallic-roughness.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3Bici1tZXRhbGxpYy1yb3VnaG5lc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEI7QUFDZ0M7QUFDeUM7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DLGtFQUFlO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpR0FBaUc7QUFDakgsZ0JBQWdCLG9CQUFvQjtBQUNwQyxzQ0FBc0MseURBQVcsV0FBVywwREFBWTtBQUN4RSw4Q0FBOEMseURBQVcsV0FBVywwREFBWTtBQUNoRjtBQUNBO0FBQ0Esb0JBQW9CLHFFQUFrQjtBQUN0QztBQUNBO0FBQ0Esb0JBQW9CLGdFQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnRUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0VBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHdDQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdFQUFhO0FBQ3ZEO0FBQ0EsYUFBYSw0REFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdFQUFhO0FBQ3ZEO0FBQ0EsYUFBYSw0REFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdFQUFhO0FBQ3ZEO0FBQ0EsYUFBYSw0REFBUztBQUN0QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9mZWF0dXJlcy9zY2VuZS1ncmFwaC9wYnItbWV0YWxsaWMtcm91Z2huZXNzLmpzPzI2NDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBUZXh0dXJlSW5mbywgVGV4dHVyZVVzYWdlIH0gZnJvbSAnLi90ZXh0dXJlLWluZm8uanMnO1xuaW1wb3J0IHsgJGNvcnJlbGF0ZWRPYmplY3RzLCAkb25VcGRhdGUsICRzb3VyY2VPYmplY3QsIFRocmVlRE9NRWxlbWVudCB9IGZyb20gJy4vdGhyZWUtZG9tLWVsZW1lbnQuanMnO1xuY29uc3QgJHRocmVlTWF0ZXJpYWxzID0gU3ltYm9sKCd0aHJlZU1hdGVyaWFscycpO1xuY29uc3QgJGJhc2VDb2xvclRleHR1cmUgPSBTeW1ib2woJ2Jhc2VDb2xvclRleHR1cmUnKTtcbmNvbnN0ICRtZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgPSBTeW1ib2woJ21ldGFsbGljUm91Z2huZXNzVGV4dHVyZScpO1xuLyoqXG4gKiBQQlIgbWF0ZXJpYWwgcHJvcGVydGllcyBmYWNhZGUgaW1wbGVtZW50YXRpb24gZm9yIFRocmVlLmpzIG1hdGVyaWFsc1xuICovXG5leHBvcnQgY2xhc3MgUEJSTWV0YWxsaWNSb3VnaG5lc3MgZXh0ZW5kcyBUaHJlZURPTUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9uVXBkYXRlLCBnbHRmLCBwYnJNZXRhbGxpY1JvdWdobmVzcywgY29ycmVsYXRlZE1hdGVyaWFscykge1xuICAgICAgICBzdXBlcihvblVwZGF0ZSwgcGJyTWV0YWxsaWNSb3VnaG5lc3MsIGNvcnJlbGF0ZWRNYXRlcmlhbHMpO1xuICAgICAgICAvLyBBc3NpZ24gZ2xURiBkZWZhdWx0IHZhbHVlc1xuICAgICAgICBpZiAocGJyTWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvciA9IFsxLCAxLCAxLCAxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGJyTWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzLnJvdWdobmVzc0ZhY3RvciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBick1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGJhc2VDb2xvclRleHR1cmU6IGdsdGZCYXNlQ29sb3JUZXh0dXJlLCBtZXRhbGxpY1JvdWdobmVzc1RleHR1cmU6IGdsdGZNZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgfSA9IHBick1ldGFsbGljUm91Z2huZXNzO1xuICAgICAgICBjb25zdCB7IG1hcCwgbWV0YWxuZXNzTWFwIH0gPSBjb3JyZWxhdGVkTWF0ZXJpYWxzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICAgICAgdGhpc1skYmFzZUNvbG9yVGV4dHVyZV0gPSBuZXcgVGV4dHVyZUluZm8ob25VcGRhdGUsIFRleHR1cmVVc2FnZS5CYXNlLCBtYXAsIGNvcnJlbGF0ZWRNYXRlcmlhbHMsIGdsdGYsIGdsdGZCYXNlQ29sb3JUZXh0dXJlID8gZ2x0ZkJhc2VDb2xvclRleHR1cmUgOiBudWxsKTtcbiAgICAgICAgdGhpc1skbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlXSA9IG5ldyBUZXh0dXJlSW5mbyhvblVwZGF0ZSwgVGV4dHVyZVVzYWdlLk1ldGFsbGljUm91Z2huZXNzLCBtZXRhbG5lc3NNYXAsIGNvcnJlbGF0ZWRNYXRlcmlhbHMsIGdsdGYsIGdsdGZNZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgPyBnbHRmTWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIDogbnVsbCk7XG4gICAgfVxuICAgIGdldCBbJHRocmVlTWF0ZXJpYWxzXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJGNvcnJlbGF0ZWRPYmplY3RzXTtcbiAgICB9XG4gICAgZ2V0IGJhc2VDb2xvckZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZU9iamVjdF1cbiAgICAgICAgICAgIC5iYXNlQ29sb3JGYWN0b3I7XG4gICAgfVxuICAgIGdldCBtZXRhbGxpY0ZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZU9iamVjdF1cbiAgICAgICAgICAgIC5tZXRhbGxpY0ZhY3RvcjtcbiAgICB9XG4gICAgZ2V0IHJvdWdobmVzc0ZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZU9iamVjdF1cbiAgICAgICAgICAgIC5yb3VnaG5lc3NGYWN0b3I7XG4gICAgfVxuICAgIGdldCBiYXNlQ29sb3JUZXh0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skYmFzZUNvbG9yVGV4dHVyZV07XG4gICAgfVxuICAgIGdldCBtZXRhbGxpY1JvdWdobmVzc1RleHR1cmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRtZXRhbGxpY1JvdWdobmVzc1RleHR1cmVdO1xuICAgIH1cbiAgICBzZXRCYXNlQ29sb3JGYWN0b3IocmdiYSkge1xuICAgICAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcigpO1xuICAgICAgICBpZiAocmdiYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBjb2xvci5mcm9tQXJyYXkocmdiYSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2xvci5zZXQocmdiYSkuY29udmVydFNSR0JUb0xpbmVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbWF0ZXJpYWwgb2YgdGhpc1skdGhyZWVNYXRlcmlhbHNdKSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5jb2xvci5zZXQoY29sb3IpO1xuICAgICAgICAgICAgaWYgKHJnYmEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSAocmdiYSlbM107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZ2JhID0gWzAsIDAsIDAsIG1hdGVyaWFsLm9wYWNpdHldO1xuICAgICAgICAgICAgICAgIGNvbG9yLnRvQXJyYXkocmdiYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGJyTWV0YWxsaWNSb3VnaG5lc3MgPSB0aGlzWyRzb3VyY2VPYmplY3RdO1xuICAgICAgICBwYnJNZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3IgPSByZ2JhO1xuICAgICAgICB0aGlzWyRvblVwZGF0ZV0oKTtcbiAgICB9XG4gICAgc2V0TWV0YWxsaWNGYWN0b3IodmFsdWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBtYXRlcmlhbCBvZiB0aGlzWyR0aHJlZU1hdGVyaWFsc10pIHtcbiAgICAgICAgICAgIG1hdGVyaWFsLm1ldGFsbmVzcyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBick1ldGFsbGljUm91Z2huZXNzID0gdGhpc1skc291cmNlT2JqZWN0XTtcbiAgICAgICAgcGJyTWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNGYWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgdGhpc1skb25VcGRhdGVdKCk7XG4gICAgfVxuICAgIHNldFJvdWdobmVzc0ZhY3Rvcih2YWx1ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG1hdGVyaWFsIG9mIHRoaXNbJHRocmVlTWF0ZXJpYWxzXSkge1xuICAgICAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGJyTWV0YWxsaWNSb3VnaG5lc3MgPSB0aGlzWyRzb3VyY2VPYmplY3RdO1xuICAgICAgICBwYnJNZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgdGhpc1skb25VcGRhdGVdKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGJyLW1ldGFsbGljLXJvdWdobmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sampler: () => (/* binding */ Sampler)\n/* harmony export */ });\n/* harmony import */ var _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../three-components/gltf-instance/gltf-2.0.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst isMinFilter = (() => {\n    const minFilterValues = [\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Nearest,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Linear,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.NearestMipmapNearest,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.LinearMipmapLinear,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.NearestMipmapLinear,\n        _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.LinearMipmapLinear\n    ];\n    return (value) => minFilterValues.indexOf(value) > -1;\n})();\nconst isMagFilter = (() => {\n    const magFilterValues = [_three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Nearest, _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Linear];\n    return (value) => magFilterValues.indexOf(value) > -1;\n})();\nconst isWrapMode = (() => {\n    const wrapModes = [_three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.ClampToEdge, _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.MirroredRepeat, _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.Repeat];\n    return (value) => wrapModes.indexOf(value) > -1;\n})();\nconst isValidSamplerValue = (property, value) => {\n    switch (property) {\n        case 'minFilter':\n            return isMinFilter(value);\n        case 'magFilter':\n            return isMagFilter(value);\n        case 'wrapS':\n        case 'wrapT':\n            return isWrapMode(value);\n        default:\n            throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n    }\n};\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\nconst $sourceSampler = Symbol('sourceSampler');\n/**\n * Sampler facade implementation for Three.js textures\n */\nclass Sampler extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.ThreeDOMElement {\n    get [$threeTextures]() {\n        console.assert(this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects] != null && this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects].size > 0, 'Sampler correlated object is undefined');\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$correlatedObjects];\n    }\n    get [$sourceSampler]() {\n        console.assert(this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject] != null, 'Sampler source is undefined');\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject];\n    }\n    constructor(onUpdate, texture, gltfSampler) {\n        gltfSampler = gltfSampler !== null && gltfSampler !== void 0 ? gltfSampler : {};\n        // These defaults represent a convergence of glTF defaults for wrap mode and\n        // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n        // its own defaults for filters.\n        // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n        // @see https://threejs.org/docs/#api/en/textures/Texture\n        if (gltfSampler.minFilter == null) {\n            gltfSampler.minFilter =\n                texture ? texture.minFilter : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.LinearMipmapLinear;\n        }\n        if (gltfSampler.magFilter == null) {\n            gltfSampler.magFilter =\n                texture ? texture.magFilter : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Filter.Linear;\n        }\n        if (gltfSampler.wrapS == null) {\n            gltfSampler.wrapS = texture ? texture.wrapS : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.Repeat;\n        }\n        if (gltfSampler.wrapT == null) {\n            gltfSampler.wrapT = texture ? texture.wrapT : _three_components_gltf_instance_gltf_2_0_js__WEBPACK_IMPORTED_MODULE_0__.Wrap.Repeat;\n        }\n        super(onUpdate, gltfSampler, new Set(texture ? [texture] : []));\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$sourceObject].name || '';\n    }\n    get minFilter() {\n        return this[$sourceSampler].minFilter;\n    }\n    get magFilter() {\n        return this[$sourceSampler].magFilter;\n    }\n    get wrapS() {\n        return this[$sourceSampler].wrapS;\n    }\n    get wrapT() {\n        return this[$sourceSampler].wrapT;\n    }\n    setMinFilter(filter) {\n        this[$setProperty]('minFilter', filter);\n    }\n    setMagFilter(filter) {\n        this[$setProperty]('magFilter', filter);\n    }\n    setWrapS(mode) {\n        this[$setProperty]('wrapS', mode);\n    }\n    setWrapT(mode) {\n        this[$setProperty]('wrapT', mode);\n    }\n    [$setProperty](property, value) {\n        const sampler = this[$sourceSampler];\n        if (sampler != null) {\n            if (isValidSamplerValue(property, value)) {\n                sampler[property] = value;\n                for (const texture of this[$threeTextures]) {\n                    texture[property] = value;\n                    texture.needsUpdate = true;\n                }\n            }\n            this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.$onUpdate]();\n        }\n    }\n}\n//# sourceMappingURL=sampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3NhbXBsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRjtBQUN1QjtBQUN2RztBQUNBO0FBQ0EsUUFBUSwrRUFBTTtBQUNkLFFBQVEsK0VBQU07QUFDZCxRQUFRLCtFQUFNO0FBQ2QsUUFBUSwrRUFBTTtBQUNkLFFBQVEsK0VBQU07QUFDZCxRQUFRLCtFQUFNO0FBQ2Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDZCQUE2QiwrRUFBTSxVQUFVLCtFQUFNO0FBQ25EO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsdUJBQXVCLDZFQUFJLGNBQWMsNkVBQUksaUJBQWlCLDZFQUFJO0FBQ2xFO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELFNBQVM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHNCQUFzQixrRUFBZTtBQUM1QztBQUNBLDRCQUE0QixxRUFBa0Isa0JBQWtCLHFFQUFrQjtBQUNsRixvQkFBb0IscUVBQWtCO0FBQ3RDO0FBQ0E7QUFDQSw0QkFBNEIsZ0VBQWE7QUFDekMsb0JBQW9CLGdFQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLCtFQUFNO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QywrRUFBTTtBQUNwRDtBQUNBO0FBQ0EsMERBQTBELDZFQUFJO0FBQzlEO0FBQ0E7QUFDQSwwREFBMEQsNkVBQUk7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0VBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw0REFBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3NhbXBsZXIuanM/OWExYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBGaWx0ZXIsIFdyYXAgfSBmcm9tICcuLi8uLi90aHJlZS1jb21wb25lbnRzL2dsdGYtaW5zdGFuY2UvZ2x0Zi0yLjAuanMnO1xuaW1wb3J0IHsgJGNvcnJlbGF0ZWRPYmplY3RzLCAkb25VcGRhdGUsICRzb3VyY2VPYmplY3QsIFRocmVlRE9NRWxlbWVudCB9IGZyb20gJy4vdGhyZWUtZG9tLWVsZW1lbnQuanMnO1xuY29uc3QgaXNNaW5GaWx0ZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG1pbkZpbHRlclZhbHVlcyA9IFtcbiAgICAgICAgRmlsdGVyLk5lYXJlc3QsXG4gICAgICAgIEZpbHRlci5MaW5lYXIsXG4gICAgICAgIEZpbHRlci5OZWFyZXN0TWlwbWFwTmVhcmVzdCxcbiAgICAgICAgRmlsdGVyLkxpbmVhck1pcG1hcExpbmVhcixcbiAgICAgICAgRmlsdGVyLk5lYXJlc3RNaXBtYXBMaW5lYXIsXG4gICAgICAgIEZpbHRlci5MaW5lYXJNaXBtYXBMaW5lYXJcbiAgICBdO1xuICAgIHJldHVybiAodmFsdWUpID0+IG1pbkZpbHRlclZhbHVlcy5pbmRleE9mKHZhbHVlKSA+IC0xO1xufSkoKTtcbmNvbnN0IGlzTWFnRmlsdGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBtYWdGaWx0ZXJWYWx1ZXMgPSBbRmlsdGVyLk5lYXJlc3QsIEZpbHRlci5MaW5lYXJdO1xuICAgIHJldHVybiAodmFsdWUpID0+IG1hZ0ZpbHRlclZhbHVlcy5pbmRleE9mKHZhbHVlKSA+IC0xO1xufSkoKTtcbmNvbnN0IGlzV3JhcE1vZGUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBNb2RlcyA9IFtXcmFwLkNsYW1wVG9FZGdlLCBXcmFwLk1pcnJvcmVkUmVwZWF0LCBXcmFwLlJlcGVhdF07XG4gICAgcmV0dXJuICh2YWx1ZSkgPT4gd3JhcE1vZGVzLmluZGV4T2YodmFsdWUpID4gLTE7XG59KSgpO1xuY29uc3QgaXNWYWxpZFNhbXBsZXJWYWx1ZSA9IChwcm9wZXJ0eSwgdmFsdWUpID0+IHtcbiAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XG4gICAgICAgIGNhc2UgJ21pbkZpbHRlcic6XG4gICAgICAgICAgICByZXR1cm4gaXNNaW5GaWx0ZXIodmFsdWUpO1xuICAgICAgICBjYXNlICdtYWdGaWx0ZXInOlxuICAgICAgICAgICAgcmV0dXJuIGlzTWFnRmlsdGVyKHZhbHVlKTtcbiAgICAgICAgY2FzZSAnd3JhcFMnOlxuICAgICAgICBjYXNlICd3cmFwVCc6XG4gICAgICAgICAgICByZXR1cm4gaXNXcmFwTW9kZSh2YWx1ZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb25maWd1cmUgcHJvcGVydHkgXCIke3Byb3BlcnR5fVwiIG9uIFNhbXBsZXJgKTtcbiAgICB9XG59O1xuY29uc3QgJHRocmVlVGV4dHVyZXMgPSBTeW1ib2woJ3RocmVlVGV4dHVyZXMnKTtcbmNvbnN0ICRzZXRQcm9wZXJ0eSA9IFN5bWJvbCgnc2V0UHJvcGVydHknKTtcbmNvbnN0ICRzb3VyY2VTYW1wbGVyID0gU3ltYm9sKCdzb3VyY2VTYW1wbGVyJyk7XG4vKipcbiAqIFNhbXBsZXIgZmFjYWRlIGltcGxlbWVudGF0aW9uIGZvciBUaHJlZS5qcyB0ZXh0dXJlc1xuICovXG5leHBvcnQgY2xhc3MgU2FtcGxlciBleHRlbmRzIFRocmVlRE9NRWxlbWVudCB7XG4gICAgZ2V0IFskdGhyZWVUZXh0dXJlc10oKSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXNbJGNvcnJlbGF0ZWRPYmplY3RzXSAhPSBudWxsICYmIHRoaXNbJGNvcnJlbGF0ZWRPYmplY3RzXS5zaXplID4gMCwgJ1NhbXBsZXIgY29ycmVsYXRlZCBvYmplY3QgaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgIHJldHVybiB0aGlzWyRjb3JyZWxhdGVkT2JqZWN0c107XG4gICAgfVxuICAgIGdldCBbJHNvdXJjZVNhbXBsZXJdKCkge1xuICAgICAgICBjb25zb2xlLmFzc2VydCh0aGlzWyRzb3VyY2VPYmplY3RdICE9IG51bGwsICdTYW1wbGVyIHNvdXJjZSBpcyB1bmRlZmluZWQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZU9iamVjdF07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9uVXBkYXRlLCB0ZXh0dXJlLCBnbHRmU2FtcGxlcikge1xuICAgICAgICBnbHRmU2FtcGxlciA9IGdsdGZTYW1wbGVyICE9PSBudWxsICYmIGdsdGZTYW1wbGVyICE9PSB2b2lkIDAgPyBnbHRmU2FtcGxlciA6IHt9O1xuICAgICAgICAvLyBUaGVzZSBkZWZhdWx0cyByZXByZXNlbnQgYSBjb252ZXJnZW5jZSBvZiBnbFRGIGRlZmF1bHRzIGZvciB3cmFwIG1vZGUgYW5kXG4gICAgICAgIC8vIFRocmVlLmpzIGRlZmF1bHRzIGZvciBmaWx0ZXJzLiBQZXIgZ2xURiAyLjAgc3BlYywgYSByZW5kZXJlciBtYXkgY2hvb3NlXG4gICAgICAgIC8vIGl0cyBvd24gZGVmYXVsdHMgZm9yIGZpbHRlcnMuXG4gICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3JlZmVyZW5jZS1zYW1wbGVyXG4gICAgICAgIC8vIEBzZWUgaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vdGV4dHVyZXMvVGV4dHVyZVxuICAgICAgICBpZiAoZ2x0ZlNhbXBsZXIubWluRmlsdGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGdsdGZTYW1wbGVyLm1pbkZpbHRlciA9XG4gICAgICAgICAgICAgICAgdGV4dHVyZSA/IHRleHR1cmUubWluRmlsdGVyIDogRmlsdGVyLkxpbmVhck1pcG1hcExpbmVhcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2x0ZlNhbXBsZXIubWFnRmlsdGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGdsdGZTYW1wbGVyLm1hZ0ZpbHRlciA9XG4gICAgICAgICAgICAgICAgdGV4dHVyZSA/IHRleHR1cmUubWFnRmlsdGVyIDogRmlsdGVyLkxpbmVhcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2x0ZlNhbXBsZXIud3JhcFMgPT0gbnVsbCkge1xuICAgICAgICAgICAgZ2x0ZlNhbXBsZXIud3JhcFMgPSB0ZXh0dXJlID8gdGV4dHVyZS53cmFwUyA6IFdyYXAuUmVwZWF0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChnbHRmU2FtcGxlci53cmFwVCA9PSBudWxsKSB7XG4gICAgICAgICAgICBnbHRmU2FtcGxlci53cmFwVCA9IHRleHR1cmUgPyB0ZXh0dXJlLndyYXBUIDogV3JhcC5SZXBlYXQ7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIob25VcGRhdGUsIGdsdGZTYW1wbGVyLCBuZXcgU2V0KHRleHR1cmUgPyBbdGV4dHVyZV0gOiBbXSkpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZU9iamVjdF0ubmFtZSB8fCAnJztcbiAgICB9XG4gICAgZ2V0IG1pbkZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZVNhbXBsZXJdLm1pbkZpbHRlcjtcbiAgICB9XG4gICAgZ2V0IG1hZ0ZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZVNhbXBsZXJdLm1hZ0ZpbHRlcjtcbiAgICB9XG4gICAgZ2V0IHdyYXBTKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skc291cmNlU2FtcGxlcl0ud3JhcFM7XG4gICAgfVxuICAgIGdldCB3cmFwVCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHNvdXJjZVNhbXBsZXJdLndyYXBUO1xuICAgIH1cbiAgICBzZXRNaW5GaWx0ZXIoZmlsdGVyKSB7XG4gICAgICAgIHRoaXNbJHNldFByb3BlcnR5XSgnbWluRmlsdGVyJywgZmlsdGVyKTtcbiAgICB9XG4gICAgc2V0TWFnRmlsdGVyKGZpbHRlcikge1xuICAgICAgICB0aGlzWyRzZXRQcm9wZXJ0eV0oJ21hZ0ZpbHRlcicsIGZpbHRlcik7XG4gICAgfVxuICAgIHNldFdyYXBTKG1vZGUpIHtcbiAgICAgICAgdGhpc1skc2V0UHJvcGVydHldKCd3cmFwUycsIG1vZGUpO1xuICAgIH1cbiAgICBzZXRXcmFwVChtb2RlKSB7XG4gICAgICAgIHRoaXNbJHNldFByb3BlcnR5XSgnd3JhcFQnLCBtb2RlKTtcbiAgICB9XG4gICAgWyRzZXRQcm9wZXJ0eV0ocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHNhbXBsZXIgPSB0aGlzWyRzb3VyY2VTYW1wbGVyXTtcbiAgICAgICAgaWYgKHNhbXBsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRTYW1wbGVyVmFsdWUocHJvcGVydHksIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHNhbXBsZXJbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZXh0dXJlIG9mIHRoaXNbJHRocmVlVGV4dHVyZXNdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNbJG9uVXBkYXRlXSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $materials: () => (/* binding */ $materials),\n/* harmony export */   $usage: () => (/* binding */ $usage),\n/* harmony export */   TextureInfo: () => (/* binding */ TextureInfo),\n/* harmony export */   TextureUsage: () => (/* binding */ TextureUsage)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js\");\n/* harmony import */ var _texture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./texture.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\n\n\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nconst $materials = Symbol('materials');\nconst $usage = Symbol('usage');\n// Defines what a texture will be used for.\nvar TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n    TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n    TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n    TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n    TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nclass TextureInfo {\n    constructor(onUpdate, usage, threeTexture, material, gltf, gltfTextureInfo) {\n        this[_a] = null;\n        this[_b] = {\n            rotation: 0,\n            scale: new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(1, 1),\n            offset: new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(0, 0)\n        };\n        // Creates image, sampler, and texture if valid texture info is provided.\n        if (gltfTextureInfo && threeTexture) {\n            const gltfTexture = gltf.textures ? gltf.textures[gltfTextureInfo.index] : null;\n            const sampler = gltfTexture ?\n                (gltf.samplers ? gltf.samplers[gltfTexture.sampler] : null) :\n                null;\n            const image = gltfTexture ?\n                (gltf.images ? gltf.images[gltfTexture.source] : null) :\n                null;\n            this[$transform].rotation = threeTexture.rotation;\n            this[$transform].scale.copy(threeTexture.repeat);\n            this[$transform].offset.copy(threeTexture.offset);\n            this[$texture] =\n                new _texture_js__WEBPACK_IMPORTED_MODULE_1__.Texture(onUpdate, threeTexture, gltfTexture, sampler, image);\n        }\n        this.onUpdate = onUpdate;\n        this[$materials] = material;\n        this[$usage] = usage;\n    }\n    get texture() {\n        return this[$texture];\n    }\n    setTexture(texture) {\n        const threeTexture = texture != null ? texture.source[_image_js__WEBPACK_IMPORTED_MODULE_0__.$threeTexture] : null;\n        let encoding = three__WEBPACK_IMPORTED_MODULE_2__.sRGBEncoding;\n        this[$texture] = texture;\n        if (this[$materials]) {\n            for (const material of this[$materials]) {\n                switch (this[$usage]) {\n                    case TextureUsage.Base:\n                        material.map = threeTexture;\n                        break;\n                    case TextureUsage.MetallicRoughness:\n                        encoding = three__WEBPACK_IMPORTED_MODULE_2__.LinearEncoding;\n                        material.metalnessMap = threeTexture;\n                        material.roughnessMap = threeTexture;\n                        break;\n                    case TextureUsage.Normal:\n                        encoding = three__WEBPACK_IMPORTED_MODULE_2__.LinearEncoding;\n                        material.normalMap = threeTexture;\n                        break;\n                    case TextureUsage.Occlusion:\n                        encoding = three__WEBPACK_IMPORTED_MODULE_2__.LinearEncoding;\n                        material.aoMap = threeTexture;\n                        break;\n                    case TextureUsage.Emissive:\n                        material.emissiveMap = threeTexture;\n                        break;\n                    default:\n                }\n                material.needsUpdate = true;\n            }\n        }\n        if (threeTexture) {\n            // Updates the encoding for the texture, affects all references.\n            threeTexture.encoding = encoding;\n            threeTexture.rotation = this[$transform].rotation;\n            threeTexture.repeat = this[$transform].scale;\n            threeTexture.offset = this[$transform].offset;\n        }\n        this.onUpdate();\n    }\n}\n_a = $texture, _b = $transform;\n//# sourceMappingURL=texture-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RleHR1cmUtaW5mby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzhEO0FBQ25CO0FBQ0o7QUFDdkM7QUFDQTtBQUNPO0FBQ0E7QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0M7QUFDckM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBTztBQUM5Qix3QkFBd0IsMENBQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsb0RBQWE7QUFDM0UsdUJBQXVCLCtDQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaURBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaURBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlEQUFjO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvZmVhdHVyZXMvc2NlbmUtZ3JhcGgvdGV4dHVyZS1pbmZvLmpzPzQxZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9hLCBfYjtcbmltcG9ydCB7IExpbmVhckVuY29kaW5nLCBzUkdCRW5jb2RpbmcsIFZlY3RvcjIgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyAkdGhyZWVUZXh0dXJlIH0gZnJvbSAnLi9pbWFnZS5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlLmpzJztcbmNvbnN0ICR0ZXh0dXJlID0gU3ltYm9sKCd0ZXh0dXJlJyk7XG5jb25zdCAkdHJhbnNmb3JtID0gU3ltYm9sKCd0cmFuc2Zvcm0nKTtcbmV4cG9ydCBjb25zdCAkbWF0ZXJpYWxzID0gU3ltYm9sKCdtYXRlcmlhbHMnKTtcbmV4cG9ydCBjb25zdCAkdXNhZ2UgPSBTeW1ib2woJ3VzYWdlJyk7XG4vLyBEZWZpbmVzIHdoYXQgYSB0ZXh0dXJlIHdpbGwgYmUgdXNlZCBmb3IuXG5leHBvcnQgdmFyIFRleHR1cmVVc2FnZTtcbihmdW5jdGlvbiAoVGV4dHVyZVVzYWdlKSB7XG4gICAgVGV4dHVyZVVzYWdlW1RleHR1cmVVc2FnZVtcIkJhc2VcIl0gPSAwXSA9IFwiQmFzZVwiO1xuICAgIFRleHR1cmVVc2FnZVtUZXh0dXJlVXNhZ2VbXCJNZXRhbGxpY1JvdWdobmVzc1wiXSA9IDFdID0gXCJNZXRhbGxpY1JvdWdobmVzc1wiO1xuICAgIFRleHR1cmVVc2FnZVtUZXh0dXJlVXNhZ2VbXCJOb3JtYWxcIl0gPSAyXSA9IFwiTm9ybWFsXCI7XG4gICAgVGV4dHVyZVVzYWdlW1RleHR1cmVVc2FnZVtcIk9jY2x1c2lvblwiXSA9IDNdID0gXCJPY2NsdXNpb25cIjtcbiAgICBUZXh0dXJlVXNhZ2VbVGV4dHVyZVVzYWdlW1wiRW1pc3NpdmVcIl0gPSA0XSA9IFwiRW1pc3NpdmVcIjtcbn0pKFRleHR1cmVVc2FnZSB8fCAoVGV4dHVyZVVzYWdlID0ge30pKTtcbi8qKlxuICogVGV4dHVyZUluZm8gZmFjYWRlIGltcGxlbWVudGF0aW9uIGZvciBUaHJlZS5qcyBtYXRlcmlhbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmVJbmZvIHtcbiAgICBjb25zdHJ1Y3RvcihvblVwZGF0ZSwgdXNhZ2UsIHRocmVlVGV4dHVyZSwgbWF0ZXJpYWwsIGdsdGYsIGdsdGZUZXh0dXJlSW5mbykge1xuICAgICAgICB0aGlzW19hXSA9IG51bGw7XG4gICAgICAgIHRoaXNbX2JdID0ge1xuICAgICAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgICAgICBzY2FsZTogbmV3IFZlY3RvcjIoMSwgMSksXG4gICAgICAgICAgICBvZmZzZXQ6IG5ldyBWZWN0b3IyKDAsIDApXG4gICAgICAgIH07XG4gICAgICAgIC8vIENyZWF0ZXMgaW1hZ2UsIHNhbXBsZXIsIGFuZCB0ZXh0dXJlIGlmIHZhbGlkIHRleHR1cmUgaW5mbyBpcyBwcm92aWRlZC5cbiAgICAgICAgaWYgKGdsdGZUZXh0dXJlSW5mbyAmJiB0aHJlZVRleHR1cmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGdsdGZUZXh0dXJlID0gZ2x0Zi50ZXh0dXJlcyA/IGdsdGYudGV4dHVyZXNbZ2x0ZlRleHR1cmVJbmZvLmluZGV4XSA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCBzYW1wbGVyID0gZ2x0ZlRleHR1cmUgP1xuICAgICAgICAgICAgICAgIChnbHRmLnNhbXBsZXJzID8gZ2x0Zi5zYW1wbGVyc1tnbHRmVGV4dHVyZS5zYW1wbGVyXSA6IG51bGwpIDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBnbHRmVGV4dHVyZSA/XG4gICAgICAgICAgICAgICAgKGdsdGYuaW1hZ2VzID8gZ2x0Zi5pbWFnZXNbZ2x0ZlRleHR1cmUuc291cmNlXSA6IG51bGwpIDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgdGhpc1skdHJhbnNmb3JtXS5yb3RhdGlvbiA9IHRocmVlVGV4dHVyZS5yb3RhdGlvbjtcbiAgICAgICAgICAgIHRoaXNbJHRyYW5zZm9ybV0uc2NhbGUuY29weSh0aHJlZVRleHR1cmUucmVwZWF0KTtcbiAgICAgICAgICAgIHRoaXNbJHRyYW5zZm9ybV0ub2Zmc2V0LmNvcHkodGhyZWVUZXh0dXJlLm9mZnNldCk7XG4gICAgICAgICAgICB0aGlzWyR0ZXh0dXJlXSA9XG4gICAgICAgICAgICAgICAgbmV3IFRleHR1cmUob25VcGRhdGUsIHRocmVlVGV4dHVyZSwgZ2x0ZlRleHR1cmUsIHNhbXBsZXIsIGltYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uVXBkYXRlID0gb25VcGRhdGU7XG4gICAgICAgIHRoaXNbJG1hdGVyaWFsc10gPSBtYXRlcmlhbDtcbiAgICAgICAgdGhpc1skdXNhZ2VdID0gdXNhZ2U7XG4gICAgfVxuICAgIGdldCB0ZXh0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skdGV4dHVyZV07XG4gICAgfVxuICAgIHNldFRleHR1cmUodGV4dHVyZSkge1xuICAgICAgICBjb25zdCB0aHJlZVRleHR1cmUgPSB0ZXh0dXJlICE9IG51bGwgPyB0ZXh0dXJlLnNvdXJjZVskdGhyZWVUZXh0dXJlXSA6IG51bGw7XG4gICAgICAgIGxldCBlbmNvZGluZyA9IHNSR0JFbmNvZGluZztcbiAgICAgICAgdGhpc1skdGV4dHVyZV0gPSB0ZXh0dXJlO1xuICAgICAgICBpZiAodGhpc1skbWF0ZXJpYWxzXSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBtYXRlcmlhbCBvZiB0aGlzWyRtYXRlcmlhbHNdKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzWyR1c2FnZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlVXNhZ2UuQmFzZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm1hcCA9IHRocmVlVGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRleHR1cmVVc2FnZS5NZXRhbGxpY1JvdWdobmVzczpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nID0gTGluZWFyRW5jb2Rpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgPSB0aHJlZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgPSB0aHJlZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlVXNhZ2UuTm9ybWFsOlxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm5vcm1hbE1hcCA9IHRocmVlVGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRleHR1cmVVc2FnZS5PY2NsdXNpb246XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuYW9NYXAgPSB0aHJlZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlVXNhZ2UuRW1pc3NpdmU6XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IHRocmVlVGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRocmVlVGV4dHVyZSkge1xuICAgICAgICAgICAgLy8gVXBkYXRlcyB0aGUgZW5jb2RpbmcgZm9yIHRoZSB0ZXh0dXJlLCBhZmZlY3RzIGFsbCByZWZlcmVuY2VzLlxuICAgICAgICAgICAgdGhyZWVUZXh0dXJlLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgICAgICB0aHJlZVRleHR1cmUucm90YXRpb24gPSB0aGlzWyR0cmFuc2Zvcm1dLnJvdGF0aW9uO1xuICAgICAgICAgICAgdGhyZWVUZXh0dXJlLnJlcGVhdCA9IHRoaXNbJHRyYW5zZm9ybV0uc2NhbGU7XG4gICAgICAgICAgICB0aHJlZVRleHR1cmUub2Zmc2V0ID0gdGhpc1skdHJhbnNmb3JtXS5vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblVwZGF0ZSgpO1xuICAgIH1cbn1cbl9hID0gJHRleHR1cmUsIF9iID0gJHRyYW5zZm9ybTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHR1cmUtaW5mby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Texture: () => (/* binding */ Texture)\n/* harmony export */ });\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/image.js\");\n/* harmony import */ var _sampler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampler.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/sampler.js\");\n/* harmony import */ var _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./three-dom-element.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $image = Symbol('image');\nconst $sampler = Symbol('sampler');\n/**\n * Material facade implementation for Three.js materials\n */\nclass Texture extends _three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.ThreeDOMElement {\n    constructor(onUpdate, threeTexture, gltfTexture = null, gltfSampler = null, gltfImage = null) {\n        super(onUpdate, gltfTexture ? gltfTexture : {}, new Set(threeTexture ? [threeTexture] : []));\n        this[$sampler] = new _sampler_js__WEBPACK_IMPORTED_MODULE_1__.Sampler(onUpdate, threeTexture, gltfSampler);\n        this[$image] = new _image_js__WEBPACK_IMPORTED_MODULE_0__.Image(onUpdate, threeTexture, gltfImage);\n    }\n    get name() {\n        return this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name || '';\n    }\n    set name(name) {\n        this[_three_dom_element_js__WEBPACK_IMPORTED_MODULE_2__.$sourceObject].name = name;\n    }\n    get sampler() {\n        return this[$sampler];\n    }\n    get source() {\n        return this[$image];\n    }\n}\n//# sourceMappingURL=texture.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RleHR1cmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDbUM7QUFDSTtBQUNpQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sc0JBQXNCLGtFQUFlO0FBQzVDO0FBQ0Esc0RBQXNEO0FBQ3RELDZCQUE2QixnREFBTztBQUNwQywyQkFBMkIsNENBQUs7QUFDaEM7QUFDQTtBQUNBLG9CQUFvQixnRUFBYTtBQUNqQztBQUNBO0FBQ0EsYUFBYSxnRUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9mZWF0dXJlcy9zY2VuZS1ncmFwaC90ZXh0dXJlLmpzPzc1MTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuL2ltYWdlLmpzJztcbmltcG9ydCB7IFNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIuanMnO1xuaW1wb3J0IHsgJHNvdXJjZU9iamVjdCwgVGhyZWVET01FbGVtZW50IH0gZnJvbSAnLi90aHJlZS1kb20tZWxlbWVudC5qcyc7XG5jb25zdCAkaW1hZ2UgPSBTeW1ib2woJ2ltYWdlJyk7XG5jb25zdCAkc2FtcGxlciA9IFN5bWJvbCgnc2FtcGxlcicpO1xuLyoqXG4gKiBNYXRlcmlhbCBmYWNhZGUgaW1wbGVtZW50YXRpb24gZm9yIFRocmVlLmpzIG1hdGVyaWFsc1xuICovXG5leHBvcnQgY2xhc3MgVGV4dHVyZSBleHRlbmRzIFRocmVlRE9NRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob25VcGRhdGUsIHRocmVlVGV4dHVyZSwgZ2x0ZlRleHR1cmUgPSBudWxsLCBnbHRmU2FtcGxlciA9IG51bGwsIGdsdGZJbWFnZSA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIob25VcGRhdGUsIGdsdGZUZXh0dXJlID8gZ2x0ZlRleHR1cmUgOiB7fSwgbmV3IFNldCh0aHJlZVRleHR1cmUgPyBbdGhyZWVUZXh0dXJlXSA6IFtdKSk7XG4gICAgICAgIHRoaXNbJHNhbXBsZXJdID0gbmV3IFNhbXBsZXIob25VcGRhdGUsIHRocmVlVGV4dHVyZSwgZ2x0ZlNhbXBsZXIpO1xuICAgICAgICB0aGlzWyRpbWFnZV0gPSBuZXcgSW1hZ2Uob25VcGRhdGUsIHRocmVlVGV4dHVyZSwgZ2x0ZkltYWdlKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzb3VyY2VPYmplY3RdLm5hbWUgfHwgJyc7XG4gICAgfVxuICAgIHNldCBuYW1lKG5hbWUpIHtcbiAgICAgICAgdGhpc1skc291cmNlT2JqZWN0XS5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IHNhbXBsZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRzYW1wbGVyXTtcbiAgICB9XG4gICAgZ2V0IHNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJGltYWdlXTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0dXJlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/texture.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $correlatedObjects: () => (/* binding */ $correlatedObjects),\n/* harmony export */   $onUpdate: () => (/* binding */ $onUpdate),\n/* harmony export */   $sourceObject: () => (/* binding */ $sourceObject),\n/* harmony export */   ThreeDOMElement: () => (/* binding */ ThreeDOMElement)\n/* harmony export */ });\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst $correlatedObjects = Symbol('correlatedObjects');\nconst $sourceObject = Symbol('sourceObject');\nconst $onUpdate = Symbol('onUpdate');\n/**\n * A SerializableThreeDOMElement is the common primitive of all scene graph\n * elements that have been facaded in the host execution context. It adds\n * a common interface to these elements in support of convenient\n * serializability.\n */\nclass ThreeDOMElement {\n    constructor(onUpdate, element, correlatedObjects = null) {\n        this[$onUpdate] = onUpdate;\n        this[$sourceObject] = element;\n        this[$correlatedObjects] = correlatedObjects;\n    }\n}\n//# sourceMappingURL=three-dom-element.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RocmVlLWRvbS1lbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL2ZlYXR1cmVzL3NjZW5lLWdyYXBoL3RocmVlLWRvbS1lbGVtZW50LmpzPzM2OGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0ICRjb3JyZWxhdGVkT2JqZWN0cyA9IFN5bWJvbCgnY29ycmVsYXRlZE9iamVjdHMnKTtcbmV4cG9ydCBjb25zdCAkc291cmNlT2JqZWN0ID0gU3ltYm9sKCdzb3VyY2VPYmplY3QnKTtcbmV4cG9ydCBjb25zdCAkb25VcGRhdGUgPSBTeW1ib2woJ29uVXBkYXRlJyk7XG4vKipcbiAqIEEgU2VyaWFsaXphYmxlVGhyZWVET01FbGVtZW50IGlzIHRoZSBjb21tb24gcHJpbWl0aXZlIG9mIGFsbCBzY2VuZSBncmFwaFxuICogZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gZmFjYWRlZCBpbiB0aGUgaG9zdCBleGVjdXRpb24gY29udGV4dC4gSXQgYWRkc1xuICogYSBjb21tb24gaW50ZXJmYWNlIHRvIHRoZXNlIGVsZW1lbnRzIGluIHN1cHBvcnQgb2YgY29udmVuaWVudFxuICogc2VyaWFsaXphYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgVGhyZWVET01FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvblVwZGF0ZSwgZWxlbWVudCwgY29ycmVsYXRlZE9iamVjdHMgPSBudWxsKSB7XG4gICAgICAgIHRoaXNbJG9uVXBkYXRlXSA9IG9uVXBkYXRlO1xuICAgICAgICB0aGlzWyRzb3VyY2VPYmplY3RdID0gZWxlbWVudDtcbiAgICAgICAgdGhpc1skY29ycmVsYXRlZE9iamVjdHNdID0gY29ycmVsYXRlZE9iamVjdHM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyZWUtZG9tLWVsZW1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph/three-dom-element.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/features/staging.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/features/staging.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_ROTATE_DELAY_DEFAULT: () => (/* binding */ AUTO_ROTATE_DELAY_DEFAULT),\n/* harmony export */   StagingMixin: () => (/* binding */ StagingMixin)\n/* harmony export */ });\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../decorators.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/decorators.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n// How much the model will rotate per\n// second in radians:\nconst DEFAULT_ROTATION_SPEED = Math.PI / 32;\nconst AUTO_ROTATE_DELAY_DEFAULT = 3000;\nconst rotationRateIntrinsics = {\n    basis: [(0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_3__.degreesToRadians)((0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_4__.numberNode)(DEFAULT_ROTATION_SPEED, 'rad'))],\n    keywords: { auto: [null] }\n};\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $radiansPerSecond = Symbol('radiansPerSecond');\nconst $syncRotationRate = Symbol('syncRotationRate');\nconst $onCameraChange = Symbol('onCameraChange');\nconst StagingMixin = (ModelViewerElement) => {\n    var _a, _b, _c;\n    class StagingModelViewerElement extends ModelViewerElement {\n        constructor() {\n            super(...arguments);\n            this.autoRotate = false;\n            this.autoRotateDelay = AUTO_ROTATE_DELAY_DEFAULT;\n            this.rotationPerSecond = 'auto';\n            this[_a] = performance.now();\n            this[_b] = 0;\n            this[_c] = (event) => {\n                if (!this.autoRotate) {\n                    return;\n                }\n                if (event.detail.source === 'user-interaction') {\n                    this[$autoRotateStartTime] = performance.now();\n                }\n            };\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.addEventListener('camera-change', this[$onCameraChange]);\n            this[$autoRotateStartTime] = performance.now();\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback();\n            this.removeEventListener('camera-change', this[$onCameraChange]);\n            this[$autoRotateStartTime] = performance.now();\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n            if (changedProperties.has('autoRotate')) {\n                this[$autoRotateStartTime] = performance.now();\n            }\n        }\n        [(_a = $autoRotateStartTime, _b = $radiansPerSecond, $syncRotationRate)](style) {\n            this[$radiansPerSecond] = style[0];\n        }\n        [_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta) {\n            super[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$tick](time, delta);\n            if (!this.autoRotate || !this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$getModelIsVisible]() ||\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$renderer].isPresenting) {\n                return;\n            }\n            const rotationDelta = Math.min(delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n            if (rotationDelta > 0) {\n                this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].yaw = this.turntableRotation +\n                    this[$radiansPerSecond] * rotationDelta * 0.001;\n            }\n        }\n        get turntableRotation() {\n            return this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].yaw;\n        }\n        resetTurntableRotation(theta = 0) {\n            this[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_2__.$scene].yaw = theta;\n        }\n    }\n    _c = $onCameraChange;\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, attribute: 'auto-rotate' })\n    ], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n    __decorate([\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Number, attribute: 'auto-rotate-delay' })\n    ], StagingModelViewerElement.prototype, \"autoRotateDelay\", void 0);\n    __decorate([\n        (0,_decorators_js__WEBPACK_IMPORTED_MODULE_1__.style)({ intrinsics: rotationRateIntrinsics, updateHandler: $syncRotationRate }),\n        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: String, attribute: 'rotation-per-second' })\n    ], StagingModelViewerElement.prototype, \"rotationPerSecond\", void 0);\n    return StagingModelViewerElement;\n};\n//# sourceMappingURL=staging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/features/staging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/model-viewer-base.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $altDefaulted: () => (/* binding */ $altDefaulted),\n/* harmony export */   $announceModelVisibility: () => (/* binding */ $announceModelVisibility),\n/* harmony export */   $ariaLabel: () => (/* binding */ $ariaLabel),\n/* harmony export */   $canvas: () => (/* binding */ $canvas),\n/* harmony export */   $container: () => (/* binding */ $container),\n/* harmony export */   $getLoaded: () => (/* binding */ $getLoaded),\n/* harmony export */   $getModelIsVisible: () => (/* binding */ $getModelIsVisible),\n/* harmony export */   $intersectionObserver: () => (/* binding */ $intersectionObserver),\n/* harmony export */   $isElementInViewport: () => (/* binding */ $isElementInViewport),\n/* harmony export */   $loadedTime: () => (/* binding */ $loadedTime),\n/* harmony export */   $markLoaded: () => (/* binding */ $markLoaded),\n/* harmony export */   $needsRender: () => (/* binding */ $needsRender),\n/* harmony export */   $onModelLoad: () => (/* binding */ $onModelLoad),\n/* harmony export */   $onResize: () => (/* binding */ $onResize),\n/* harmony export */   $progressTracker: () => (/* binding */ $progressTracker),\n/* harmony export */   $renderer: () => (/* binding */ $renderer),\n/* harmony export */   $scene: () => (/* binding */ $scene),\n/* harmony export */   $shouldAttemptPreload: () => (/* binding */ $shouldAttemptPreload),\n/* harmony export */   $statusElement: () => (/* binding */ $statusElement),\n/* harmony export */   $tick: () => (/* binding */ $tick),\n/* harmony export */   $updateSize: () => (/* binding */ $updateSize),\n/* harmony export */   $updateSource: () => (/* binding */ $updateSource),\n/* harmony export */   $updateStatus: () => (/* binding */ $updateStatus),\n/* harmony export */   $userInputElement: () => (/* binding */ $userInputElement),\n/* harmony export */   blobCanvas: () => (/* binding */ blobCanvas),\n/* harmony export */   \"default\": () => (/* binding */ ModelViewerElementBase),\n/* harmony export */   toVector2D: () => (/* binding */ toVector2D),\n/* harmony export */   toVector3D: () => (/* binding */ toVector3D)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/decorators.js */ \"(ssr)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/constants.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./template.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/template.js\");\n/* harmony import */ var _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./three-components/CachingGLTFLoader.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\");\n/* harmony import */ var _three_components_ModelScene_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./three-components/ModelScene.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelScene.js\");\n/* harmony import */ var _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./three-components/Renderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _utilities_data_conversion_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utilities/data-conversion.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/data-conversion.js\");\n/* harmony import */ var _utilities_progress_tracker_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utilities/progress-tracker.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n\n\n\n\n\n\n\n\n\n\nconst CLEAR_MODEL_TIMEOUT_MS = 1000;\nconst FALLBACK_SIZE_UPDATE_THRESHOLD_MS = 50;\nconst ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD = 0;\nconst UNSIZED_MEDIA_WIDTH = 300;\nconst UNSIZED_MEDIA_HEIGHT = 150;\nconst blobCanvas = document.createElement('canvas');\nconst $fallbackResizeHandler = Symbol('fallbackResizeHandler');\nconst $defaultAriaLabel = Symbol('defaultAriaLabel');\nconst $resizeObserver = Symbol('resizeObserver');\nconst $clearModelTimeout = Symbol('clearModelTimeout');\nconst $onContextLost = Symbol('onContextLost');\nconst $loaded = Symbol('loaded');\nconst $status = Symbol('status');\nconst $onFocus = Symbol('onFocus');\nconst $onBlur = Symbol('onBlur');\nconst $updateSize = Symbol('updateSize');\nconst $intersectionObserver = Symbol('intersectionObserver');\nconst $isElementInViewport = Symbol('isElementInViewport');\nconst $announceModelVisibility = Symbol('announceModelVisibility');\nconst $ariaLabel = Symbol('ariaLabel');\nconst $altDefaulted = Symbol('altDefaulted');\nconst $statusElement = Symbol('statusElement');\nconst $updateStatus = Symbol('updateStatus');\nconst $loadedTime = Symbol('loadedTime');\nconst $updateSource = Symbol('updateSource');\nconst $markLoaded = Symbol('markLoaded');\nconst $container = Symbol('container');\nconst $userInputElement = Symbol('input');\nconst $canvas = Symbol('canvas');\nconst $scene = Symbol('scene');\nconst $needsRender = Symbol('needsRender');\nconst $tick = Symbol('tick');\nconst $onModelLoad = Symbol('onModelLoad');\nconst $onResize = Symbol('onResize');\nconst $renderer = Symbol('renderer');\nconst $progressTracker = Symbol('progressTracker');\nconst $getLoaded = Symbol('getLoaded');\nconst $getModelIsVisible = Symbol('getModelIsVisible');\nconst $shouldAttemptPreload = Symbol('shouldAttemptPreload');\nconst toVector3D = (v) => {\n    return {\n        x: v.x,\n        y: v.y,\n        z: v.z,\n        toString() {\n            return `${this.x}m ${this.y}m ${this.z}m`;\n        }\n    };\n};\nconst toVector2D = (v) => {\n    return {\n        u: v.x,\n        v: v.y,\n        toString() {\n            return `${this.u} ${this.v}`;\n        }\n    };\n};\n/**\n * Definition for a basic <model-viewer> element.\n */\nclass ModelViewerElementBase extends lit__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement {\n    /**\n     * Creates a new ModelViewerElement.\n     */\n    constructor() {\n        super();\n        this.alt = null;\n        this.src = null;\n        this.withCredentials = false;\n        /**\n         * Generates a 3D model schema https://schema.org/3DModel associated with\n         * the loaded src and inserts it into the header of the page for search\n         * engines to crawl.\n         */\n        this.generateSchema = false;\n        this[_a] = false;\n        this[_b] = false;\n        this[_c] = 0;\n        this[_d] = '';\n        this[_e] = null;\n        this[_f] = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_8__.debounce)(() => {\n            const boundingRect = this.getBoundingClientRect();\n            this[$updateSize](boundingRect);\n        }, FALLBACK_SIZE_UPDATE_THRESHOLD_MS);\n        this[_g] = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_8__.debounce)((oldVisibility) => {\n            const newVisibility = this.modelIsVisible;\n            if (newVisibility !== oldVisibility) {\n                this.dispatchEvent(new CustomEvent('model-visibility', { detail: { visible: newVisibility } }));\n            }\n        }, ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD);\n        this[_h] = null;\n        this[_j] = null;\n        this[_k] = new _utilities_progress_tracker_js__WEBPACK_IMPORTED_MODULE_10__.ProgressTracker();\n        this[_l] = () => {\n            this[$statusElement].textContent = this[$status];\n        };\n        this[_m] = () => {\n            this[$statusElement].textContent = '';\n        };\n        this[_o] = (event) => {\n            this.dispatchEvent(new CustomEvent('error', { detail: { type: 'webglcontextlost', sourceError: event.sourceEvent } }));\n        };\n        this.attachShadow({ mode: 'open' });\n        const shadowRoot = this.shadowRoot;\n        (0,_template_js__WEBPACK_IMPORTED_MODULE_4__.makeTemplate)(shadowRoot);\n        this[$container] = shadowRoot.querySelector('.container');\n        this[$userInputElement] =\n            shadowRoot.querySelector('.userInput');\n        this[$canvas] = shadowRoot.querySelector('canvas');\n        this[$statusElement] =\n            shadowRoot.querySelector('#status');\n        this[$defaultAriaLabel] =\n            this[$userInputElement].getAttribute('aria-label');\n        // Because of potential race conditions related to invoking the constructor\n        // we only use the bounding rect to set the initial size if the element is\n        // already connected to the document:\n        let width, height;\n        if (this.isConnected) {\n            const rect = this.getBoundingClientRect();\n            width = rect.width;\n            height = rect.height;\n        }\n        else {\n            width = UNSIZED_MEDIA_WIDTH;\n            height = UNSIZED_MEDIA_HEIGHT;\n        }\n        // Create the underlying ModelScene.\n        this[$scene] =\n            new _three_components_ModelScene_js__WEBPACK_IMPORTED_MODULE_6__.ModelScene({ canvas: this[$canvas], element: this, width, height });\n        // Update initial size on microtask timing so that subclasses have a\n        // chance to initialize\n        Promise.resolve().then(() => {\n            this[$updateSize](this.getBoundingClientRect());\n        });\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_RESIZE_OBSERVER) {\n            // Set up a resize observer so we can scale our canvas\n            // if our <model-viewer> changes\n            this[$resizeObserver] =\n                new ResizeObserver((entries) => {\n                    // Don't resize anything if in AR mode; otherwise the canvas\n                    // scaling to fullscreen on entering AR will clobber the flat/2d\n                    // dimensions of the element.\n                    if (this[$renderer].isPresenting) {\n                        return;\n                    }\n                    for (let entry of entries) {\n                        if (entry.target === this) {\n                            this[$updateSize](entry.contentRect);\n                        }\n                    }\n                });\n        }\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_INTERSECTION_OBSERVER) {\n            this[$intersectionObserver] = new IntersectionObserver(entries => {\n                for (let entry of entries) {\n                    if (entry.target === this) {\n                        const oldVisibility = this.modelIsVisible;\n                        this[$isElementInViewport] = entry.isIntersecting;\n                        this[$announceModelVisibility](oldVisibility);\n                        if (this[$isElementInViewport] && !this.loaded) {\n                            this[$updateSource]();\n                        }\n                    }\n                }\n            }, {\n                root: null,\n                // We used to have margin here, but it was causing animated models below\n                // the fold to steal the frame budget. Weirder still, it would also\n                // cause input events to be swallowed, sometimes for seconds on the\n                // model above the fold, but only when the animated model was completely\n                // below. Setting this margin to zero fixed it.\n                rootMargin: '0px',\n                // With zero threshold, an element adjacent to but not intersecting the\n                // viewport will be reported as intersecting, which will cause\n                // unnecessary rendering. Any slight positive threshold alleviates this.\n                threshold: 0.00001,\n            });\n        }\n        else {\n            // If there is no intersection observer, then all models should be visible\n            // at all times:\n            this[$isElementInViewport] = true;\n        }\n    }\n    static get is() {\n        return 'model-viewer';\n    }\n    /** @export */\n    static set modelCacheSize(value) {\n        _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.CachingGLTFLoader[_three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.$evictionPolicy].evictionThreshold = value;\n    }\n    /** @export */\n    static get modelCacheSize() {\n        return _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.CachingGLTFLoader[_three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.$evictionPolicy].evictionThreshold;\n    }\n    /** @export */\n    static set minimumRenderScale(value) {\n        if (value > 1) {\n            console.warn('<model-viewer> minimumRenderScale has been clamped to a maximum value of 1.');\n        }\n        if (value <= 0) {\n            console.warn('<model-viewer> minimumRenderScale has been clamped to a minimum value of 0.25.');\n        }\n        _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__.Renderer.singleton.minScale = value;\n    }\n    /** @export */\n    static get minimumRenderScale() {\n        return _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__.Renderer.singleton.minScale;\n    }\n    /** @export */\n    get loaded() {\n        return this[$getLoaded]();\n    }\n    get [(_a = $isElementInViewport, _b = $loaded, _c = $loadedTime, _d = $status, _e = $clearModelTimeout, _f = $fallbackResizeHandler, _g = $announceModelVisibility, _h = $resizeObserver, _j = $intersectionObserver, _k = $progressTracker, $renderer)]() {\n        return _three_components_Renderer_js__WEBPACK_IMPORTED_MODULE_7__.Renderer.singleton;\n    }\n    /** @export */\n    get modelIsVisible() {\n        return this[$getModelIsVisible]();\n    }\n    connectedCallback() {\n        super.connectedCallback && super.connectedCallback();\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_RESIZE_OBSERVER) {\n            this[$resizeObserver].observe(this);\n        }\n        else {\n            self.addEventListener('resize', this[$fallbackResizeHandler]);\n        }\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_INTERSECTION_OBSERVER) {\n            this[$intersectionObserver].observe(this);\n        }\n        this.addEventListener('focus', this[$onFocus]);\n        this.addEventListener('blur', this[$onBlur]);\n        const renderer = this[$renderer];\n        renderer.addEventListener('contextlost', this[$onContextLost]);\n        renderer.registerScene(this[$scene]);\n        if (this[$clearModelTimeout] != null) {\n            self.clearTimeout(this[$clearModelTimeout]);\n            this[$clearModelTimeout] = null;\n            // Force an update in case the model has been evicted from our GLTF cache\n            // @see https://lit-element.polymer-project.org/guide/lifecycle#requestupdate\n            this.requestUpdate('src', null);\n        }\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback && super.disconnectedCallback();\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_RESIZE_OBSERVER) {\n            this[$resizeObserver].unobserve(this);\n        }\n        else {\n            self.removeEventListener('resize', this[$fallbackResizeHandler]);\n        }\n        if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.HAS_INTERSECTION_OBSERVER) {\n            this[$intersectionObserver].unobserve(this);\n        }\n        this.removeEventListener('focus', this[$onFocus]);\n        this.removeEventListener('blur', this[$onBlur]);\n        const renderer = this[$renderer];\n        renderer.removeEventListener('contextlost', this[$onContextLost]);\n        renderer.unregisterScene(this[$scene]);\n        this[$clearModelTimeout] = self.setTimeout(() => {\n            this[$scene].dispose();\n            this[$clearModelTimeout] = null;\n        }, CLEAR_MODEL_TIMEOUT_MS);\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        // NOTE(cdata): If a property changes from values A -> B -> A in the space\n        // of a microtask, LitElement/UpdatingElement will notify of a change even\n        // though the value has effectively not changed, so we need to check to make\n        // sure that the value has actually changed before changing the loaded flag.\n        if (changedProperties.has('src')) {\n            if (this.src == null) {\n                this[$loaded] = false;\n                this[$loadedTime] = 0;\n                this[$scene].reset();\n            }\n            else if (this.src !== this[$scene].url) {\n                this[$loaded] = false;\n                this[$loadedTime] = 0;\n                this[$updateSource]();\n            }\n        }\n        if (changedProperties.has('alt')) {\n            this[$userInputElement].setAttribute('aria-label', this[$ariaLabel]);\n        }\n        if (changedProperties.has('withCredentials')) {\n            _three_components_CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.CachingGLTFLoader.withCredentials = this.withCredentials;\n        }\n        if (changedProperties.has('generateSchema')) {\n            if (this.generateSchema) {\n                this[$scene].updateSchema(this.src);\n            }\n            else {\n                this[$scene].updateSchema(null);\n            }\n        }\n    }\n    /** @export */\n    toDataURL(type, encoderOptions) {\n        return this[$renderer]\n            .displayCanvas(this[$scene])\n            .toDataURL(type, encoderOptions);\n    }\n    /** @export */\n    async toBlob(options) {\n        const mimeType = options ? options.mimeType : undefined;\n        const qualityArgument = options ? options.qualityArgument : undefined;\n        const useIdealAspect = options ? options.idealAspect : undefined;\n        const { width, height, idealAspect, aspect } = this[$scene];\n        const { dpr, scaleFactor } = this[$renderer];\n        let outputWidth = width * scaleFactor * dpr;\n        let outputHeight = height * scaleFactor * dpr;\n        let offsetX = 0;\n        let offsetY = 0;\n        if (useIdealAspect === true) {\n            if (idealAspect > aspect) {\n                const oldHeight = outputHeight;\n                outputHeight = Math.round(outputWidth / idealAspect);\n                offsetY = (oldHeight - outputHeight) / 2;\n            }\n            else {\n                const oldWidth = outputWidth;\n                outputWidth = Math.round(outputHeight * idealAspect);\n                offsetX = (oldWidth - outputWidth) / 2;\n            }\n        }\n        blobCanvas.width = outputWidth;\n        blobCanvas.height = outputHeight;\n        try {\n            return new Promise(async (resolve, reject) => {\n                blobCanvas.getContext('2d').drawImage(this[$renderer].displayCanvas(this[$scene]), offsetX, offsetY, outputWidth, outputHeight, 0, 0, outputWidth, outputHeight);\n                if (blobCanvas.msToBlob) {\n                    // NOTE: msToBlob only returns image/png\n                    // so ensure mimeType is not specified (defaults to image/png)\n                    // or is image/png, otherwise fallback to using toDataURL on IE.\n                    if (!mimeType || mimeType === 'image/png') {\n                        return resolve(blobCanvas.msToBlob());\n                    }\n                }\n                if (!blobCanvas.toBlob) {\n                    return resolve(await (0,_utilities_data_conversion_js__WEBPACK_IMPORTED_MODULE_9__.dataUrlToBlob)(blobCanvas.toDataURL(mimeType, qualityArgument)));\n                }\n                blobCanvas.toBlob((blob) => {\n                    if (!blob) {\n                        return reject(new Error('Unable to retrieve canvas blob'));\n                    }\n                    resolve(blob);\n                }, mimeType, qualityArgument);\n            });\n        }\n        finally {\n            this[$updateSize]({ width, height });\n        }\n        ;\n    }\n    registerRenderer(renderer) {\n        this[$scene].externalRenderer = renderer;\n    }\n    unregisterRenderer() {\n        this[$scene].externalRenderer = null;\n    }\n    get [$ariaLabel]() {\n        return this[$altDefaulted];\n    }\n    get [$altDefaulted]() {\n        return (this.alt == null || this.alt === 'null') ? this[$defaultAriaLabel] :\n            this.alt;\n    }\n    // NOTE(cdata): Although this may seem extremely redundant, it is required in\n    // order to support overloading when TypeScript is compiled to ES5\n    // @see https://github.com/Polymer/lit-element/pull/745\n    // @see https://github.com/microsoft/TypeScript/issues/338\n    [$getLoaded]() {\n        return this[$loaded];\n    }\n    // @see [$getLoaded]\n    [$getModelIsVisible]() {\n        return this.loaded && this[$isElementInViewport];\n    }\n    [$shouldAttemptPreload]() {\n        return !!this.src && this[$isElementInViewport];\n    }\n    /**\n     * Called on initialization and when the resize observer fires.\n     */\n    [$updateSize]({ width, height }) {\n        this[$container].style.width = `${width}px`;\n        this[$container].style.height = `${height}px`;\n        this[$onResize]({ width: parseFloat(width), height: parseFloat(height) });\n    }\n    [$tick](_time, _delta) {\n    }\n    [$markLoaded]() {\n        if (this[$loaded]) {\n            return;\n        }\n        this[$loaded] = true;\n        this[$loadedTime] = performance.now();\n    }\n    [$needsRender]() {\n        this[$scene].queueRender();\n    }\n    [$onModelLoad]() {\n    }\n    [$updateStatus](status) {\n        this[$status] = status;\n        const rootNode = this.getRootNode();\n        // Only change the aria-label if <model-viewer> is currently focused:\n        if (rootNode != null && rootNode.activeElement === this &&\n            this[$statusElement].textContent != status) {\n            this[$statusElement].textContent = status;\n        }\n    }\n    [(_l = $onFocus, _m = $onBlur, $onResize)](e) {\n        this[$scene].setSize(e.width, e.height);\n    }\n    /**\n     * Parses the element for an appropriate source URL and\n     * sets the views to use the new model based.\n     */\n    async [(_o = $onContextLost, $updateSource)]() {\n        const scene = this[$scene];\n        if (this.loaded || !this[$shouldAttemptPreload]() ||\n            this.src === scene.url) {\n            return;\n        }\n        if (this.generateSchema) {\n            scene.updateSchema(this.src);\n        }\n        this[$updateStatus]('Loading');\n        // If we are loading a new model, we need to stop the animation of\n        // the current one (if any is playing). Otherwise, we might lose\n        // the reference to the scene root and running actions start to\n        // throw exceptions and/or behave in unexpected ways:\n        scene.stopAnimation();\n        const updateSourceProgress = this[$progressTracker].beginActivity();\n        const source = this.src;\n        try {\n            const srcUpdated = scene.setSource(source, (progress) => updateSourceProgress((0,_utilities_js__WEBPACK_IMPORTED_MODULE_8__.clamp)(progress, 0, 1) * 0.95));\n            const envUpdated = this[_features_environment_js__WEBPACK_IMPORTED_MODULE_3__.$updateEnvironment]();\n            await Promise.all([srcUpdated, envUpdated]);\n            this[$markLoaded]();\n            this[$onModelLoad]();\n            // Wait for shaders to compile and pixels to be drawn.\n            await new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    requestAnimationFrame(() => {\n                        this.dispatchEvent(new CustomEvent('load', { detail: { url: source } }));\n                        resolve();\n                    });\n                });\n            });\n        }\n        catch (error) {\n            this.dispatchEvent(new CustomEvent('error', { detail: { type: 'loadfailure', sourceError: error } }));\n        }\n        finally {\n            updateSourceProgress(1.0);\n        }\n    }\n}\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: String })\n], ModelViewerElementBase.prototype, \"alt\", void 0);\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: String })\n], ModelViewerElementBase.prototype, \"src\", void 0);\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'with-credentials' })\n], ModelViewerElementBase.prototype, \"withCredentials\", void 0);\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'generate-schema' })\n], ModelViewerElementBase.prototype, \"generateSchema\", void 0);\n//# sourceMappingURL=model-viewer-base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/model-viewer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/model-viewer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelViewerElement: () => (/* binding */ ModelViewerElement)\n/* harmony export */ });\n/* harmony import */ var _features_animation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./features/animation.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/animation.js\");\n/* harmony import */ var _features_annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/annotation.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/annotation.js\");\n/* harmony import */ var _features_ar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./features/ar.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/ar.js\");\n/* harmony import */ var _features_controls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/controls.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _features_loading_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features/loading.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/loading.js\");\n/* harmony import */ var _features_scene_graph_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./features/scene-graph.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js\");\n/* harmony import */ var _features_staging_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./features/staging.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/staging.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_focus_visible_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utilities/focus-visible.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/focus-visible.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n// Uncomment these lines to export PMREM textures in Glitch:\n// export {default as TextureUtils} from './three-components/TextureUtils';\n// export * from 'three';\nconst ModelViewerElement = (0,_features_annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationMixin)((0,_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_6__.SceneGraphMixin)((0,_features_staging_js__WEBPACK_IMPORTED_MODULE_7__.StagingMixin)((0,_features_environment_js__WEBPACK_IMPORTED_MODULE_4__.EnvironmentMixin)((0,_features_controls_js__WEBPACK_IMPORTED_MODULE_3__.ControlsMixin)((0,_features_ar_js__WEBPACK_IMPORTED_MODULE_2__.ARMixin)((0,_features_loading_js__WEBPACK_IMPORTED_MODULE_5__.LoadingMixin)((0,_features_animation_js__WEBPACK_IMPORTED_MODULE_0__.AnimationMixin)((0,_utilities_focus_visible_js__WEBPACK_IMPORTED_MODULE_9__.FocusVisiblePolyfillMixin)(_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])))))))));\ncustomElements.define('model-viewer', ModelViewerElement);\n//# sourceMappingURL=model-viewer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL21vZGVsLXZpZXdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQ7QUFDRTtBQUNoQjtBQUNZO0FBQ007QUFDUjtBQUNPO0FBQ1A7QUFDTztBQUNhO0FBQ3pFO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEM7QUFDTywyQkFBMkIsd0VBQWUsQ0FBQyx5RUFBZSxDQUFDLGtFQUFZLENBQUMsMEVBQWdCLENBQUMsb0VBQWEsQ0FBQyx3REFBTyxDQUFDLGtFQUFZLENBQUMsc0VBQWMsQ0FBQyxzRkFBeUIsQ0FBQyw2REFBc0I7QUFDbE07QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL21vZGVsLXZpZXdlci5qcz8zOGI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEFuaW1hdGlvbk1peGluIH0gZnJvbSAnLi9mZWF0dXJlcy9hbmltYXRpb24uanMnO1xuaW1wb3J0IHsgQW5ub3RhdGlvbk1peGluIH0gZnJvbSAnLi9mZWF0dXJlcy9hbm5vdGF0aW9uLmpzJztcbmltcG9ydCB7IEFSTWl4aW4gfSBmcm9tICcuL2ZlYXR1cmVzL2FyLmpzJztcbmltcG9ydCB7IENvbnRyb2xzTWl4aW4gfSBmcm9tICcuL2ZlYXR1cmVzL2NvbnRyb2xzLmpzJztcbmltcG9ydCB7IEVudmlyb25tZW50TWl4aW4gfSBmcm9tICcuL2ZlYXR1cmVzL2Vudmlyb25tZW50LmpzJztcbmltcG9ydCB7IExvYWRpbmdNaXhpbiB9IGZyb20gJy4vZmVhdHVyZXMvbG9hZGluZy5qcyc7XG5pbXBvcnQgeyBTY2VuZUdyYXBoTWl4aW4gfSBmcm9tICcuL2ZlYXR1cmVzL3NjZW5lLWdyYXBoLmpzJztcbmltcG9ydCB7IFN0YWdpbmdNaXhpbiB9IGZyb20gJy4vZmVhdHVyZXMvc3RhZ2luZy5qcyc7XG5pbXBvcnQgTW9kZWxWaWV3ZXJFbGVtZW50QmFzZSBmcm9tICcuL21vZGVsLXZpZXdlci1iYXNlLmpzJztcbmltcG9ydCB7IEZvY3VzVmlzaWJsZVBvbHlmaWxsTWl4aW4gfSBmcm9tICcuL3V0aWxpdGllcy9mb2N1cy12aXNpYmxlLmpzJztcbi8vIFVuY29tbWVudCB0aGVzZSBsaW5lcyB0byBleHBvcnQgUE1SRU0gdGV4dHVyZXMgaW4gR2xpdGNoOlxuLy8gZXhwb3J0IHtkZWZhdWx0IGFzIFRleHR1cmVVdGlsc30gZnJvbSAnLi90aHJlZS1jb21wb25lbnRzL1RleHR1cmVVdGlscyc7XG4vLyBleHBvcnQgKiBmcm9tICd0aHJlZSc7XG5leHBvcnQgY29uc3QgTW9kZWxWaWV3ZXJFbGVtZW50ID0gQW5ub3RhdGlvbk1peGluKFNjZW5lR3JhcGhNaXhpbihTdGFnaW5nTWl4aW4oRW52aXJvbm1lbnRNaXhpbihDb250cm9sc01peGluKEFSTWl4aW4oTG9hZGluZ01peGluKEFuaW1hdGlvbk1peGluKEZvY3VzVmlzaWJsZVBvbHlmaWxsTWl4aW4oTW9kZWxWaWV3ZXJFbGVtZW50QmFzZSkpKSkpKSkpKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW9kZWwtdmlld2VyJywgTW9kZWxWaWV3ZXJFbGVtZW50KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVsLXZpZXdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/model-viewer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/conversions.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   degreesToRadians: () => (/* binding */ degreesToRadians),\n/* harmony export */   lengthToBaseMeters: () => (/* binding */ lengthToBaseMeters),\n/* harmony export */   normalizeUnit: () => (/* binding */ normalizeUnit),\n/* harmony export */   radiansToDegrees: () => (/* binding */ radiansToDegrees)\n/* harmony export */ });\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ensures that a given number is expressed in radians. If the number is already\n * in radians, does nothing. If the value is in degrees, converts it to radians.\n * If the value has no specified unit, the unit is assumed to be radians. If the\n * value is not in radians or degrees, the value is resolved as 0 radians.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nconst degreesToRadians = (numberNode, fallbackRadianValue = 0) => {\n    let { number, unit } = numberNode;\n    if (!isFinite(number)) {\n        number = fallbackRadianValue;\n        unit = 'rad';\n    }\n    else if (numberNode.unit === 'rad' || numberNode.unit == null) {\n        return numberNode;\n    }\n    const valueIsDegrees = unit === 'deg' && number != null;\n    const value = valueIsDegrees ? number : 0;\n    const radians = value * Math.PI / 180;\n    return { type: 'number', number: radians, unit: 'rad' };\n};\n/**\n * Ensures that a given number is expressed in degrees. If the number is already\n * in degrees, does nothing. If the value is in radians or has no specified\n * unit, converts it to degrees. If the value is not in radians or degrees, the\n * value is resolved as 0 degrees.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nconst radiansToDegrees = (numberNode, fallbackDegreeValue = 0) => {\n    let { number, unit } = numberNode;\n    if (!isFinite(number)) {\n        number = fallbackDegreeValue;\n        unit = 'deg';\n    }\n    else if (numberNode.unit === 'deg') {\n        return numberNode;\n    }\n    const valueIsRadians = (unit === null || unit === 'rad') && number != null;\n    const value = valueIsRadians ? number : 0;\n    const degrees = value * 180 / Math.PI;\n    return { type: 'number', number: degrees, unit: 'deg' };\n};\n/**\n * Converts a given length to meters. Currently supported input units are\n * meters, centimeters and millimeters.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nconst lengthToBaseMeters = (numberNode, fallbackMeterValue = 0) => {\n    let { number, unit } = numberNode;\n    if (!isFinite(number)) {\n        number = fallbackMeterValue;\n        unit = 'm';\n    }\n    else if (numberNode.unit === 'm') {\n        return numberNode;\n    }\n    let scale;\n    switch (unit) {\n        default:\n            scale = 1;\n            break;\n        case 'cm':\n            scale = 1 / 100;\n            break;\n        case 'mm':\n            scale = 1 / 1000;\n            break;\n    }\n    const value = scale * number;\n    return { type: 'number', number: value, unit: 'm' };\n};\n/**\n * Normalizes the unit of a given input number so that it is expressed in a\n * preferred unit. For length nodes, the return value will be expressed in\n * meters. For angle nodes, the return value will be expressed in radians.\n *\n * Also takes a fallback number that is used when the number value is not a\n * valid number or when the unit of the given number cannot be normalized.\n */\nconst normalizeUnit = (() => {\n    const identity = (node) => node;\n    const unitNormalizers = {\n        'rad': identity,\n        'deg': degreesToRadians,\n        'm': identity,\n        'mm': lengthToBaseMeters,\n        'cm': lengthToBaseMeters\n    };\n    return (node, fallback = _parsers__WEBPACK_IMPORTED_MODULE_0__.ZERO) => {\n        if (!isFinite(node.number)) {\n            node.number = fallback.number;\n            node.unit = fallback.unit;\n        }\n        const { unit } = node;\n        if (unit == null) {\n            return node;\n        }\n        const normalize = unitNormalizers[unit];\n        if (normalize == null) {\n            return fallback;\n        }\n        return normalize(node);\n    };\n})();\n//# sourceMappingURL=conversions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3N0eWxlcy9jb252ZXJzaW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFVBQVUsZUFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMENBQUk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi9zdHlsZXMvY29udmVyc2lvbnMuanM/NTNlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBaRVJPIH0gZnJvbSAnLi9wYXJzZXJzJztcbi8qKlxuICogRW5zdXJlcyB0aGF0IGEgZ2l2ZW4gbnVtYmVyIGlzIGV4cHJlc3NlZCBpbiByYWRpYW5zLiBJZiB0aGUgbnVtYmVyIGlzIGFscmVhZHlcbiAqIGluIHJhZGlhbnMsIGRvZXMgbm90aGluZy4gSWYgdGhlIHZhbHVlIGlzIGluIGRlZ3JlZXMsIGNvbnZlcnRzIGl0IHRvIHJhZGlhbnMuXG4gKiBJZiB0aGUgdmFsdWUgaGFzIG5vIHNwZWNpZmllZCB1bml0LCB0aGUgdW5pdCBpcyBhc3N1bWVkIHRvIGJlIHJhZGlhbnMuIElmIHRoZVxuICogdmFsdWUgaXMgbm90IGluIHJhZGlhbnMgb3IgZGVncmVlcywgdGhlIHZhbHVlIGlzIHJlc29sdmVkIGFzIDAgcmFkaWFucy5cbiAqXG4gKiBBbHNvIGFjY2VwdHMgYSBzZWNvbmQgYXJndW1lbnQgdGhhdCBpcyBhIGRlZmF1bHQgdmFsdWUgdG8gdXNlIGlmIHRoZSBpbnB1dFxuICogbnVtYmVyTm9kZSBudW1iZXIgaXMgTmFOIG9yIEluZmluaXR5LlxuICovXG5leHBvcnQgY29uc3QgZGVncmVlc1RvUmFkaWFucyA9IChudW1iZXJOb2RlLCBmYWxsYmFja1JhZGlhblZhbHVlID0gMCkgPT4ge1xuICAgIGxldCB7IG51bWJlciwgdW5pdCB9ID0gbnVtYmVyTm9kZTtcbiAgICBpZiAoIWlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgbnVtYmVyID0gZmFsbGJhY2tSYWRpYW5WYWx1ZTtcbiAgICAgICAgdW5pdCA9ICdyYWQnO1xuICAgIH1cbiAgICBlbHNlIGlmIChudW1iZXJOb2RlLnVuaXQgPT09ICdyYWQnIHx8IG51bWJlck5vZGUudW5pdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudW1iZXJOb2RlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZUlzRGVncmVlcyA9IHVuaXQgPT09ICdkZWcnICYmIG51bWJlciAhPSBudWxsO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVJc0RlZ3JlZXMgPyBudW1iZXIgOiAwO1xuICAgIGNvbnN0IHJhZGlhbnMgPSB2YWx1ZSAqIE1hdGguUEkgLyAxODA7XG4gICAgcmV0dXJuIHsgdHlwZTogJ251bWJlcicsIG51bWJlcjogcmFkaWFucywgdW5pdDogJ3JhZCcgfTtcbn07XG4vKipcbiAqIEVuc3VyZXMgdGhhdCBhIGdpdmVuIG51bWJlciBpcyBleHByZXNzZWQgaW4gZGVncmVlcy4gSWYgdGhlIG51bWJlciBpcyBhbHJlYWR5XG4gKiBpbiBkZWdyZWVzLCBkb2VzIG5vdGhpbmcuIElmIHRoZSB2YWx1ZSBpcyBpbiByYWRpYW5zIG9yIGhhcyBubyBzcGVjaWZpZWRcbiAqIHVuaXQsIGNvbnZlcnRzIGl0IHRvIGRlZ3JlZXMuIElmIHRoZSB2YWx1ZSBpcyBub3QgaW4gcmFkaWFucyBvciBkZWdyZWVzLCB0aGVcbiAqIHZhbHVlIGlzIHJlc29sdmVkIGFzIDAgZGVncmVlcy5cbiAqXG4gKiBBbHNvIGFjY2VwdHMgYSBzZWNvbmQgYXJndW1lbnQgdGhhdCBpcyBhIGRlZmF1bHQgdmFsdWUgdG8gdXNlIGlmIHRoZSBpbnB1dFxuICogbnVtYmVyTm9kZSBudW1iZXIgaXMgTmFOIG9yIEluZmluaXR5LlxuICovXG5leHBvcnQgY29uc3QgcmFkaWFuc1RvRGVncmVlcyA9IChudW1iZXJOb2RlLCBmYWxsYmFja0RlZ3JlZVZhbHVlID0gMCkgPT4ge1xuICAgIGxldCB7IG51bWJlciwgdW5pdCB9ID0gbnVtYmVyTm9kZTtcbiAgICBpZiAoIWlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgbnVtYmVyID0gZmFsbGJhY2tEZWdyZWVWYWx1ZTtcbiAgICAgICAgdW5pdCA9ICdkZWcnO1xuICAgIH1cbiAgICBlbHNlIGlmIChudW1iZXJOb2RlLnVuaXQgPT09ICdkZWcnKSB7XG4gICAgICAgIHJldHVybiBudW1iZXJOb2RlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZUlzUmFkaWFucyA9ICh1bml0ID09PSBudWxsIHx8IHVuaXQgPT09ICdyYWQnKSAmJiBudW1iZXIgIT0gbnVsbDtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlSXNSYWRpYW5zID8gbnVtYmVyIDogMDtcbiAgICBjb25zdCBkZWdyZWVzID0gdmFsdWUgKiAxODAgLyBNYXRoLlBJO1xuICAgIHJldHVybiB7IHR5cGU6ICdudW1iZXInLCBudW1iZXI6IGRlZ3JlZXMsIHVuaXQ6ICdkZWcnIH07XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIGdpdmVuIGxlbmd0aCB0byBtZXRlcnMuIEN1cnJlbnRseSBzdXBwb3J0ZWQgaW5wdXQgdW5pdHMgYXJlXG4gKiBtZXRlcnMsIGNlbnRpbWV0ZXJzIGFuZCBtaWxsaW1ldGVycy5cbiAqXG4gKiBBbHNvIGFjY2VwdHMgYSBzZWNvbmQgYXJndW1lbnQgdGhhdCBpcyBhIGRlZmF1bHQgdmFsdWUgdG8gdXNlIGlmIHRoZSBpbnB1dFxuICogbnVtYmVyTm9kZSBudW1iZXIgaXMgTmFOIG9yIEluZmluaXR5LlxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoVG9CYXNlTWV0ZXJzID0gKG51bWJlck5vZGUsIGZhbGxiYWNrTWV0ZXJWYWx1ZSA9IDApID0+IHtcbiAgICBsZXQgeyBudW1iZXIsIHVuaXQgfSA9IG51bWJlck5vZGU7XG4gICAgaWYgKCFpc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIG51bWJlciA9IGZhbGxiYWNrTWV0ZXJWYWx1ZTtcbiAgICAgICAgdW5pdCA9ICdtJztcbiAgICB9XG4gICAgZWxzZSBpZiAobnVtYmVyTm9kZS51bml0ID09PSAnbScpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlck5vZGU7XG4gICAgfVxuICAgIGxldCBzY2FsZTtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHNjYWxlID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjbSc6XG4gICAgICAgICAgICBzY2FsZSA9IDEgLyAxMDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgc2NhbGUgPSAxIC8gMTAwMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNjYWxlICogbnVtYmVyO1xuICAgIHJldHVybiB7IHR5cGU6ICdudW1iZXInLCBudW1iZXI6IHZhbHVlLCB1bml0OiAnbScgfTtcbn07XG4vKipcbiAqIE5vcm1hbGl6ZXMgdGhlIHVuaXQgb2YgYSBnaXZlbiBpbnB1dCBudW1iZXIgc28gdGhhdCBpdCBpcyBleHByZXNzZWQgaW4gYVxuICogcHJlZmVycmVkIHVuaXQuIEZvciBsZW5ndGggbm9kZXMsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSBleHByZXNzZWQgaW5cbiAqIG1ldGVycy4gRm9yIGFuZ2xlIG5vZGVzLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgZXhwcmVzc2VkIGluIHJhZGlhbnMuXG4gKlxuICogQWxzbyB0YWtlcyBhIGZhbGxiYWNrIG51bWJlciB0aGF0IGlzIHVzZWQgd2hlbiB0aGUgbnVtYmVyIHZhbHVlIGlzIG5vdCBhXG4gKiB2YWxpZCBudW1iZXIgb3Igd2hlbiB0aGUgdW5pdCBvZiB0aGUgZ2l2ZW4gbnVtYmVyIGNhbm5vdCBiZSBub3JtYWxpemVkLlxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVW5pdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgaWRlbnRpdHkgPSAobm9kZSkgPT4gbm9kZTtcbiAgICBjb25zdCB1bml0Tm9ybWFsaXplcnMgPSB7XG4gICAgICAgICdyYWQnOiBpZGVudGl0eSxcbiAgICAgICAgJ2RlZyc6IGRlZ3JlZXNUb1JhZGlhbnMsXG4gICAgICAgICdtJzogaWRlbnRpdHksXG4gICAgICAgICdtbSc6IGxlbmd0aFRvQmFzZU1ldGVycyxcbiAgICAgICAgJ2NtJzogbGVuZ3RoVG9CYXNlTWV0ZXJzXG4gICAgfTtcbiAgICByZXR1cm4gKG5vZGUsIGZhbGxiYWNrID0gWkVSTykgPT4ge1xuICAgICAgICBpZiAoIWlzRmluaXRlKG5vZGUubnVtYmVyKSkge1xuICAgICAgICAgICAgbm9kZS5udW1iZXIgPSBmYWxsYmFjay5udW1iZXI7XG4gICAgICAgICAgICBub2RlLnVuaXQgPSBmYWxsYmFjay51bml0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdW5pdCB9ID0gbm9kZTtcbiAgICAgICAgaWYgKHVuaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9ybWFsaXplID0gdW5pdE5vcm1hbGl6ZXJzW3VuaXRdO1xuICAgICAgICBpZiAobm9ybWFsaXplID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybWFsaXplKG5vZGUpO1xuICAgIH07XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udmVyc2lvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/deserializers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/deserializers.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enumerationDeserializer: () => (/* binding */ enumerationDeserializer)\n/* harmony export */ });\n/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\nconst enumerationDeserializer = (allowedNames) => (valueString) => {\n    try {\n        const expressions = (0,_parsers_js__WEBPACK_IMPORTED_MODULE_0__.parseExpressions)(valueString);\n        const names = (expressions.length ? expressions[0].terms : [])\n            .filter((valueNode) => valueNode && valueNode.type === 'ident')\n            .map(valueNode => valueNode.value)\n            .filter(name => allowedNames.indexOf(name) > -1);\n        // NOTE(cdata): IE11 does not support constructing a Set directly from\n        // an iterable, so we need to manually add all the items:\n        const result = new Set();\n        for (const name of names) {\n            result.add(name);\n        }\n        return result;\n    }\n    catch (_error) {\n    }\n    return new Set();\n};\n//# sourceMappingURL=deserializers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3N0eWxlcy9kZXNlcmlhbGl6ZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDRCQUE0Qiw2REFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3N0eWxlcy9kZXNlcmlhbGl6ZXJzLmpzP2I2N2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgcGFyc2VFeHByZXNzaW9ucyB9IGZyb20gJy4vcGFyc2Vycy5qcyc7XG4vKipcbiAqIEZvciBvdXIgcHVycG9zZXMsIGFuIGVudW1lcmF0aW9uIGlzIGEgZml4ZWQgc2V0IG9mIENTUy1leHByZXNzaW9uLWNvbXBhdGlibGVcbiAqIG5hbWVzLiBXaGVuIHNlcmlhbGl6ZWQsIGEgc2VsZWN0ZWQgc3Vic2V0IG9mIHRoZSBtZW1iZXJzIG1heSBiZSBzcGVjaWZpZWQgYXNcbiAqIHdoaXRlc3BhY2Utc2VwYXJhdGVkIHN0cmluZ3MuIEFuIGVudW1lcmF0aW9uIGRlc2VyaWFsaXplciBpcyBhIGZ1bmN0aW9uIHRoYXRcbiAqIHBhcnNlcyBhIHNlcmlhbGl6ZWQgc3Vic2V0IG9mIGFuIGVudW1lcmF0aW9uIGFuZCByZXR1cm5zIGFueSBtZW1iZXJzIHRoYXQgYXJlXG4gKiBmb3VuZCBhcyBhIFNldC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgd2lsbCBwcm9kdWNlIGEgZGVzZXJpYWxpemVyIGZvciB0aGUgZGF5cyBvZiB0aGVcbiAqIHdlZWs6XG4gKlxuICogY29uc3QgZGVzZXJpYWxpemVEYXlzT2ZUaGVXZWVrID0gZW51bWVyYXRpb25EZXNlcmlhbGl6ZXIoW1xuICogICAnTW9uZGF5JyxcbiAqICAgJ1R1ZXNkYXknLFxuICogICAnV2VkbmVzZGF5JyxcbiAqICAgJ1RodXJzZGF5JyxcbiAqICAgJ0ZyaWRheScsXG4gKiAgICdTYXR1cmRheScsXG4gKiAgICdTdW5kYXknXG4gKiBdKTtcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW1lcmF0aW9uRGVzZXJpYWxpemVyID0gKGFsbG93ZWROYW1lcykgPT4gKHZhbHVlU3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSBwYXJzZUV4cHJlc3Npb25zKHZhbHVlU3RyaW5nKTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSAoZXhwcmVzc2lvbnMubGVuZ3RoID8gZXhwcmVzc2lvbnNbMF0udGVybXMgOiBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHZhbHVlTm9kZSkgPT4gdmFsdWVOb2RlICYmIHZhbHVlTm9kZS50eXBlID09PSAnaWRlbnQnKVxuICAgICAgICAgICAgLm1hcCh2YWx1ZU5vZGUgPT4gdmFsdWVOb2RlLnZhbHVlKVxuICAgICAgICAgICAgLmZpbHRlcihuYW1lID0+IGFsbG93ZWROYW1lcy5pbmRleE9mKG5hbWUpID4gLTEpO1xuICAgICAgICAvLyBOT1RFKGNkYXRhKTogSUUxMSBkb2VzIG5vdCBzdXBwb3J0IGNvbnN0cnVjdGluZyBhIFNldCBkaXJlY3RseSBmcm9tXG4gICAgICAgIC8vIGFuIGl0ZXJhYmxlLCBzbyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGFkZCBhbGwgdGhlIGl0ZW1zOlxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgcmVzdWx0LmFkZChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoX2Vycm9yKSB7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVzZXJpYWxpemVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/deserializers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/evaluators.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalcEvaluator: () => (/* binding */ CalcEvaluator),\n/* harmony export */   EnvEvaluator: () => (/* binding */ EnvEvaluator),\n/* harmony export */   Evaluator: () => (/* binding */ Evaluator),\n/* harmony export */   OperatorEvaluator: () => (/* binding */ OperatorEvaluator),\n/* harmony export */   PercentageEvaluator: () => (/* binding */ PercentageEvaluator),\n/* harmony export */   StyleEvaluator: () => (/* binding */ StyleEvaluator)\n/* harmony export */ });\n/* harmony import */ var _conversions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./conversions */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c;\n\n\nconst $evaluate = Symbol('evaluate');\nconst $lastValue = Symbol('lastValue');\n/**\n * An Evaluator is used to derive a computed style from part (or all) of a CSS\n * expression AST. This construct is particularly useful for complex ASTs\n * containing function calls such as calc, var and env. Such styles could be\n * costly to re-evaluate on every frame (and in some cases we may try to do\n * that). The Evaluator construct allows us to mark sub-trees of the AST as\n * constant, so that only the dynamic parts are re-evaluated. It also separates\n * one-time AST preparation work from work that necessarily has to happen upon\n * each evaluation.\n */\nclass Evaluator {\n    constructor() {\n        this[_a] = null;\n    }\n    /**\n     * An Evaluatable is a NumberNode or an Evaluator that evaluates a NumberNode\n     * as the result of invoking its evaluate method. This is mainly used to\n     * ensure that CSS function nodes are cast to the corresponding Evaluators\n     * that will resolve the result of the function, but is also used to ensure\n     * that a percentage nested at arbitrary depth in the expression will always\n     * be evaluated against the correct basis.\n     */\n    static evaluatableFor(node, basis = _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO) {\n        if (node instanceof Evaluator) {\n            return node;\n        }\n        if (node.type === 'number') {\n            if (node.unit === '%') {\n                return new PercentageEvaluator(node, basis);\n            }\n            return node;\n        }\n        switch (node.name.value) {\n            case 'calc':\n                return new CalcEvaluator(node, basis);\n            case 'env':\n                return new EnvEvaluator(node);\n        }\n        return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n    }\n    /**\n     * If the input is an Evaluator, returns the result of evaluating it.\n     * Otherwise, returns the input.\n     *\n     * This is a helper to aide in resolving a NumberNode without conditionally\n     * checking if the Evaluatable is an Evaluator everywhere.\n     */\n    static evaluate(evaluatable) {\n        if (evaluatable instanceof Evaluator) {\n            return evaluatable.evaluate();\n        }\n        return evaluatable;\n    }\n    /**\n     * If the input is an Evaluator, returns the value of its isConstant property.\n     * Returns true for all other input values.\n     */\n    static isConstant(evaluatable) {\n        if (evaluatable instanceof Evaluator) {\n            return evaluatable.isConstant;\n        }\n        return true;\n    }\n    /**\n     * This method applies a set of structured intrinsic metadata to an evaluated\n     * result from a parsed CSS-like string of expressions. Intrinsics provide\n     * sufficient metadata (e.g., basis values, analogs for keywords) such that\n     * omitted values in the input string can be backfilled, and keywords can be\n     * converted to concrete numbers.\n     *\n     * The result of applying intrinsics is a tuple of NumberNode values whose\n     * units match the units used by the basis of the intrinsics.\n     *\n     * The following is a high-level description of how intrinsics are applied:\n     *\n     *  1. Determine the value of 'auto' for the current term\n     *  2. If there is no corresponding input value for this term, substitute the\n     *     'auto' value.\n     *  3. If the term is an IdentNode, treat it as a keyword and perform the\n     *     appropriate substitution.\n     *  4. If the term is still null, fallback to the 'auto' value\n     *  5. If the term is a percentage, apply it to the basis and return that\n     *     value\n     *  6. Normalize the unit of the term\n     *  7. If the term's unit does not match the basis unit, return the basis\n     *     value\n     *  8. Return the term as is\n     */\n    static applyIntrinsics(evaluated, intrinsics) {\n        const { basis, keywords } = intrinsics;\n        const { auto } = keywords;\n        return basis.map((basisNode, index) => {\n            // Use an auto value if we have it, otherwise the auto value is the basis:\n            const autoSubstituteNode = auto[index] == null ? basisNode : auto[index];\n            // If the evaluated nodes do not have a node at the current\n            // index, fallback to the \"auto\" substitute right away:\n            let evaluatedNode = evaluated[index] ? evaluated[index] : autoSubstituteNode;\n            // Any ident node is considered a keyword:\n            if (evaluatedNode.type === 'ident') {\n                const keyword = evaluatedNode.value;\n                // Substitute any keywords for concrete values first:\n                if (keyword in keywords) {\n                    evaluatedNode = keywords[keyword][index];\n                }\n            }\n            // If we don't have a NumberNode at this point, fall back to whatever\n            // is specified for auto:\n            if (evaluatedNode == null || evaluatedNode.type === 'ident') {\n                evaluatedNode = autoSubstituteNode;\n            }\n            // For percentages, we always apply the percentage to the basis value:\n            if (evaluatedNode.unit === '%') {\n                return (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.numberNode)(evaluatedNode.number / 100 * basisNode.number, basisNode.unit);\n            }\n            // Otherwise, normalize whatever we have:\n            evaluatedNode = (0,_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(evaluatedNode, basisNode);\n            // If the normalized units do not match, return the basis as a fallback:\n            if (evaluatedNode.unit !== basisNode.unit) {\n                return basisNode;\n            }\n            // Finally, return the evaluated node with intrinsics applied:\n            return evaluatedNode;\n        });\n    }\n    /**\n     * If true, the Evaluator will only evaluate its AST one time. If false, the\n     * Evaluator will re-evaluate the AST each time that the public evaluate\n     * method is invoked.\n     */\n    get isConstant() {\n        return false;\n    }\n    /**\n     * Evaluate the Evaluator and return the result. If the Evaluator is constant,\n     * the corresponding AST will only be evaluated once, and the result of\n     * evaluating it the first time will be returned on all subsequent\n     * evaluations.\n     */\n    evaluate() {\n        if (!this.isConstant || this[$lastValue] == null) {\n            this[$lastValue] = this[$evaluate]();\n        }\n        return this[$lastValue];\n    }\n}\n_a = $lastValue;\nconst $percentage = Symbol('percentage');\nconst $basis = Symbol('basis');\n/**\n * A PercentageEvaluator scales a given basis value by a given percentage value.\n * The evaluated result is always considered to be constant.\n */\nclass PercentageEvaluator extends Evaluator {\n    constructor(percentage, basis) {\n        super();\n        this[$percentage] = percentage;\n        this[$basis] = basis;\n    }\n    get isConstant() {\n        return true;\n    }\n    [$evaluate]() {\n        return (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.numberNode)(this[$percentage].number / 100 * this[$basis].number, this[$basis].unit);\n    }\n}\nconst $identNode = Symbol('identNode');\n/**\n * Evaluator for CSS-like env() functions. Currently, only one environment\n * variable is accepted as an argument for such functions: window-scroll-y.\n *\n * The env() Evaluator is explicitly dynamic because it always refers to\n * external state that changes as the user scrolls, so it should always be\n * re-evaluated to ensure we get the most recent value.\n *\n * Some important notes about this feature include:\n *\n *  - There is no such thing as a \"window-scroll-y\" CSS environment variable in\n *    any stable browser at the time that this comment is being written.\n *  - The actual CSS env() function accepts a second argument as a fallback for\n *    the case that the specified first argument isn't set; our syntax does not\n *    support this second argument.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/env\n */\nclass EnvEvaluator extends Evaluator {\n    constructor(envFunction) {\n        super();\n        this[_b] = null;\n        const identNode = envFunction.arguments.length ? envFunction.arguments[0].terms[0] : null;\n        if (identNode != null && identNode.type === 'ident') {\n            this[$identNode] = identNode;\n        }\n    }\n    get isConstant() {\n        return false;\n    }\n    ;\n    [(_b = $identNode, $evaluate)]() {\n        if (this[$identNode] != null) {\n            switch (this[$identNode].value) {\n                case 'window-scroll-y':\n                    const verticalScrollPosition = window.pageYOffset;\n                    const verticalScrollMax = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\n                    const scrollY = verticalScrollPosition /\n                        (verticalScrollMax - window.innerHeight) ||\n                        0;\n                    return { type: 'number', number: scrollY, unit: null };\n            }\n        }\n        return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n    }\n}\nconst IS_MULTIPLICATION_RE = /[\\*\\/]/;\nconst $evaluator = Symbol('evaluator');\n/**\n * Evaluator for CSS-like calc() functions. Our implementation of calc()\n * evaluation currently support nested function calls, an unlimited number of\n * terms, and all four algebraic operators (+, -, * and /).\n *\n * The Evaluator is marked as constant unless the calc expression contains an\n * internal env expression at any depth, in which case it will be marked as\n * dynamic.\n *\n * @see https://www.w3.org/TR/css-values-3/#calc-syntax\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/calc\n */\nclass CalcEvaluator extends Evaluator {\n    constructor(calcFunction, basis = _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO) {\n        super();\n        this[_c] = null;\n        if (calcFunction.arguments.length !== 1) {\n            return;\n        }\n        const terms = calcFunction.arguments[0].terms.slice();\n        const secondOrderTerms = [];\n        while (terms.length) {\n            const term = terms.shift();\n            if (secondOrderTerms.length > 0) {\n                const previousTerm = secondOrderTerms[secondOrderTerms.length - 1];\n                if (previousTerm.type === 'operator' &&\n                    IS_MULTIPLICATION_RE.test(previousTerm.value)) {\n                    const operator = secondOrderTerms.pop();\n                    const leftValue = secondOrderTerms.pop();\n                    if (leftValue == null) {\n                        return;\n                    }\n                    secondOrderTerms.push(new OperatorEvaluator(operator, Evaluator.evaluatableFor(leftValue, basis), Evaluator.evaluatableFor(term, basis)));\n                    continue;\n                }\n            }\n            secondOrderTerms.push(term.type === 'operator' ? term :\n                Evaluator.evaluatableFor(term, basis));\n        }\n        while (secondOrderTerms.length > 2) {\n            const [left, operator, right] = secondOrderTerms.splice(0, 3);\n            if (operator.type !== 'operator') {\n                return;\n            }\n            secondOrderTerms.unshift(new OperatorEvaluator(operator, Evaluator.evaluatableFor(left, basis), Evaluator.evaluatableFor(right, basis)));\n        }\n        // There should only be one combined evaluator at this point:\n        if (secondOrderTerms.length === 1) {\n            this[$evaluator] = secondOrderTerms[0];\n        }\n    }\n    get isConstant() {\n        return this[$evaluator] == null || Evaluator.isConstant(this[$evaluator]);\n    }\n    [(_c = $evaluator, $evaluate)]() {\n        return this[$evaluator] != null ? Evaluator.evaluate(this[$evaluator]) :\n            _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n    }\n}\nconst $operator = Symbol('operator');\nconst $left = Symbol('left');\nconst $right = Symbol('right');\n/**\n * An Evaluator for the operators found inside CSS calc() functions.\n * The evaluator accepts an operator and left/right operands. The operands can\n * be any valid expression term typically allowed inside a CSS calc function.\n *\n * As detail of this implementation, the only supported unit types are angles\n * expressed as radians or degrees, and lengths expressed as meters, centimeters\n * or millimeters.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/calc\n */\nclass OperatorEvaluator extends Evaluator {\n    constructor(operator, left, right) {\n        super();\n        this[$operator] = operator;\n        this[$left] = left;\n        this[$right] = right;\n    }\n    get isConstant() {\n        return Evaluator.isConstant(this[$left]) &&\n            Evaluator.isConstant(this[$right]);\n    }\n    [$evaluate]() {\n        const leftNode = (0,_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(Evaluator.evaluate(this[$left]));\n        const rightNode = (0,_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(Evaluator.evaluate(this[$right]));\n        const { number: leftValue, unit: leftUnit } = leftNode;\n        const { number: rightValue, unit: rightUnit } = rightNode;\n        // Disallow operations for mismatched normalized units e.g., m and rad:\n        if (rightUnit != null && leftUnit != null && rightUnit != leftUnit) {\n            return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n        }\n        // NOTE(cdata): rules for calc type checking are defined here\n        // https://drafts.csswg.org/css-values-3/#calc-type-checking\n        // This is a simplification and may not hold up once we begin to support\n        // additional unit types:\n        const unit = leftUnit || rightUnit;\n        let value;\n        switch (this[$operator].value) {\n            case '+':\n                value = leftValue + rightValue;\n                break;\n            case '-':\n                value = leftValue - rightValue;\n                break;\n            case '/':\n                value = leftValue / rightValue;\n                break;\n            case '*':\n                value = leftValue * rightValue;\n                break;\n            default:\n                return _parsers__WEBPACK_IMPORTED_MODULE_1__.ZERO;\n        }\n        return { type: 'number', number: value, unit };\n    }\n}\nconst $evaluatables = Symbol('evaluatables');\nconst $intrinsics = Symbol('intrinsics');\n/**\n * A VectorEvaluator evaluates a series of numeric terms that usually represent\n * a data structure such as a multi-dimensional vector or a spherical\n *\n * The form of the evaluator's result is determined by the Intrinsics that are\n * given to it when it is constructed. For example, spherical intrinsics would\n * establish two angle terms and a length term, so the result of evaluating the\n * evaluator that is configured with spherical intrinsics is a three element\n * array where the first two elements represent angles in radians and the third\n * element representing a length in meters.\n */\nclass StyleEvaluator extends Evaluator {\n    constructor(expressions, intrinsics) {\n        super();\n        this[$intrinsics] = intrinsics;\n        const firstExpression = expressions[0];\n        const terms = firstExpression != null ? firstExpression.terms : [];\n        this[$evaluatables] =\n            intrinsics.basis.map((basisNode, index) => {\n                const term = terms[index];\n                if (term == null) {\n                    return { type: 'ident', value: 'auto' };\n                }\n                if (term.type === 'ident') {\n                    return term;\n                }\n                return Evaluator.evaluatableFor(term, basisNode);\n            });\n    }\n    get isConstant() {\n        for (const evaluatable of this[$evaluatables]) {\n            if (!Evaluator.isConstant(evaluatable)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    [$evaluate]() {\n        const evaluated = this[$evaluatables].map(evaluatable => Evaluator.evaluate(evaluatable));\n        return Evaluator.applyIntrinsics(evaluated, this[$intrinsics])\n            .map(numberNode => numberNode.number);\n    }\n}\n//# sourceMappingURL=evaluators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/evaluators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/parsers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASTWalker: () => (/* binding */ ASTWalker),\n/* harmony export */   ZERO: () => (/* binding */ ZERO),\n/* harmony export */   numberNode: () => (/* binding */ numberNode),\n/* harmony export */   parseExpressions: () => (/* binding */ parseExpressions)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst numberNode = (value, unit) => ({ type: 'number', number: value, unit });\n/**\n * Given a string representing a comma-separated set of CSS-like expressions,\n * parses and returns an array of ASTs that correspond to those expressions.\n *\n * Currently supported syntax includes:\n *\n *  - functions (top-level and nested)\n *  - calc() arithmetic operators\n *  - numbers with units\n *  - hexadecimal-encoded colors in 3, 6 or 8 digit form\n *  - idents\n *\n * All syntax is intended to match the parsing rules and semantics of the actual\n * CSS spec as closely as possible.\n *\n * @see https://www.w3.org/TR/CSS2/\n * @see https://www.w3.org/TR/css-values-3/\n */\nconst parseExpressions = (() => {\n    const cache = {};\n    const MAX_PARSE_ITERATIONS = 1000; // Arbitrarily large\n    return (inputString) => {\n        const cacheKey = inputString;\n        if (cacheKey in cache) {\n            return cache[cacheKey];\n        }\n        const expressions = [];\n        let parseIterations = 0;\n        while (inputString) {\n            if (++parseIterations > MAX_PARSE_ITERATIONS) {\n                // Avoid a potentially infinite loop due to typos:\n                inputString = '';\n                break;\n            }\n            const expressionParseResult = parseExpression(inputString);\n            const expression = expressionParseResult.nodes[0];\n            if (expression == null || expression.terms.length === 0) {\n                break;\n            }\n            expressions.push(expression);\n            inputString = expressionParseResult.remainingInput;\n        }\n        return cache[cacheKey] = expressions;\n    };\n})();\n/**\n * Parse a single expression. For the purposes of our supported syntax, an\n * expression is the set of semantically meaningful terms that appear before the\n * next comma, or between the parens of a function invocation.\n */\nconst parseExpression = (() => {\n    const IS_IDENT_RE = /^(\\-\\-|[a-z\\u0240-\\uffff])/i;\n    const IS_OPERATOR_RE = /^([\\*\\+\\/]|[\\-]\\s)/i;\n    const IS_EXPRESSION_END_RE = /^[\\),]/;\n    const FUNCTION_ARGUMENTS_FIRST_TOKEN = '(';\n    const HEX_FIRST_TOKEN = '#';\n    return (inputString) => {\n        const terms = [];\n        while (inputString.length) {\n            inputString = inputString.trim();\n            if (IS_EXPRESSION_END_RE.test(inputString)) {\n                break;\n            }\n            else if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n                const { nodes, remainingInput } = parseFunctionArguments(inputString);\n                inputString = remainingInput;\n                terms.push({\n                    type: 'function',\n                    name: { type: 'ident', value: 'calc' },\n                    arguments: nodes\n                });\n            }\n            else if (IS_IDENT_RE.test(inputString)) {\n                const identParseResult = parseIdent(inputString);\n                const identNode = identParseResult.nodes[0];\n                inputString = identParseResult.remainingInput;\n                if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n                    const { nodes, remainingInput } = parseFunctionArguments(inputString);\n                    terms.push({ type: 'function', name: identNode, arguments: nodes });\n                    inputString = remainingInput;\n                }\n                else {\n                    terms.push(identNode);\n                }\n            }\n            else if (IS_OPERATOR_RE.test(inputString)) {\n                // Operators are always a single character, so just pluck them out:\n                terms.push({ type: 'operator', value: inputString[0] });\n                inputString = inputString.slice(1);\n            }\n            else {\n                const { nodes, remainingInput } = inputString[0] === HEX_FIRST_TOKEN ?\n                    parseHex(inputString) :\n                    parseNumber(inputString);\n                // The remaining string may not have had any meaningful content. Exit\n                // early if this is the case:\n                if (nodes.length === 0) {\n                    break;\n                }\n                terms.push(nodes[0]);\n                inputString = remainingInput;\n            }\n        }\n        return { nodes: [{ type: 'expression', terms }], remainingInput: inputString };\n    };\n})();\n/**\n * An ident is something like a function name or the keyword \"auto\".\n */\nconst parseIdent = (() => {\n    const NOT_IDENT_RE = /[^a-z0-9_\\-\\u0240-\\uffff]/i;\n    return (inputString) => {\n        const match = inputString.match(NOT_IDENT_RE);\n        const ident = match == null ? inputString : inputString.substr(0, match.index);\n        const remainingInput = match == null ? '' : inputString.substr(match.index);\n        return { nodes: [{ type: 'ident', value: ident }], remainingInput };\n    };\n})();\n/**\n * Parses a number. A number value can be expressed with an integer or\n * non-integer syntax, and usually includes a unit (but does not strictly\n * require one for our purposes).\n */\nconst parseNumber = (() => {\n    // @see https://www.w3.org/TR/css-syntax/#number-token-diagram\n    const VALUE_RE = /[\\+\\-]?(\\d+[\\.]\\d+|\\d+|[\\.]\\d+)([eE][\\+\\-]?\\d+)?/;\n    const UNIT_RE = /^[a-z%]+/i;\n    const ALLOWED_UNITS = /^(m|mm|cm|rad|deg|[%])$/;\n    return (inputString) => {\n        const valueMatch = inputString.match(VALUE_RE);\n        const value = valueMatch == null ? '0' : valueMatch[0];\n        inputString = value == null ? inputString : inputString.slice(value.length);\n        const unitMatch = inputString.match(UNIT_RE);\n        let unit = unitMatch != null && unitMatch[0] !== '' ? unitMatch[0] : null;\n        const remainingInput = unitMatch == null ? inputString : inputString.slice(unit.length);\n        if (unit != null && !ALLOWED_UNITS.test(unit)) {\n            unit = null;\n        }\n        return {\n            nodes: [{\n                    type: 'number',\n                    number: parseFloat(value) || 0,\n                    unit: unit\n                }],\n            remainingInput\n        };\n    };\n})();\n/**\n * Parses a hexadecimal-encoded color in 3, 6 or 8 digit form.\n */\nconst parseHex = (() => {\n    // TODO(cdata): right now we don't actually enforce the number of digits\n    const HEX_RE = /^[a-f0-9]*/i;\n    return (inputString) => {\n        inputString = inputString.slice(1).trim();\n        const hexMatch = inputString.match(HEX_RE);\n        const nodes = hexMatch == null ? [] : [{ type: 'hex', value: hexMatch[0] }];\n        return {\n            nodes,\n            remainingInput: hexMatch == null ? inputString :\n                inputString.slice(hexMatch[0].length)\n        };\n    };\n})();\n/**\n * Parses arguments passed to a function invocation (e.g., the expressions\n * within a matched set of parens).\n */\nconst parseFunctionArguments = (inputString) => {\n    const expressionNodes = [];\n    // Consume the opening paren\n    inputString = inputString.slice(1).trim();\n    while (inputString.length) {\n        const expressionParseResult = parseExpression(inputString);\n        expressionNodes.push(expressionParseResult.nodes[0]);\n        inputString = expressionParseResult.remainingInput.trim();\n        if (inputString[0] === ',') {\n            inputString = inputString.slice(1).trim();\n        }\n        else if (inputString[0] === ')') {\n            // Consume the closing paren and stop parsing\n            inputString = inputString.slice(1);\n            break;\n        }\n    }\n    return { nodes: expressionNodes, remainingInput: inputString };\n};\nconst $visitedTypes = Symbol('visitedTypes');\n/**\n * An ASTWalker walks an array of ASTs such as the type produced by\n * parseExpressions and invokes a callback for a configured set of nodes that\n * the user wishes to \"visit\" during the walk.\n */\nclass ASTWalker {\n    constructor(visitedTypes) {\n        this[$visitedTypes] = visitedTypes;\n    }\n    /**\n     * Walk the given set of ASTs, and invoke the provided callback for nodes that\n     * match the filtered set that the ASTWalker was constructed with.\n     */\n    walk(ast, callback) {\n        const remaining = ast.slice();\n        while (remaining.length) {\n            const next = remaining.shift();\n            if (this[$visitedTypes].indexOf(next.type) > -1) {\n                callback(next);\n            }\n            switch (next.type) {\n                case 'expression':\n                    remaining.unshift(...next.terms);\n                    break;\n                case 'function':\n                    remaining.unshift(next.name, ...next.arguments);\n                    break;\n            }\n        }\n    }\n}\nconst ZERO = Object.freeze({ type: 'number', number: 0, unit: null });\n//# sourceMappingURL=parsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/styles/style-effector.js":
/*!************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/styles/style-effector.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StyleEffector: () => (/* binding */ StyleEffector)\n/* harmony export */ });\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c, _d;\n\nconst $instances = Symbol('instances');\nconst $activateListener = Symbol('activateListener');\nconst $deactivateListener = Symbol('deactivateListener');\nconst $notifyInstances = Symbol('notifyInstances');\nconst $notify = Symbol('notify');\nconst $scrollCallback = Symbol('callback');\n/**\n * This internal helper is intended to work as a reference-counting manager of\n * scroll event listeners. Only one scroll listener is ever registered for all\n * instances of the class, and when the last ScrollObserver \"disconnects\", that\n * event listener is removed. This spares us from thrashing\n * the {add,remove}EventListener API (the binding cost of these methods has been\n * known to show up in performance analyses) as well as potential memory leaks.\n */\nclass ScrollObserver {\n    constructor(callback) {\n        this[$scrollCallback] = callback;\n    }\n    static [$notifyInstances]() {\n        for (const instance of ScrollObserver[$instances]) {\n            instance[$notify]();\n        }\n    }\n    static [(_a = $instances, $activateListener)]() {\n        window.addEventListener('scroll', this[$notifyInstances], { passive: true });\n    }\n    static [$deactivateListener]() {\n        window.removeEventListener('scroll', this[$notifyInstances]);\n    }\n    /**\n     * Listen for scroll events. The configured callback (passed to the\n     * constructor) will be invoked for subsequent global scroll events.\n     */\n    observe() {\n        if (ScrollObserver[$instances].size === 0) {\n            ScrollObserver[$activateListener]();\n        }\n        ScrollObserver[$instances].add(this);\n    }\n    /**\n     * Stop listening for scroll events.\n     */\n    disconnect() {\n        ScrollObserver[$instances].delete(this);\n        if (ScrollObserver[$instances].size === 0) {\n            ScrollObserver[$deactivateListener]();\n        }\n    }\n    [$notify]() {\n        this[$scrollCallback]();\n    }\n    ;\n}\nScrollObserver[_a] = new Set();\nconst $computeStyleCallback = Symbol('computeStyleCallback');\nconst $astWalker = Symbol('astWalker');\nconst $dependencies = Symbol('dependencies');\nconst $onScroll = Symbol('onScroll');\n/**\n * The StyleEffector is configured with a callback that will be invoked at the\n * optimal time that some array of CSS expression ASTs ought to be evaluated.\n *\n * For example, our CSS-like expression syntax supports usage of the env()\n * function to incorporate the current top-level scroll position into a CSS\n * expression: env(window-scroll-y).\n *\n * This \"environment variable\" will change dynamically as the user scrolls the\n * page. If an AST contains such a usage of env(), we would have to evaluate the\n * AST on every frame in order to be sure that the computed style stays up to\n * date.\n *\n * The StyleEffector spares us from evaluating the expressions on every frame by\n * correlating specific parts of an AST with observers of the external effects\n * that they refer to (if any). So, if the AST contains env(window-scroll-y),\n * the StyleEffector manages the lifetime of a global scroll event listener and\n * notifies the user at the optimal time to evaluate the computed style.\n */\nclass StyleEffector {\n    constructor(callback) {\n        this[_b] = {};\n        this[_c] = new _parsers__WEBPACK_IMPORTED_MODULE_0__.ASTWalker(['function']);\n        this[_d] = () => {\n            this[$computeStyleCallback]({ relatedState: 'window-scroll' });\n        };\n        this[$computeStyleCallback] = callback;\n    }\n    /**\n     * Sets the expressions that govern when the StyleEffector callback will be\n     * invoked.\n     */\n    observeEffectsFor(ast) {\n        const newDependencies = {};\n        const oldDependencies = this[$dependencies];\n        this[$astWalker].walk(ast, functionNode => {\n            const { name } = functionNode;\n            const firstArgument = functionNode.arguments[0];\n            const firstTerm = firstArgument.terms[0];\n            if (name.value !== 'env' || firstTerm == null ||\n                firstTerm.type !== 'ident') {\n                return;\n            }\n            switch (firstTerm.value) {\n                case 'window-scroll-y':\n                    if (newDependencies['window-scroll'] == null) {\n                        const observer = 'window-scroll' in oldDependencies ?\n                            oldDependencies['window-scroll'] :\n                            new ScrollObserver(this[$onScroll]);\n                        observer.observe();\n                        delete oldDependencies['window-scroll'];\n                        newDependencies['window-scroll'] = observer;\n                    }\n                    break;\n            }\n        });\n        for (const environmentState in oldDependencies) {\n            const observer = oldDependencies[environmentState];\n            observer.disconnect();\n        }\n        this[$dependencies] = newDependencies;\n    }\n    /**\n     * Disposes of the StyleEffector by disconnecting all observers of external\n     * effects.\n     */\n    dispose() {\n        for (const environmentState in this[$dependencies]) {\n            const observer = this[$dependencies][environmentState];\n            observer.disconnect();\n        }\n    }\n}\n_b = $dependencies, _c = $astWalker, _d = $onScroll;\n//# sourceMappingURL=style-effector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/styles/style-effector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/template.js":
/*!***********************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/template.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeTemplate: () => (/* binding */ makeTemplate)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"(ssr)/./node_modules/lit/index.js\");\n/* harmony import */ var _assets_close_material_svg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assets/close-material-svg.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/assets/close-material-svg.js\");\n/* harmony import */ var _assets_controls_svg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assets/controls-svg.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/assets/controls-svg.js\");\n/* harmony import */ var _assets_view_in_ar_material_svg_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assets/view-in-ar-material-svg.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/assets/view-in-ar-material-svg.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst templateResult = (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `\n<style>\n:host {\n  display: block;\n  position: relative;\n  contain: strict;\n  width: 300px;\n  height: 150px;\n}\n\n/* NOTE: This rule set is our integration surface area with the\n * :focus-visible polyfill.\n *\n * @see https://github.com/WICG/focus-visible/pull/196 */\n:host([data-js-focus-visible]:focus:not(.focus-visible)),\n:host([data-js-focus-visible]) :focus:not(.focus-visible) {\n  outline: none;\n}\n\n.container {\n  position: relative;\n  overflow: hidden;\n}\n\n.userInput {\n  width: 100%;\n  height: 100%;\n  display: none;\n  position: relative;\n}\n\ncanvas {\n  position: absolute;\n  display: none;\n  pointer-events: none;\n  /* NOTE(cdata): Chrome 76 and below apparently have a bug\n   * that causes our canvas not to display pixels unless it is\n   * on its own render layer\n   * @see https://github.com/google/model-viewer/pull/755#issuecomment-536597893\n   */\n  transform: translateZ(0);\n}\n\n.show {\n  display: block;\n}\n\n/* Adapted from HTML5 Boilerplate\n *\n * @see https://github.com/h5bp/html5-boilerplate/blob/ceb4620c78fc82e13534fc44202a3f168754873f/dist/css/main.css#L122-L133 */\n.screen-reader-only {\n  border: 0;\n  left: 0;\n  top: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  pointer-events: none;\n}\n\n.slot {\n  position: absolute;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.slot > * {\n  pointer-events: initial;\n}\n\n.annotation-wrapper ::slotted(*) {\n  opacity: var(--max-hotspot-opacity, 1);\n  transition: opacity 0.3s;\n}\n\n.pointer-tumbling .annotation-wrapper ::slotted(*) {\n  pointer-events: none;\n}\n\n.annotation-wrapper ::slotted(*) {\n  pointer-events: initial;\n}\n\n.annotation-wrapper.hide ::slotted(*) {\n  opacity: var(--min-hotspot-opacity, 0.25);\n}\n\n.slot.poster {\n  display: none;\n  background-color: inherit;\n}\n\n.slot.poster.show {\n  display: inherit;\n}\n\n.slot.poster > * {\n  pointer-events: initial;\n}\n\n.slot.poster:not(.show) > * {\n  pointer-events: none;\n}\n\n#default-poster {\n  width: 100%;\n  height: 100%;\n  /* The default poster is a <button> so we need to set display\n   * to prevent it from being affected by text-align: */\n  display: block;\n  position: absolute;\n  border: none;\n  padding: 0;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: #fff0;\n}\n\n#default-progress-bar {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n}\n\n#default-progress-bar > .bar {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--progress-bar-height, 5px);\n  background-color: var(--progress-bar-color, rgba(0, 0, 0, 0.4));\n  transition: transform 0.09s;\n  transform-origin: top left;\n  transform: scaleX(0);\n  overflow: hidden;\n}\n\n#default-progress-bar > .bar.hide {\n  transition: opacity 0.3s 1s;\n  opacity: 0;\n}\n\n.centered {\n  align-items: center;\n  justify-content: center;\n}\n\n.cover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n.slot.interaction-prompt {\n  display: var(--interaction-prompt-display, flex);\n  overflow: hidden;\n  opacity: 0;\n  will-change: opacity;\n  transition: opacity 0.3s;\n}\n\n.slot.interaction-prompt.visible {\n  opacity: 1;\n}\n\n.animated-container {\n  will-change: transform, opacity;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.slot.interaction-prompt > * {\n  pointer-events: none;\n}\n\n.slot.ar-button {\n  -moz-user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  user-select: none;\n\n  display: var(--ar-button-display, block);\n}\n\n.slot.ar-button:not(.enabled) {\n  display: none;\n}\n\n.fab {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  background-color: #fff;\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 100px;\n}\n\n.fab > * {\n  opacity: 0.87;\n}\n\n#default-ar-button {\n  position: absolute;\n  bottom: 16px;\n  right: 16px;\n  transform: scale(var(--ar-button-scale, 1));\n  transform-origin: bottom right;\n}\n\n.slot.pan-target {\n  display: block;\n  position: absolute;\n  width: 0;\n  height: 0;\n  left: 50%;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  background-color: transparent;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n#default-pan-target {\n  width: 6px;\n  height: 6px;\n  border-radius: 6px;\n  border: 1px solid white;\n  box-shadow: 0px 0px 2px 1px rgba(0, 0, 0, 0.8);\n}\n\n.slot.default {\n  pointer-events: none;\n}\n\n.slot.progress-bar {\n  pointer-events: none;\n}\n\n.slot.exit-webxr-ar-button {\n  pointer-events: none;\n}\n\n.slot.exit-webxr-ar-button:not(.enabled) {\n  display: none;\n}\n\n#default-exit-webxr-ar-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: env(safe-area-inset-top, 16px);\n  right: 16px;\n  width: 40px;\n  height: 40px;\n  box-sizing: border-box;\n}\n\n#default-exit-webxr-ar-button > svg {\n  fill: #fff;\n}\n</style>\n<div class=\"container\">\n  <div class=\"userInput\" tabindex=\"0\" role=\"img\"\n      aria-label=\"3D model\">\n      <div class=\"slot canvas\">\n        <slot name=\"canvas\">\n          <canvas></canvas>\n        </slot>\n      </div>\n\n  </div>\n\n  <!-- NOTE(cdata): We need to wrap slots because browsers without ShadowDOM\n        will have their <slot> elements removed by ShadyCSS -->\n  <div class=\"slot poster\">\n    <slot name=\"poster\">\n      <button type=\"button\" id=\"default-poster\" aria-hidden=\"true\" aria-label=\"Loading 3D model\"></button>\n    </slot>\n  </div>\n\n  <div class=\"slot ar-button\">\n    <slot name=\"ar-button\">\n      <a id=\"default-ar-button\" part=\"default-ar-button\" class=\"fab\"\n          tabindex=\"2\"\n          aria-label=\"View in your space\">\n        ${_assets_view_in_ar_material_svg_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]}\n      </a>\n    </slot>\n  </div>\n\n  <div class=\"slot pan-target\">\n    <slot name=\"pan-target\">\n      <div id=\"default-pan-target\">\n      </div>\n    </slot>\n  </div>\n\n  <div class=\"slot interaction-prompt cover centered\">\n    <div id=\"prompt\" class=\"animated-container\">\n      <slot name=\"interaction-prompt\" aria-hidden=\"true\">\n        ${_assets_controls_svg_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]}\n      </slot>\n    </div>\n  </div>\n\n  <div id=\"finger0\" class=\"animated-container cover\">\n    <slot name=\"finger0\" aria-hidden=\"true\">\n    </slot>\n  </div>\n  <div id=\"finger1\" class=\"animated-container cover\">\n    <slot name=\"finger1\" aria-hidden=\"true\">\n    </slot>\n  </div>\n\n  <div class=\"slot default\">\n    <slot></slot>\n\n    <div class=\"slot progress-bar\">\n      <slot name=\"progress-bar\">\n        <div id=\"default-progress-bar\" aria-hidden=\"true\">\n          <div class=\"bar\" part=\"default-progress-bar\"></div>\n        </div>\n      </slot>\n    </div>\n\n    <div class=\"slot exit-webxr-ar-button\">\n      <slot name=\"exit-webxr-ar-button\">\n        <a id=\"default-exit-webxr-ar-button\" part=\"default-exit-webxr-ar-button\"\n            tabindex=\"3\"\n            aria-label=\"Exit AR\"\n            aria-hidden=\"true\">\n          ${_assets_close_material_svg_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]}\n        </a>\n      </slot>\n    </div>\n  </div>\n</div>\n<div class=\"screen-reader-only\" role=\"region\" aria-label=\"Live announcements\">\n  <span id=\"status\" role=\"status\"></span>\n</div>`;\nconst makeTemplate = (shadowRoot) => {\n    (0,lit__WEBPACK_IMPORTED_MODULE_0__.render)(templateResult, shadowRoot);\n};\n//# sourceMappingURL=template.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/template.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRenderer: () => (/* binding */ ARRenderer),\n/* harmony export */   ARStatus: () => (/* binding */ ARStatus),\n/* harmony export */   ARTracking: () => (/* binding */ ARTracking)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_webxr_XREstimatedLight_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/webxr/XREstimatedLight.js */ \"(ssr)/./node_modules/three/examples/jsm/webxr/XREstimatedLight.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* harmony import */ var _PlacementBox_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PlacementBox.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n// number of initial null pose XRFrames allowed before we post not-tracking\nconst INIT_FRAMES = 30;\n// AR shadow is not user-configurable. This is to pave the way for AR lighting\n// estimation, which will be used once available in WebXR.\nconst AR_SHADOW_INTENSITY = 0.8;\nconst ROTATION_RATE = 1.5;\n// Angle down (towards bottom of screen) from camera center ray to use for hit\n// testing against the floor. This makes placement faster and more intuitive\n// assuming the phone is in portrait mode. This seems to be a reasonable\n// assumption for the start of the session and UI will lack landscape mode to\n// encourage upright use.\nconst HIT_ANGLE_DEG = 20;\nconst SCALE_SNAP_HIGH = 1.3;\nconst SCALE_SNAP_LOW = 1 / SCALE_SNAP_HIGH;\n// For automatic dynamic viewport scaling, don't let the scale drop below this\n// limit.\nconst MIN_VIEWPORT_SCALE = 0.25;\n// Furthest away you can move an object (meters).\nconst MAX_DISTANCE = 10;\nconst ARStatus = {\n    NOT_PRESENTING: 'not-presenting',\n    SESSION_STARTED: 'session-started',\n    OBJECT_PLACED: 'object-placed',\n    FAILED: 'failed'\n};\nconst ARTracking = {\n    TRACKING: 'tracking',\n    NOT_TRACKING: 'not-tracking'\n};\nconst vector3 = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\nconst matrix4 = new three__WEBPACK_IMPORTED_MODULE_5__.Matrix4();\nconst hitPosition = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\nconst camera = new three__WEBPACK_IMPORTED_MODULE_5__.PerspectiveCamera(45, 1, 0.1, 100);\nclass ARRenderer extends three__WEBPACK_IMPORTED_MODULE_5__.EventDispatcher {\n    constructor(renderer) {\n        super();\n        this.renderer = renderer;\n        this.currentSession = null;\n        this.placeOnWall = false;\n        this.placementBox = null;\n        this.lastTick = null;\n        this.turntableRotation = null;\n        this.oldShadowIntensity = null;\n        this.frame = null;\n        this.initialHitSource = null;\n        this.transientHitTestSource = null;\n        this.inputSource = null;\n        this._presentedScene = null;\n        this.resolveCleanup = null;\n        this.exitWebXRButtonContainer = null;\n        this.overlay = null;\n        this.xrLight = null;\n        this.tracking = true;\n        this.frames = 0;\n        this.initialized = false;\n        this.oldTarget = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n        this.placementComplete = false;\n        this.isTranslating = false;\n        this.isRotating = false;\n        this.isTwoFingering = false;\n        this.lastDragPosition = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n        this.firstRatio = 0;\n        this.lastAngle = 0;\n        this.goalPosition = new three__WEBPACK_IMPORTED_MODULE_5__.Vector3();\n        this.goalYaw = 0;\n        this.goalScale = 1;\n        this.xDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.yDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.zDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.yawDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.scaleDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_3__.Damper();\n        this.onExitWebXRButtonContainerClick = () => this.stopPresenting();\n        this.onUpdateScene = () => {\n            if (this.placementBox != null && this.isPresenting) {\n                this.placementBox.dispose();\n                this.placementBox = new _PlacementBox_js__WEBPACK_IMPORTED_MODULE_4__.PlacementBox(this.presentedScene, this.placeOnWall ? 'back' : 'bottom');\n            }\n        };\n        this.onSelectStart = (event) => {\n            const hitSource = this.transientHitTestSource;\n            if (hitSource == null) {\n                return;\n            }\n            const fingers = this.frame.getHitTestResultsForTransientInput(hitSource);\n            const scene = this.presentedScene;\n            const box = this.placementBox;\n            if (fingers.length === 1) {\n                this.inputSource = event.inputSource;\n                const { axes } = this.inputSource.gamepad;\n                const hitPosition = box.getHit(this.presentedScene, axes[0], axes[1]);\n                box.show = true;\n                if (hitPosition != null) {\n                    this.isTranslating = true;\n                    this.lastDragPosition.copy(hitPosition);\n                }\n                else if (this.placeOnWall === false) {\n                    this.isRotating = true;\n                    this.lastAngle = axes[0] * ROTATION_RATE;\n                }\n            }\n            else if (fingers.length === 2) {\n                box.show = true;\n                this.isTwoFingering = true;\n                const { separation } = this.fingerPolar(fingers);\n                this.firstRatio = separation / scene.scale.x;\n            }\n        };\n        this.onSelectEnd = () => {\n            this.isTranslating = false;\n            this.isRotating = false;\n            this.isTwoFingering = false;\n            this.inputSource = null;\n            this.goalPosition.y +=\n                this.placementBox.offsetHeight * this.presentedScene.scale.x;\n            this.placementBox.show = false;\n        };\n        this.threeRenderer = renderer.threeRenderer;\n        this.threeRenderer.xr.enabled = true;\n    }\n    async resolveARSession() {\n        (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArCandidate)();\n        const session = await navigator.xr.requestSession('immersive-ar', {\n            requiredFeatures: ['hit-test'],\n            optionalFeatures: ['dom-overlay', 'light-estimation'],\n            domOverlay: this.overlay ? { root: this.overlay } : undefined\n        });\n        this.threeRenderer.xr.setReferenceSpaceType('local');\n        await this.threeRenderer.xr.setSession(session);\n        this.threeRenderer.xr.cameraAutoUpdate = false;\n        return session;\n    }\n    /**\n     * The currently presented scene, if any\n     */\n    get presentedScene() {\n        return this._presentedScene;\n    }\n    /**\n     * Resolves to true if the renderer has detected all the necessary qualities\n     * to support presentation in AR.\n     */\n    async supportsPresentation() {\n        try {\n            (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArCandidate)();\n            return await navigator.xr.isSessionSupported('immersive-ar');\n        }\n        catch (error) {\n            console.warn('Request to present in WebXR denied:');\n            console.warn(error);\n            console.warn('Falling back to next ar-mode');\n            return false;\n        }\n    }\n    /**\n     * Present a scene in AR\n     */\n    async present(scene, environmentEstimation = false) {\n        if (this.isPresenting) {\n            console.warn('Cannot present while a model is already presenting');\n        }\n        let waitForAnimationFrame = new Promise((resolve, _reject) => {\n            requestAnimationFrame(() => resolve());\n        });\n        scene.setHotspotsVisibility(false);\n        scene.queueRender();\n        // Render a frame to turn off the hotspots\n        await waitForAnimationFrame;\n        // This sets isPresenting to true\n        this._presentedScene = scene;\n        this.overlay = scene.element.shadowRoot.querySelector('div.default');\n        if (environmentEstimation === true) {\n            this.xrLight = new three_examples_jsm_webxr_XREstimatedLight_js__WEBPACK_IMPORTED_MODULE_6__.XREstimatedLight(this.threeRenderer);\n            this.xrLight.addEventListener('estimationstart', () => {\n                if (!this.isPresenting || this.xrLight == null) {\n                    return;\n                }\n                const scene = this.presentedScene;\n                scene.add(this.xrLight);\n                scene.environment = this.xrLight.environment;\n            });\n        }\n        const currentSession = await this.resolveARSession();\n        currentSession.addEventListener('end', () => {\n            this.postSessionCleanup();\n        }, { once: true });\n        const exitButton = scene.element.shadowRoot.querySelector('.slot.exit-webxr-ar-button');\n        exitButton.classList.add('enabled');\n        exitButton.addEventListener('click', this.onExitWebXRButtonContainerClick);\n        this.exitWebXRButtonContainer = exitButton;\n        const viewerRefSpace = await currentSession.requestReferenceSpace('viewer');\n        this.tracking = true;\n        this.frames = 0;\n        this.initialized = false;\n        this.turntableRotation = scene.yaw;\n        this.goalYaw = scene.yaw;\n        this.goalScale = 1;\n        scene.background = null;\n        this.oldShadowIntensity = scene.shadowIntensity;\n        scene.setShadowIntensity(0.01); // invisible, but not changing the shader\n        this.oldTarget.copy(scene.getTarget());\n        scene.element.addEventListener('load', this.onUpdateScene);\n        const radians = HIT_ANGLE_DEG * Math.PI / 180;\n        const ray = this.placeOnWall === true ?\n            undefined :\n            new XRRay(new DOMPoint(0, 0, 0), { x: 0, y: -Math.sin(radians), z: -Math.cos(radians) });\n        currentSession\n            .requestHitTestSource({ space: viewerRefSpace, offsetRay: ray }).then(hitTestSource => {\n            this.initialHitSource = hitTestSource;\n        });\n        this.currentSession = currentSession;\n        this.placementBox =\n            new _PlacementBox_js__WEBPACK_IMPORTED_MODULE_4__.PlacementBox(scene, this.placeOnWall ? 'back' : 'bottom');\n        this.placementComplete = false;\n        this.lastTick = performance.now();\n        this.dispatchEvent({ type: 'status', status: ARStatus.SESSION_STARTED });\n    }\n    /**\n     * If currently presenting a scene in AR, stops presentation and exits AR.\n     */\n    async stopPresenting() {\n        if (!this.isPresenting) {\n            return;\n        }\n        const cleanupPromise = new Promise((resolve) => {\n            this.resolveCleanup = resolve;\n        });\n        try {\n            await this.currentSession.end();\n            await cleanupPromise;\n        }\n        catch (error) {\n            console.warn('Error while trying to end WebXR AR session');\n            console.warn(error);\n            this.postSessionCleanup();\n        }\n    }\n    /**\n     * True if a scene is currently in the process of being presented in AR\n     */\n    get isPresenting() {\n        return this.presentedScene != null;\n    }\n    get target() {\n        return this.oldTarget;\n    }\n    updateTarget() {\n        const scene = this.presentedScene;\n        if (scene != null) {\n            const target = scene.getTarget();\n            this.oldTarget.copy(target);\n            if (this.placeOnWall) {\n                // Move the scene's target to the center of the back of the model's\n                // bounding box.\n                target.z = scene.boundingBox.min.z;\n            }\n            else {\n                // Move the scene's target to the model's floor height.\n                target.y = scene.boundingBox.min.y;\n            }\n            scene.setTarget(target.x, target.y, target.z);\n        }\n    }\n    postSessionCleanup() {\n        const session = this.currentSession;\n        if (session != null) {\n            session.removeEventListener('selectstart', this.onSelectStart);\n            session.removeEventListener('selectend', this.onSelectEnd);\n            this.currentSession = null;\n        }\n        const scene = this.presentedScene;\n        this._presentedScene = null;\n        if (scene != null) {\n            const { element } = scene;\n            if (this.xrLight != null) {\n                scene.remove(this.xrLight);\n                this.xrLight.dispose();\n                this.xrLight = null;\n            }\n            scene.position.set(0, 0, 0);\n            scene.scale.set(1, 1, 1);\n            scene.setShadowOffset(0);\n            const yaw = this.turntableRotation;\n            if (yaw != null) {\n                scene.yaw = yaw;\n            }\n            const intensity = this.oldShadowIntensity;\n            if (intensity != null) {\n                scene.setShadowIntensity(intensity);\n            }\n            scene.setEnvironmentAndSkybox(element[_features_environment_js__WEBPACK_IMPORTED_MODULE_0__.$currentEnvironmentMap], element[_features_environment_js__WEBPACK_IMPORTED_MODULE_0__.$currentBackground]);\n            const point = this.oldTarget;\n            scene.setTarget(point.x, point.y, point.z);\n            scene.xrCamera = null;\n            scene.element.removeEventListener('load', this.onUpdateScene);\n            scene.orientHotspots(0);\n            element.requestUpdate('cameraTarget');\n            element.requestUpdate('maxCameraOrbit');\n            element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$onResize](element.getBoundingClientRect());\n        }\n        // Force the Renderer to update its size\n        this.renderer.height = 0;\n        const exitButton = this.exitWebXRButtonContainer;\n        if (exitButton != null) {\n            exitButton.classList.remove('enabled');\n            exitButton.removeEventListener('click', this.onExitWebXRButtonContainerClick);\n            this.exitWebXRButtonContainer = null;\n        }\n        const hitSource = this.transientHitTestSource;\n        if (hitSource != null) {\n            hitSource.cancel();\n            this.transientHitTestSource = null;\n        }\n        const hitSourceInitial = this.initialHitSource;\n        if (hitSourceInitial != null) {\n            hitSourceInitial.cancel();\n            this.initialHitSource = null;\n        }\n        if (this.placementBox != null) {\n            this.placementBox.dispose();\n            this.placementBox = null;\n        }\n        this.lastTick = null;\n        this.turntableRotation = null;\n        this.oldShadowIntensity = null;\n        this.frame = null;\n        this.inputSource = null;\n        this.overlay = null;\n        if (this.resolveCleanup != null) {\n            this.resolveCleanup();\n        }\n        this.dispatchEvent({ type: 'status', status: ARStatus.NOT_PRESENTING });\n    }\n    updateView(view) {\n        const scene = this.presentedScene;\n        const xr = this.threeRenderer.xr;\n        xr.updateCamera(camera);\n        scene.xrCamera = xr.getCamera();\n        const { elements } = scene.getCamera().matrixWorld;\n        scene.orientHotspots(Math.atan2(elements[1], elements[5]));\n        if (!this.initialized) {\n            this.placeInitially();\n            this.initialized = true;\n        }\n        // Use automatic dynamic viewport scaling if supported.\n        if (view.requestViewportScale && view.recommendedViewportScale) {\n            const scale = view.recommendedViewportScale;\n            view.requestViewportScale(Math.max(scale, MIN_VIEWPORT_SCALE));\n        }\n        const layer = this.currentSession.renderState.baseLayer;\n        const viewport = layer.getViewport(view);\n        this.threeRenderer.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n    placeInitially() {\n        const scene = this.presentedScene;\n        const { position, element } = scene;\n        const xrCamera = scene.getCamera();\n        const { width, height } = this.overlay.getBoundingClientRect();\n        scene.setSize(width, height);\n        xrCamera.projectionMatrixInverse.copy(xrCamera.projectionMatrix).invert();\n        const { theta, radius } = element\n            .getCameraOrbit();\n        // Orient model to match the 3D camera view\n        const cameraDirection = xrCamera.getWorldDirection(vector3);\n        scene.yaw = Math.atan2(-cameraDirection.x, -cameraDirection.z) - theta;\n        this.goalYaw = scene.yaw;\n        position.copy(xrCamera.position)\n            .add(cameraDirection.multiplyScalar(radius));\n        this.updateTarget();\n        const target = scene.getTarget();\n        position.add(target).sub(this.oldTarget);\n        this.goalPosition.copy(position);\n        scene.setHotspotsVisibility(true);\n        const { session } = this.frame;\n        session.addEventListener('selectstart', this.onSelectStart);\n        session.addEventListener('selectend', this.onSelectEnd);\n        session\n            .requestHitTestSourceForTransientInput({ profile: 'generic-touchscreen' }).then(hitTestSource => {\n            this.transientHitTestSource = hitTestSource;\n        });\n    }\n    getTouchLocation() {\n        const { axes } = this.inputSource.gamepad;\n        let location = this.placementBox.getExpandedHit(this.presentedScene, axes[0], axes[1]);\n        if (location != null) {\n            vector3.copy(location).sub(this.presentedScene.getCamera().position);\n            if (vector3.length() > MAX_DISTANCE)\n                return null;\n        }\n        return location;\n    }\n    getHitPoint(hitResult) {\n        const refSpace = this.threeRenderer.xr.getReferenceSpace();\n        const pose = hitResult.getPose(refSpace);\n        if (pose == null) {\n            return null;\n        }\n        const hitMatrix = matrix4.fromArray(pose.transform.matrix);\n        if (this.placeOnWall === true) {\n            // Orient the model to the wall's normal vector.\n            this.goalYaw = Math.atan2(hitMatrix.elements[4], hitMatrix.elements[6]);\n        }\n        // Check that the y-coordinate of the normal is large enough that the normal\n        // is pointing up for floor placement; opposite for wall placement.\n        return hitMatrix.elements[5] > 0.75 !== this.placeOnWall ?\n            hitPosition.setFromMatrixPosition(hitMatrix) :\n            null;\n    }\n    moveToFloor(frame) {\n        const hitSource = this.initialHitSource;\n        if (hitSource == null) {\n            return;\n        }\n        const hitTestResults = frame.getHitTestResults(hitSource);\n        if (hitTestResults.length == 0) {\n            return;\n        }\n        const hit = hitTestResults[0];\n        const hitPoint = this.getHitPoint(hit);\n        if (hitPoint == null) {\n            return;\n        }\n        this.placementBox.show = true;\n        // If the user is translating, let the finger hit-ray take precedence and\n        // ignore this hit result.\n        if (!this.isTranslating) {\n            if (this.placeOnWall) {\n                this.goalPosition.copy(hitPoint);\n            }\n            else {\n                this.goalPosition.y = hitPoint.y;\n            }\n        }\n        hitSource.cancel();\n        this.initialHitSource = null;\n        this.dispatchEvent({ type: 'status', status: ARStatus.OBJECT_PLACED });\n    }\n    fingerPolar(fingers) {\n        const fingerOne = fingers[0].inputSource.gamepad.axes;\n        const fingerTwo = fingers[1].inputSource.gamepad.axes;\n        const deltaX = fingerTwo[0] - fingerOne[0];\n        const deltaY = fingerTwo[1] - fingerOne[1];\n        const angle = Math.atan2(deltaY, deltaX);\n        let deltaYaw = this.lastAngle - angle;\n        if (deltaYaw > Math.PI) {\n            deltaYaw -= 2 * Math.PI;\n        }\n        else if (deltaYaw < -Math.PI) {\n            deltaYaw += 2 * Math.PI;\n        }\n        this.lastAngle = angle;\n        return {\n            separation: Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n            deltaYaw: deltaYaw\n        };\n    }\n    processInput(frame) {\n        const hitSource = this.transientHitTestSource;\n        if (hitSource == null) {\n            return;\n        }\n        if (!this.isTranslating && !this.isTwoFingering && !this.isRotating) {\n            return;\n        }\n        const fingers = frame.getHitTestResultsForTransientInput(hitSource);\n        const scene = this.presentedScene;\n        const scale = scene.scale.x;\n        // Rotating, translating and scaling are mutually exclusive operations; only\n        // one can happen at a time, but we can switch during a gesture.\n        if (this.isTwoFingering) {\n            if (fingers.length < 2) {\n                // If we lose the second finger, stop scaling (in fact, stop processing\n                // input altogether until a new gesture starts).\n                this.isTwoFingering = false;\n            }\n            else {\n                const { separation, deltaYaw } = this.fingerPolar(fingers);\n                if (this.placeOnWall === false) {\n                    this.goalYaw += deltaYaw;\n                }\n                if (scene.canScale) {\n                    const scale = separation / this.firstRatio;\n                    this.goalScale =\n                        (scale < SCALE_SNAP_HIGH && scale > SCALE_SNAP_LOW) ? 1 : scale;\n                }\n            }\n            return;\n        }\n        else if (fingers.length === 2) {\n            // If we were rotating or translating and we get a second finger, switch\n            // to scaling instead.\n            this.isTranslating = false;\n            this.isRotating = false;\n            this.isTwoFingering = true;\n            const { separation } = this.fingerPolar(fingers);\n            this.firstRatio = separation / scale;\n            return;\n        }\n        if (this.isRotating) {\n            const angle = this.inputSource.gamepad.axes[0] * ROTATION_RATE;\n            this.goalYaw += angle - this.lastAngle;\n            this.lastAngle = angle;\n        }\n        else if (this.isTranslating) {\n            fingers.forEach(finger => {\n                if (finger.inputSource !== this.inputSource) {\n                    return;\n                }\n                let hit = null;\n                if (finger.results.length > 0) {\n                    hit = this.getHitPoint(finger.results[0]);\n                }\n                if (hit == null) {\n                    hit = this.getTouchLocation();\n                }\n                if (hit == null) {\n                    return;\n                }\n                this.goalPosition.sub(this.lastDragPosition);\n                if (this.placeOnWall === false) {\n                    const offset = hit.y - this.lastDragPosition.y;\n                    // When a lower floor is found, keep the model at the same height, but\n                    // drop the placement box to the floor. The model falls on select end.\n                    if (offset < 0) {\n                        this.placementBox.offsetHeight = offset / scale;\n                        this.presentedScene.setShadowOffset(offset);\n                        // Interpolate hit ray up to drag plane\n                        const cameraPosition = vector3.copy(scene.getCamera().position);\n                        const alpha = -offset / (cameraPosition.y - hit.y);\n                        cameraPosition.multiplyScalar(alpha);\n                        hit.multiplyScalar(1 - alpha).add(cameraPosition);\n                    }\n                }\n                this.goalPosition.add(hit);\n                this.lastDragPosition.copy(hit);\n            });\n        }\n    }\n    moveScene(delta) {\n        const scene = this.presentedScene;\n        const { position, yaw } = scene;\n        const boundingRadius = scene.boundingSphere.radius;\n        const goal = this.goalPosition;\n        const oldScale = scene.scale.x;\n        const box = this.placementBox;\n        if (!goal.equals(position) || this.goalScale !== oldScale) {\n            let { x, y, z } = position;\n            x = this.xDamper.update(x, goal.x, delta, boundingRadius);\n            y = this.yDamper.update(y, goal.y, delta, boundingRadius);\n            z = this.zDamper.update(z, goal.z, delta, boundingRadius);\n            position.set(x, y, z);\n            const newScale = this.scaleDamper.update(oldScale, this.goalScale, delta, 1);\n            scene.scale.set(newScale, newScale, newScale);\n            if (!this.isTranslating) {\n                const offset = goal.y - y;\n                if (this.placementComplete && this.placeOnWall === false) {\n                    box.offsetHeight = offset / newScale;\n                    scene.setShadowOffset(offset);\n                }\n                else if (offset === 0) {\n                    this.placementComplete = true;\n                    box.show = false;\n                    scene.setShadowIntensity(AR_SHADOW_INTENSITY);\n                }\n            }\n        }\n        box.updateOpacity(delta);\n        scene.updateTarget(delta);\n        // yaw must be updated last, since this also updates the shadow position.\n        scene.yaw = this.yawDamper.update(yaw, this.goalYaw, delta, Math.PI);\n    }\n    /**\n     * Only public to make it testable.\n     */\n    onWebXRFrame(time, frame) {\n        this.frame = frame;\n        ++this.frames;\n        const refSpace = this.threeRenderer.xr.getReferenceSpace();\n        const pose = frame.getViewerPose(refSpace);\n        if (pose == null && this.tracking === true && this.frames > INIT_FRAMES) {\n            this.tracking = false;\n            this.dispatchEvent({ type: 'tracking', status: ARTracking.NOT_TRACKING });\n        }\n        const scene = this.presentedScene;\n        if (pose == null || scene == null || !scene.element.loaded) {\n            this.threeRenderer.clear();\n            return;\n        }\n        if (this.tracking === false) {\n            this.tracking = true;\n            this.dispatchEvent({ type: 'tracking', status: ARTracking.TRACKING });\n        }\n        // WebXR may return multiple views, i.e. for headset AR. This\n        // isn't really supported at this point, but make a best-effort\n        // attempt to render other views also, using the first view\n        // as the main viewpoint.\n        let isFirstView = true;\n        for (const view of pose.views) {\n            this.updateView(view);\n            if (isFirstView) {\n                this.moveToFloor(frame);\n                this.processInput(frame);\n                const delta = time - this.lastTick;\n                this.moveScene(delta);\n                this.renderer.preRender(scene, time, delta);\n                this.lastTick = time;\n                scene.renderShadow(this.threeRenderer);\n            }\n            this.threeRenderer.render(scene, scene.getCamera());\n            isFirstView = false;\n        }\n    }\n}\n//# sourceMappingURL=ARRenderer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $evictionPolicy: () => (/* binding */ $evictionPolicy),\n/* harmony export */   $loader: () => (/* binding */ $loader),\n/* harmony export */   CachingGLTFLoader: () => (/* binding */ CachingGLTFLoader),\n/* harmony export */   loadWithLoader: () => (/* binding */ loadWithLoader)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_DRACOLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/loaders/DRACOLoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/DRACOLoader.js\");\n/* harmony import */ var three_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/GLTFLoader.js\");\n/* harmony import */ var three_examples_jsm_loaders_KTX2Loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/loaders/KTX2Loader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/KTX2Loader.js\");\n/* harmony import */ var _utilities_cache_eviction_policy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/cache-eviction-policy.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js\");\n/* harmony import */ var _gltf_instance_VariantMaterialLoaderPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gltf-instance/VariantMaterialLoaderPlugin */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\n\n\n\n\n\n/**\n * A helper to Promise-ify a Three.js GLTFLoader\n */\nconst loadWithLoader = (url, loader, progressCallback = () => { }) => {\n    const onProgress = (event) => {\n        const fraction = event.loaded / event.total;\n        progressCallback(Math.max(0, Math.min(1, isFinite(fraction) ? fraction : 1)));\n    };\n    return new Promise((resolve, reject) => {\n        loader.load(url, resolve, onProgress, reject);\n    });\n};\n/** Helper to load a script tag. */\nconst fetchScript = (src) => {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        document.body.appendChild(script);\n        script.onload = resolve;\n        script.onerror = reject;\n        script.async = true;\n        script.src = src;\n    });\n};\nconst cache = new Map();\nconst preloaded = new Map();\nlet dracoDecoderLocation;\nconst dracoLoader = new three_examples_jsm_loaders_DRACOLoader_js__WEBPACK_IMPORTED_MODULE_2__.DRACOLoader();\nlet ktx2TranscoderLocation;\nconst ktx2Loader = new three_examples_jsm_loaders_KTX2Loader_js__WEBPACK_IMPORTED_MODULE_3__.KTX2Loader();\nlet meshoptDecoderLocation;\nlet meshoptDecoder;\nconst $loader = Symbol('loader');\nconst $evictionPolicy = Symbol('evictionPolicy');\nconst $GLTFInstance = Symbol('GLTFInstance');\nclass CachingGLTFLoader extends three__WEBPACK_IMPORTED_MODULE_4__.EventDispatcher {\n    constructor(GLTFInstance) {\n        super();\n        this[_b] = new three_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_5__.GLTFLoader().register(parser => new _gltf_instance_VariantMaterialLoaderPlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"](parser));\n        this[$GLTFInstance] = GLTFInstance;\n        this[$loader].setDRACOLoader(dracoLoader);\n        this[$loader].setKTX2Loader(ktx2Loader);\n    }\n    static setDRACODecoderLocation(url) {\n        dracoDecoderLocation = url;\n        dracoLoader.setDecoderPath(url);\n    }\n    static getDRACODecoderLocation() {\n        return dracoDecoderLocation;\n    }\n    static setKTX2TranscoderLocation(url) {\n        ktx2TranscoderLocation = url;\n        ktx2Loader.setTranscoderPath(url);\n    }\n    static getKTX2TranscoderLocation() {\n        return ktx2TranscoderLocation;\n    }\n    static setMeshoptDecoderLocation(url) {\n        if (meshoptDecoderLocation !== url) {\n            meshoptDecoderLocation = url;\n            meshoptDecoder = fetchScript(url)\n                .then(() => MeshoptDecoder.ready)\n                .then(() => MeshoptDecoder);\n        }\n    }\n    static getMeshoptDecoderLocation() {\n        return meshoptDecoderLocation;\n    }\n    static initializeKTX2Loader(renderer) {\n        ktx2Loader.detectSupport(renderer);\n    }\n    static get cache() {\n        return cache;\n    }\n    /** @nocollapse */\n    static clearCache() {\n        cache.forEach((_value, url) => {\n            this.delete(url);\n        });\n        this[$evictionPolicy].reset();\n    }\n    static has(url) {\n        return cache.has(url);\n    }\n    /** @nocollapse */\n    static async delete(url) {\n        if (!this.has(url)) {\n            return;\n        }\n        const gltfLoads = cache.get(url);\n        preloaded.delete(url);\n        cache.delete(url);\n        const gltf = await gltfLoads;\n        // Dispose of the cached glTF's materials and geometries:\n        gltf.dispose();\n    }\n    /**\n     * Returns true if the model that corresponds to the specified url is\n     * available in our local cache.\n     */\n    static hasFinishedLoading(url) {\n        return !!preloaded.get(url);\n    }\n    get [(_a = $evictionPolicy, _b = $loader, $evictionPolicy)]() {\n        return this.constructor[$evictionPolicy];\n    }\n    /**\n     * Preloads a glTF, populating the cache. Returns a promise that resolves\n     * when the cache is populated.\n     */\n    async preload(url, element, progressCallback = () => { }) {\n        this[$loader].setWithCredentials(CachingGLTFLoader.withCredentials);\n        this.dispatchEvent({ type: 'preload', element: element, src: url });\n        if (!cache.has(url)) {\n            if (meshoptDecoder != null) {\n                this[$loader].setMeshoptDecoder(await meshoptDecoder);\n            }\n            const rawGLTFLoads = loadWithLoader(url, this[$loader], (progress) => {\n                progressCallback(progress * 0.8);\n            });\n            const GLTFInstance = this[$GLTFInstance];\n            const gltfInstanceLoads = rawGLTFLoads\n                .then((rawGLTF) => {\n                return GLTFInstance.prepare(rawGLTF);\n            })\n                .then((preparedGLTF) => {\n                progressCallback(0.9);\n                return new GLTFInstance(preparedGLTF);\n            })\n                .catch((reason => {\n                console.error(reason);\n                return new GLTFInstance();\n            }));\n            cache.set(url, gltfInstanceLoads);\n        }\n        await cache.get(url);\n        preloaded.set(url, true);\n        if (progressCallback) {\n            progressCallback(1.0);\n        }\n    }\n    /**\n     * Loads a glTF from the specified url and resolves a unique clone of the\n     * glTF. If the glTF has already been loaded, makes a clone of the cached\n     * copy.\n     */\n    async load(url, element, progressCallback = () => { }) {\n        await this.preload(url, element, progressCallback);\n        const gltf = await cache.get(url);\n        const clone = await gltf.clone();\n        this[$evictionPolicy].retain(url);\n        // Patch dispose so that we can properly account for instance use\n        // in the caching layer:\n        clone.dispose = () => {\n            this[$evictionPolicy].release(url);\n        };\n        return clone;\n    }\n}\nCachingGLTFLoader[_a] = new _utilities_cache_eviction_policy_js__WEBPACK_IMPORTED_MODULE_0__.CacheEvictionPolicy(CachingGLTFLoader);\n//# sourceMappingURL=CachingGLTFLoader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Damper.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DECAY_MILLISECONDS: () => (/* binding */ DECAY_MILLISECONDS),\n/* harmony export */   Damper: () => (/* binding */ Damper),\n/* harmony export */   SETTLING_TIME: () => (/* binding */ SETTLING_TIME)\n/* harmony export */ });\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SETTLING_TIME = 10000; // plenty long enough\nconst MIN_DECAY_MILLISECONDS = 0.001;\nconst DECAY_MILLISECONDS = 50;\n/**\n * The Damper class is a generic second-order critically damped system that does\n * one linear step of the desired length of time. The only parameter is\n * DECAY_MILLISECONDS. This common parameter makes all states converge at the\n * same rate regardless of scale. xNormalization is a number to provide the\n * rough scale of x, such that NIL_SPEED clamping also happens at roughly the\n * same convergence for all states.\n */\nclass Damper {\n    constructor(decayMilliseconds = DECAY_MILLISECONDS) {\n        this.velocity = 0;\n        this.naturalFrequency = 0;\n        this.setDecayTime(decayMilliseconds);\n    }\n    setDecayTime(decayMilliseconds) {\n        this.naturalFrequency =\n            1 / Math.max(MIN_DECAY_MILLISECONDS, decayMilliseconds);\n    }\n    update(x, xGoal, timeStepMilliseconds, xNormalization) {\n        const nilSpeed = 0.0002 * this.naturalFrequency;\n        if (x == null || xNormalization === 0) {\n            return xGoal;\n        }\n        if (x === xGoal && this.velocity === 0) {\n            return xGoal;\n        }\n        if (timeStepMilliseconds < 0) {\n            return x;\n        }\n        // Exact solution to a critically damped second-order system, where:\n        // acceleration = this.naturalFrequency * this.naturalFrequency * (xGoal\n        // - x) - 2 * this.naturalFrequency * this.velocity;\n        const deltaX = (x - xGoal);\n        const intermediateVelocity = this.velocity + this.naturalFrequency * deltaX;\n        const intermediateX = deltaX + timeStepMilliseconds * intermediateVelocity;\n        const decay = Math.exp(-this.naturalFrequency * timeStepMilliseconds);\n        const newVelocity = (intermediateVelocity - this.naturalFrequency * intermediateX) * decay;\n        const acceleration = -this.naturalFrequency * (newVelocity + intermediateVelocity * decay);\n        if (Math.abs(newVelocity) < nilSpeed * Math.abs(xNormalization) &&\n            acceleration * deltaX >= 0) {\n            // This ensures the controls settle and stop calling this function instead\n            // of asymptotically approaching their goal.\n            this.velocity = 0;\n            return xGoal;\n        }\n        else {\n            this.velocity = newVelocity;\n            return xGoal + intermediateX * decay;\n        }\n    }\n}\n//# sourceMappingURL=Damper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRGFtcGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkI7QUFDcEM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9EYW1wZXIuanM/NzU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgY29uc3QgU0VUVExJTkdfVElNRSA9IDEwMDAwOyAvLyBwbGVudHkgbG9uZyBlbm91Z2hcbmNvbnN0IE1JTl9ERUNBWV9NSUxMSVNFQ09ORFMgPSAwLjAwMTtcbmV4cG9ydCBjb25zdCBERUNBWV9NSUxMSVNFQ09ORFMgPSA1MDtcbi8qKlxuICogVGhlIERhbXBlciBjbGFzcyBpcyBhIGdlbmVyaWMgc2Vjb25kLW9yZGVyIGNyaXRpY2FsbHkgZGFtcGVkIHN5c3RlbSB0aGF0IGRvZXNcbiAqIG9uZSBsaW5lYXIgc3RlcCBvZiB0aGUgZGVzaXJlZCBsZW5ndGggb2YgdGltZS4gVGhlIG9ubHkgcGFyYW1ldGVyIGlzXG4gKiBERUNBWV9NSUxMSVNFQ09ORFMuIFRoaXMgY29tbW9uIHBhcmFtZXRlciBtYWtlcyBhbGwgc3RhdGVzIGNvbnZlcmdlIGF0IHRoZVxuICogc2FtZSByYXRlIHJlZ2FyZGxlc3Mgb2Ygc2NhbGUuIHhOb3JtYWxpemF0aW9uIGlzIGEgbnVtYmVyIHRvIHByb3ZpZGUgdGhlXG4gKiByb3VnaCBzY2FsZSBvZiB4LCBzdWNoIHRoYXQgTklMX1NQRUVEIGNsYW1waW5nIGFsc28gaGFwcGVucyBhdCByb3VnaGx5IHRoZVxuICogc2FtZSBjb252ZXJnZW5jZSBmb3IgYWxsIHN0YXRlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIERhbXBlciB7XG4gICAgY29uc3RydWN0b3IoZGVjYXlNaWxsaXNlY29uZHMgPSBERUNBWV9NSUxMSVNFQ09ORFMpIHtcbiAgICAgICAgdGhpcy52ZWxvY2l0eSA9IDA7XG4gICAgICAgIHRoaXMubmF0dXJhbEZyZXF1ZW5jeSA9IDA7XG4gICAgICAgIHRoaXMuc2V0RGVjYXlUaW1lKGRlY2F5TWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgc2V0RGVjYXlUaW1lKGRlY2F5TWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIHRoaXMubmF0dXJhbEZyZXF1ZW5jeSA9XG4gICAgICAgICAgICAxIC8gTWF0aC5tYXgoTUlOX0RFQ0FZX01JTExJU0VDT05EUywgZGVjYXlNaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgICB1cGRhdGUoeCwgeEdvYWwsIHRpbWVTdGVwTWlsbGlzZWNvbmRzLCB4Tm9ybWFsaXphdGlvbikge1xuICAgICAgICBjb25zdCBuaWxTcGVlZCA9IDAuMDAwMiAqIHRoaXMubmF0dXJhbEZyZXF1ZW5jeTtcbiAgICAgICAgaWYgKHggPT0gbnVsbCB8fCB4Tm9ybWFsaXphdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHhHb2FsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4ID09PSB4R29hbCAmJiB0aGlzLnZlbG9jaXR5ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geEdvYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVTdGVwTWlsbGlzZWNvbmRzIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhhY3Qgc29sdXRpb24gdG8gYSBjcml0aWNhbGx5IGRhbXBlZCBzZWNvbmQtb3JkZXIgc3lzdGVtLCB3aGVyZTpcbiAgICAgICAgLy8gYWNjZWxlcmF0aW9uID0gdGhpcy5uYXR1cmFsRnJlcXVlbmN5ICogdGhpcy5uYXR1cmFsRnJlcXVlbmN5ICogKHhHb2FsXG4gICAgICAgIC8vIC0geCkgLSAyICogdGhpcy5uYXR1cmFsRnJlcXVlbmN5ICogdGhpcy52ZWxvY2l0eTtcbiAgICAgICAgY29uc3QgZGVsdGFYID0gKHggLSB4R29hbCk7XG4gICAgICAgIGNvbnN0IGludGVybWVkaWF0ZVZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSArIHRoaXMubmF0dXJhbEZyZXF1ZW5jeSAqIGRlbHRhWDtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlWCA9IGRlbHRhWCArIHRpbWVTdGVwTWlsbGlzZWNvbmRzICogaW50ZXJtZWRpYXRlVmVsb2NpdHk7XG4gICAgICAgIGNvbnN0IGRlY2F5ID0gTWF0aC5leHAoLXRoaXMubmF0dXJhbEZyZXF1ZW5jeSAqIHRpbWVTdGVwTWlsbGlzZWNvbmRzKTtcbiAgICAgICAgY29uc3QgbmV3VmVsb2NpdHkgPSAoaW50ZXJtZWRpYXRlVmVsb2NpdHkgLSB0aGlzLm5hdHVyYWxGcmVxdWVuY3kgKiBpbnRlcm1lZGlhdGVYKSAqIGRlY2F5O1xuICAgICAgICBjb25zdCBhY2NlbGVyYXRpb24gPSAtdGhpcy5uYXR1cmFsRnJlcXVlbmN5ICogKG5ld1ZlbG9jaXR5ICsgaW50ZXJtZWRpYXRlVmVsb2NpdHkgKiBkZWNheSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhuZXdWZWxvY2l0eSkgPCBuaWxTcGVlZCAqIE1hdGguYWJzKHhOb3JtYWxpemF0aW9uKSAmJlxuICAgICAgICAgICAgYWNjZWxlcmF0aW9uICogZGVsdGFYID49IDApIHtcbiAgICAgICAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGUgY29udHJvbHMgc2V0dGxlIGFuZCBzdG9wIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkXG4gICAgICAgICAgICAvLyBvZiBhc3ltcHRvdGljYWxseSBhcHByb2FjaGluZyB0aGVpciBnb2FsLlxuICAgICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IDA7XG4gICAgICAgICAgICByZXR1cm4geEdvYWw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlbG9jaXR5ID0gbmV3VmVsb2NpdHk7XG4gICAgICAgICAgICByZXR1cm4geEdvYWwgKyBpbnRlcm1lZGlhdGVYICogZGVjYXk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EYW1wZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Debugger.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Debugger.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Debugger: () => (/* binding */ Debugger)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This Debugger exposes internal details of the <model-viewer> rendering\n * substructure so that external tools can more easily inspect and operate on\n * them.\n *\n * It also activates shader debugging on the associated GL context. Shader\n * debugging trades performance for useful error information, so it is not\n * recommended to activate this unless needed.\n */\nclass Debugger {\n    constructor(renderer) {\n        // Force WebGL shader debugging on:\n        renderer.threeRenderer.debug = { checkShaderErrors: true };\n        // Announce debug details at microtask timing to give the `Renderer`\n        // constructor time to complete its initialization, just to be on the safe\n        // side:\n        Promise.resolve().then(() => {\n            self.dispatchEvent(new CustomEvent('model-viewer-renderer-debug', {\n                detail: {\n                    renderer,\n                    THREE: {\n                        ShaderMaterial: three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial,\n                        Texture: three__WEBPACK_IMPORTED_MODULE_0__.Texture,\n                        Mesh: three__WEBPACK_IMPORTED_MODULE_0__.Mesh,\n                        Scene: three__WEBPACK_IMPORTED_MODULE_0__.Scene,\n                        PlaneGeometry: three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry,\n                        OrthographicCamera: three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera,\n                        WebGLRenderTarget: three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget\n                    }\n                }\n            }));\n        });\n    }\n    addScene(scene) {\n        self.dispatchEvent(new CustomEvent('model-viewer-scene-added-debug', { detail: { scene } }));\n    }\n    removeScene(scene) {\n        self.dispatchEvent(new CustomEvent('model-viewer-scene-removed-debug', { detail: { scene } }));\n    }\n}\n//# sourceMappingURL=Debugger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRGVidWdnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21IO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQiw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLHFDQUFxQztBQUNyQywwQ0FBMEM7QUFDMUMseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSwrRUFBK0UsVUFBVSxTQUFTO0FBQ2xHO0FBQ0E7QUFDQSxpRkFBaUYsVUFBVSxTQUFTO0FBQ3BHO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRGVidWdnZXIuanM/OWI2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBNZXNoLCBPcnRob2dyYXBoaWNDYW1lcmEsIFBsYW5lR2VvbWV0cnksIFNjZW5lLCBTaGFkZXJNYXRlcmlhbCwgVGV4dHVyZSwgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICd0aHJlZSc7XG4vKipcbiAqIFRoaXMgRGVidWdnZXIgZXhwb3NlcyBpbnRlcm5hbCBkZXRhaWxzIG9mIHRoZSA8bW9kZWwtdmlld2VyPiByZW5kZXJpbmdcbiAqIHN1YnN0cnVjdHVyZSBzbyB0aGF0IGV4dGVybmFsIHRvb2xzIGNhbiBtb3JlIGVhc2lseSBpbnNwZWN0IGFuZCBvcGVyYXRlIG9uXG4gKiB0aGVtLlxuICpcbiAqIEl0IGFsc28gYWN0aXZhdGVzIHNoYWRlciBkZWJ1Z2dpbmcgb24gdGhlIGFzc29jaWF0ZWQgR0wgY29udGV4dC4gU2hhZGVyXG4gKiBkZWJ1Z2dpbmcgdHJhZGVzIHBlcmZvcm1hbmNlIGZvciB1c2VmdWwgZXJyb3IgaW5mb3JtYXRpb24sIHNvIGl0IGlzIG5vdFxuICogcmVjb21tZW5kZWQgdG8gYWN0aXZhdGUgdGhpcyB1bmxlc3MgbmVlZGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVidWdnZXIge1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgICAgIC8vIEZvcmNlIFdlYkdMIHNoYWRlciBkZWJ1Z2dpbmcgb246XG4gICAgICAgIHJlbmRlcmVyLnRocmVlUmVuZGVyZXIuZGVidWcgPSB7IGNoZWNrU2hhZGVyRXJyb3JzOiB0cnVlIH07XG4gICAgICAgIC8vIEFubm91bmNlIGRlYnVnIGRldGFpbHMgYXQgbWljcm90YXNrIHRpbWluZyB0byBnaXZlIHRoZSBgUmVuZGVyZXJgXG4gICAgICAgIC8vIGNvbnN0cnVjdG9yIHRpbWUgdG8gY29tcGxldGUgaXRzIGluaXRpYWxpemF0aW9uLCBqdXN0IHRvIGJlIG9uIHRoZSBzYWZlXG4gICAgICAgIC8vIHNpZGU6XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbW9kZWwtdmlld2VyLXJlbmRlcmVyLWRlYnVnJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlcixcbiAgICAgICAgICAgICAgICAgICAgVEhSRUU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNoYWRlck1hdGVyaWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgVGV4dHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBTY2VuZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsYW5lR2VvbWV0cnksXG4gICAgICAgICAgICAgICAgICAgICAgICBPcnRob2dyYXBoaWNDYW1lcmEsXG4gICAgICAgICAgICAgICAgICAgICAgICBXZWJHTFJlbmRlclRhcmdldFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkU2NlbmUoc2NlbmUpIHtcbiAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbW9kZWwtdmlld2VyLXNjZW5lLWFkZGVkLWRlYnVnJywgeyBkZXRhaWw6IHsgc2NlbmUgfSB9KSk7XG4gICAgfVxuICAgIHJlbW92ZVNjZW5lKHNjZW5lKSB7XG4gICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ21vZGVsLXZpZXdlci1zY2VuZS1yZW1vdmVkLWRlYnVnJywgeyBkZXRhaWw6IHsgc2NlbmUgfSB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVidWdnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Debugger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EnvironmentScene)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass EnvironmentScene extends three__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor() {\n        super();\n        this.position.y = -3.5;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry();\n        geometry.deleteAttribute('uv');\n        const roomMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0, side: three__WEBPACK_IMPORTED_MODULE_0__.BackSide });\n        const boxMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0 });\n        const mainLight = new three__WEBPACK_IMPORTED_MODULE_0__.PointLight(0xffffff, 500.0, 28, 2);\n        mainLight.position.set(0.418, 16.199, 0.300);\n        this.add(mainLight);\n        const room = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, roomMaterial);\n        room.position.set(-0.757, 13.219, 0.717);\n        room.scale.set(31.713, 28.305, 28.591);\n        this.add(room);\n        const box1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box1.position.set(-10.906, 2.009, 1.846);\n        box1.rotation.set(0, -0.195, 0);\n        box1.scale.set(2.328, 7.905, 4.651);\n        this.add(box1);\n        const box2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box2.position.set(-5.607, -0.754, -0.758);\n        box2.rotation.set(0, 0.994, 0);\n        box2.scale.set(1.970, 1.534, 3.955);\n        this.add(box2);\n        const box3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box3.position.set(6.167, 0.857, 7.803);\n        box3.rotation.set(0, 0.561, 0);\n        box3.scale.set(3.927, 6.285, 3.687);\n        this.add(box3);\n        const box4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box4.position.set(-2.017, 0.018, 6.124);\n        box4.rotation.set(0, 0.333, 0);\n        box4.scale.set(2.002, 4.566, 2.064);\n        this.add(box4);\n        const box5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box5.position.set(2.291, -0.756, -2.621);\n        box5.rotation.set(0, -0.286, 0);\n        box5.scale.set(1.546, 1.552, 1.496);\n        this.add(box5);\n        const box6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box6.position.set(-2.193, -0.369, -5.547);\n        box6.rotation.set(0, 0.516, 0);\n        box6.scale.set(3.875, 3.487, 2.986);\n        this.add(box6);\n        // -x right\n        const light1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(50));\n        light1.position.set(-16.116, 14.37, 8.208);\n        light1.scale.set(0.1, 2.428, 2.739);\n        this.add(light1);\n        // -x left\n        const light2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(50));\n        light2.position.set(-16.109, 18.021, -8.207);\n        light2.scale.set(0.1, 2.425, 2.751);\n        this.add(light2);\n        // +x\n        const light3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(17));\n        light3.position.set(14.904, 12.198, -1.832);\n        light3.scale.set(0.15, 4.265, 6.331);\n        this.add(light3);\n        // +z\n        const light4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(43));\n        light4.position.set(-0.462, 8.89, 14.520);\n        light4.scale.set(4.38, 5.441, 0.088);\n        this.add(light4);\n        // -z\n        const light5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(20));\n        light5.position.set(3.235, 11.486, -12.541);\n        light5.scale.set(2.5, 2.0, 0.1);\n        this.add(light5);\n        // +y\n        const light6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(100));\n        light6.position.set(0.0, 20.0, 0.0);\n        light6.scale.set(1.0, 0.1, 1.0);\n        this.add(light6);\n    }\n    createAreaLightMaterial(intensity) {\n        const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n        material.color.setScalar(intensity);\n        return material;\n    }\n}\n//# sourceMappingURL=EnvironmentScene.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRW52aXJvbm1lbnRTY2VuZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0g7QUFDakcsK0JBQStCLHdDQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4Q0FBVztBQUN4QztBQUNBLGlDQUFpQyx1REFBb0IsR0FBRyxvQkFBb0IsMkNBQVEsRUFBRTtBQUN0RixnQ0FBZ0MsdURBQW9CLEdBQUcsY0FBYztBQUNyRSw4QkFBOEIsNkNBQVU7QUFDeEM7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9FbnZpcm9ubWVudFNjZW5lLmpzP2NjZTciXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQmFja1NpZGUsIEJveEdlb21ldHJ5LCBNZXNoLCBNZXNoQmFzaWNNYXRlcmlhbCwgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsIFBvaW50TGlnaHQsIFNjZW5lIH0gZnJvbSAndGhyZWUnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW52aXJvbm1lbnRTY2VuZSBleHRlbmRzIFNjZW5lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gLTMuNTtcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoKTtcbiAgICAgICAgZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCd1dicpO1xuICAgICAgICBjb25zdCByb29tTWF0ZXJpYWwgPSBuZXcgTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBtZXRhbG5lc3M6IDAsIHNpZGU6IEJhY2tTaWRlIH0pO1xuICAgICAgICBjb25zdCBib3hNYXRlcmlhbCA9IG5ldyBNZXNoU3RhbmRhcmRNYXRlcmlhbCh7IG1ldGFsbmVzczogMCB9KTtcbiAgICAgICAgY29uc3QgbWFpbkxpZ2h0ID0gbmV3IFBvaW50TGlnaHQoMHhmZmZmZmYsIDUwMC4wLCAyOCwgMik7XG4gICAgICAgIG1haW5MaWdodC5wb3NpdGlvbi5zZXQoMC40MTgsIDE2LjE5OSwgMC4zMDApO1xuICAgICAgICB0aGlzLmFkZChtYWluTGlnaHQpO1xuICAgICAgICBjb25zdCByb29tID0gbmV3IE1lc2goZ2VvbWV0cnksIHJvb21NYXRlcmlhbCk7XG4gICAgICAgIHJvb20ucG9zaXRpb24uc2V0KC0wLjc1NywgMTMuMjE5LCAwLjcxNyk7XG4gICAgICAgIHJvb20uc2NhbGUuc2V0KDMxLjcxMywgMjguMzA1LCAyOC41OTEpO1xuICAgICAgICB0aGlzLmFkZChyb29tKTtcbiAgICAgICAgY29uc3QgYm94MSA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDEucG9zaXRpb24uc2V0KC0xMC45MDYsIDIuMDA5LCAxLjg0Nik7XG4gICAgICAgIGJveDEucm90YXRpb24uc2V0KDAsIC0wLjE5NSwgMCk7XG4gICAgICAgIGJveDEuc2NhbGUuc2V0KDIuMzI4LCA3LjkwNSwgNC42NTEpO1xuICAgICAgICB0aGlzLmFkZChib3gxKTtcbiAgICAgICAgY29uc3QgYm94MiA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDIucG9zaXRpb24uc2V0KC01LjYwNywgLTAuNzU0LCAtMC43NTgpO1xuICAgICAgICBib3gyLnJvdGF0aW9uLnNldCgwLCAwLjk5NCwgMCk7XG4gICAgICAgIGJveDIuc2NhbGUuc2V0KDEuOTcwLCAxLjUzNCwgMy45NTUpO1xuICAgICAgICB0aGlzLmFkZChib3gyKTtcbiAgICAgICAgY29uc3QgYm94MyA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDMucG9zaXRpb24uc2V0KDYuMTY3LCAwLjg1NywgNy44MDMpO1xuICAgICAgICBib3gzLnJvdGF0aW9uLnNldCgwLCAwLjU2MSwgMCk7XG4gICAgICAgIGJveDMuc2NhbGUuc2V0KDMuOTI3LCA2LjI4NSwgMy42ODcpO1xuICAgICAgICB0aGlzLmFkZChib3gzKTtcbiAgICAgICAgY29uc3QgYm94NCA9IG5ldyBNZXNoKGdlb21ldHJ5LCBib3hNYXRlcmlhbCk7XG4gICAgICAgIGJveDQucG9zaXRpb24uc2V0KC0yLjAxNywgMC4wMTgsIDYuMTI0KTtcbiAgICAgICAgYm94NC5yb3RhdGlvbi5zZXQoMCwgMC4zMzMsIDApO1xuICAgICAgICBib3g0LnNjYWxlLnNldCgyLjAwMiwgNC41NjYsIDIuMDY0KTtcbiAgICAgICAgdGhpcy5hZGQoYm94NCk7XG4gICAgICAgIGNvbnN0IGJveDUgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3g1LnBvc2l0aW9uLnNldCgyLjI5MSwgLTAuNzU2LCAtMi42MjEpO1xuICAgICAgICBib3g1LnJvdGF0aW9uLnNldCgwLCAtMC4yODYsIDApO1xuICAgICAgICBib3g1LnNjYWxlLnNldCgxLjU0NiwgMS41NTIsIDEuNDk2KTtcbiAgICAgICAgdGhpcy5hZGQoYm94NSk7XG4gICAgICAgIGNvbnN0IGJveDYgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3g2LnBvc2l0aW9uLnNldCgtMi4xOTMsIC0wLjM2OSwgLTUuNTQ3KTtcbiAgICAgICAgYm94Ni5yb3RhdGlvbi5zZXQoMCwgMC41MTYsIDApO1xuICAgICAgICBib3g2LnNjYWxlLnNldCgzLjg3NSwgMy40ODcsIDIuOTg2KTtcbiAgICAgICAgdGhpcy5hZGQoYm94Nik7XG4gICAgICAgIC8vIC14IHJpZ2h0XG4gICAgICAgIGNvbnN0IGxpZ2h0MSA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDUwKSk7XG4gICAgICAgIGxpZ2h0MS5wb3NpdGlvbi5zZXQoLTE2LjExNiwgMTQuMzcsIDguMjA4KTtcbiAgICAgICAgbGlnaHQxLnNjYWxlLnNldCgwLjEsIDIuNDI4LCAyLjczOSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0MSk7XG4gICAgICAgIC8vIC14IGxlZnRcbiAgICAgICAgY29uc3QgbGlnaHQyID0gbmV3IE1lc2goZ2VvbWV0cnksIHRoaXMuY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoNTApKTtcbiAgICAgICAgbGlnaHQyLnBvc2l0aW9uLnNldCgtMTYuMTA5LCAxOC4wMjEsIC04LjIwNyk7XG4gICAgICAgIGxpZ2h0Mi5zY2FsZS5zZXQoMC4xLCAyLjQyNSwgMi43NTEpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDIpO1xuICAgICAgICAvLyAreFxuICAgICAgICBjb25zdCBsaWdodDMgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCgxNykpO1xuICAgICAgICBsaWdodDMucG9zaXRpb24uc2V0KDE0LjkwNCwgMTIuMTk4LCAtMS44MzIpO1xuICAgICAgICBsaWdodDMuc2NhbGUuc2V0KDAuMTUsIDQuMjY1LCA2LjMzMSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0Myk7XG4gICAgICAgIC8vICt6XG4gICAgICAgIGNvbnN0IGxpZ2h0NCA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDQzKSk7XG4gICAgICAgIGxpZ2h0NC5wb3NpdGlvbi5zZXQoLTAuNDYyLCA4Ljg5LCAxNC41MjApO1xuICAgICAgICBsaWdodDQuc2NhbGUuc2V0KDQuMzgsIDUuNDQxLCAwLjA4OCk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0NCk7XG4gICAgICAgIC8vIC16XG4gICAgICAgIGNvbnN0IGxpZ2h0NSA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDIwKSk7XG4gICAgICAgIGxpZ2h0NS5wb3NpdGlvbi5zZXQoMy4yMzUsIDExLjQ4NiwgLTEyLjU0MSk7XG4gICAgICAgIGxpZ2h0NS5zY2FsZS5zZXQoMi41LCAyLjAsIDAuMSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0NSk7XG4gICAgICAgIC8vICt5XG4gICAgICAgIGNvbnN0IGxpZ2h0NiA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDEwMCkpO1xuICAgICAgICBsaWdodDYucG9zaXRpb24uc2V0KDAuMCwgMjAuMCwgMC4wKTtcbiAgICAgICAgbGlnaHQ2LnNjYWxlLnNldCgxLjAsIDAuMSwgMS4wKTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQ2KTtcbiAgICB9XG4gICAgY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoaW50ZW5zaXR5KSB7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgIG1hdGVyaWFsLmNvbG9yLnNldFNjYWxhcihpbnRlbnNpdHkpO1xuICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW52aXJvbm1lbnRTY2VuZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EnvironmentSceneAlt)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass EnvironmentSceneAlt extends three__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor() {\n        super();\n        this.position.y = -3.5;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry();\n        geometry.deleteAttribute('uv');\n        const roomMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0, side: three__WEBPACK_IMPORTED_MODULE_0__.BackSide });\n        const boxMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ metalness: 0 });\n        const mainLight = new three__WEBPACK_IMPORTED_MODULE_0__.PointLight(0xffffff, 400.0, 28, 2);\n        mainLight.position.set(0.5, 14.0, 0.5);\n        this.add(mainLight);\n        const room = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, roomMaterial);\n        room.position.set(0.0, 13.2, 0.0);\n        room.scale.set(31.5, 28.5, 31.5);\n        this.add(room);\n        const box1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box1.position.set(-10.906, -1.0, 1.846);\n        box1.rotation.set(0, -0.195, 0);\n        box1.scale.set(2.328, 7.905, 4.651);\n        this.add(box1);\n        const box2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box2.position.set(-5.607, -0.754, -0.758);\n        box2.rotation.set(0, 0.994, 0);\n        box2.scale.set(1.970, 1.534, 3.955);\n        this.add(box2);\n        const box3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box3.position.set(6.167, -0.16, 7.803);\n        box3.rotation.set(0, 0.561, 0);\n        box3.scale.set(3.927, 6.285, 3.687);\n        this.add(box3);\n        const box4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box4.position.set(-2.017, 0.018, 6.124);\n        box4.rotation.set(0, 0.333, 0);\n        box4.scale.set(2.002, 4.566, 2.064);\n        this.add(box4);\n        const box5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box5.position.set(2.291, -0.756, -2.621);\n        box5.rotation.set(0, -0.286, 0);\n        box5.scale.set(1.546, 1.552, 1.496);\n        this.add(box5);\n        const box6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, boxMaterial);\n        box6.position.set(-2.193, -0.369, -5.547);\n        box6.rotation.set(0, 0.516, 0);\n        box6.scale.set(3.875, 3.487, 2.986);\n        this.add(box6);\n        // -x_left\n        const light1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light1.position.set(-14.0, 10.0, 8.0);\n        light1.scale.set(0.1, 2.5, 2.5);\n        this.add(light1);\n        // -x_right\n        const light2 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light2.position.set(-14.0, 14.0, -4.0);\n        light2.scale.set(0.1, 2.5, 2.5);\n        this.add(light2);\n        // +x only on light\n        const light3 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(23));\n        light3.position.set(14.0, 12.0, 0.0);\n        light3.scale.set(0.1, 5.0, 5.0);\n        this.add(light3);\n        // +z\n        const light4 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(16));\n        light4.position.set(0.0, 9.0, 14.0);\n        light4.scale.set(5.0, 5.0, 0.1);\n        this.add(light4);\n        // -z right\n        const light5 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light5.position.set(7.0, 8.0, -14.0);\n        light5.scale.set(2.5, 2.5, 0.1);\n        this.add(light5);\n        // -z left\n        const light6 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(80));\n        light6.position.set(-7.0, 16.0, -14.0);\n        light6.scale.set(2.5, 2.5, 0.1);\n        this.add(light6);\n        // +y\n        const light7 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, this.createAreaLightMaterial(1));\n        light7.position.set(0.0, 20.0, 0.0);\n        light7.scale.set(0.1, 0.1, 0.1);\n        this.add(light7);\n    }\n    createAreaLightMaterial(intensity) {\n        const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n        material.color.setScalar(intensity);\n        return material;\n    }\n}\n//# sourceMappingURL=EnvironmentSceneAlt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvRW52aXJvbm1lbnRTY2VuZUFsdC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0g7QUFDakcsa0NBQWtDLHdDQUFLO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4Q0FBVztBQUN4QztBQUNBLGlDQUFpQyx1REFBb0IsR0FBRyxvQkFBb0IsMkNBQVEsRUFBRTtBQUN0RixnQ0FBZ0MsdURBQW9CLEdBQUcsY0FBYztBQUNyRSw4QkFBOEIsNkNBQVU7QUFDeEM7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1Q0FBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9FbnZpcm9ubWVudFNjZW5lQWx0LmpzPzQ4YTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQmFja1NpZGUsIEJveEdlb21ldHJ5LCBNZXNoLCBNZXNoQmFzaWNNYXRlcmlhbCwgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsIFBvaW50TGlnaHQsIFNjZW5lIH0gZnJvbSAndGhyZWUnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW52aXJvbm1lbnRTY2VuZUFsdCBleHRlbmRzIFNjZW5lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gLTMuNTtcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoKTtcbiAgICAgICAgZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCd1dicpO1xuICAgICAgICBjb25zdCByb29tTWF0ZXJpYWwgPSBuZXcgTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBtZXRhbG5lc3M6IDAsIHNpZGU6IEJhY2tTaWRlIH0pO1xuICAgICAgICBjb25zdCBib3hNYXRlcmlhbCA9IG5ldyBNZXNoU3RhbmRhcmRNYXRlcmlhbCh7IG1ldGFsbmVzczogMCB9KTtcbiAgICAgICAgY29uc3QgbWFpbkxpZ2h0ID0gbmV3IFBvaW50TGlnaHQoMHhmZmZmZmYsIDQwMC4wLCAyOCwgMik7XG4gICAgICAgIG1haW5MaWdodC5wb3NpdGlvbi5zZXQoMC41LCAxNC4wLCAwLjUpO1xuICAgICAgICB0aGlzLmFkZChtYWluTGlnaHQpO1xuICAgICAgICBjb25zdCByb29tID0gbmV3IE1lc2goZ2VvbWV0cnksIHJvb21NYXRlcmlhbCk7XG4gICAgICAgIHJvb20ucG9zaXRpb24uc2V0KDAuMCwgMTMuMiwgMC4wKTtcbiAgICAgICAgcm9vbS5zY2FsZS5zZXQoMzEuNSwgMjguNSwgMzEuNSk7XG4gICAgICAgIHRoaXMuYWRkKHJvb20pO1xuICAgICAgICBjb25zdCBib3gxID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94MS5wb3NpdGlvbi5zZXQoLTEwLjkwNiwgLTEuMCwgMS44NDYpO1xuICAgICAgICBib3gxLnJvdGF0aW9uLnNldCgwLCAtMC4xOTUsIDApO1xuICAgICAgICBib3gxLnNjYWxlLnNldCgyLjMyOCwgNy45MDUsIDQuNjUxKTtcbiAgICAgICAgdGhpcy5hZGQoYm94MSk7XG4gICAgICAgIGNvbnN0IGJveDIgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3gyLnBvc2l0aW9uLnNldCgtNS42MDcsIC0wLjc1NCwgLTAuNzU4KTtcbiAgICAgICAgYm94Mi5yb3RhdGlvbi5zZXQoMCwgMC45OTQsIDApO1xuICAgICAgICBib3gyLnNjYWxlLnNldCgxLjk3MCwgMS41MzQsIDMuOTU1KTtcbiAgICAgICAgdGhpcy5hZGQoYm94Mik7XG4gICAgICAgIGNvbnN0IGJveDMgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3gzLnBvc2l0aW9uLnNldCg2LjE2NywgLTAuMTYsIDcuODAzKTtcbiAgICAgICAgYm94My5yb3RhdGlvbi5zZXQoMCwgMC41NjEsIDApO1xuICAgICAgICBib3gzLnNjYWxlLnNldCgzLjkyNywgNi4yODUsIDMuNjg3KTtcbiAgICAgICAgdGhpcy5hZGQoYm94Myk7XG4gICAgICAgIGNvbnN0IGJveDQgPSBuZXcgTWVzaChnZW9tZXRyeSwgYm94TWF0ZXJpYWwpO1xuICAgICAgICBib3g0LnBvc2l0aW9uLnNldCgtMi4wMTcsIDAuMDE4LCA2LjEyNCk7XG4gICAgICAgIGJveDQucm90YXRpb24uc2V0KDAsIDAuMzMzLCAwKTtcbiAgICAgICAgYm94NC5zY2FsZS5zZXQoMi4wMDIsIDQuNTY2LCAyLjA2NCk7XG4gICAgICAgIHRoaXMuYWRkKGJveDQpO1xuICAgICAgICBjb25zdCBib3g1ID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94NS5wb3NpdGlvbi5zZXQoMi4yOTEsIC0wLjc1NiwgLTIuNjIxKTtcbiAgICAgICAgYm94NS5yb3RhdGlvbi5zZXQoMCwgLTAuMjg2LCAwKTtcbiAgICAgICAgYm94NS5zY2FsZS5zZXQoMS41NDYsIDEuNTUyLCAxLjQ5Nik7XG4gICAgICAgIHRoaXMuYWRkKGJveDUpO1xuICAgICAgICBjb25zdCBib3g2ID0gbmV3IE1lc2goZ2VvbWV0cnksIGJveE1hdGVyaWFsKTtcbiAgICAgICAgYm94Ni5wb3NpdGlvbi5zZXQoLTIuMTkzLCAtMC4zNjksIC01LjU0Nyk7XG4gICAgICAgIGJveDYucm90YXRpb24uc2V0KDAsIDAuNTE2LCAwKTtcbiAgICAgICAgYm94Ni5zY2FsZS5zZXQoMy44NzUsIDMuNDg3LCAyLjk4Nik7XG4gICAgICAgIHRoaXMuYWRkKGJveDYpO1xuICAgICAgICAvLyAteF9sZWZ0XG4gICAgICAgIGNvbnN0IGxpZ2h0MSA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDgwKSk7XG4gICAgICAgIGxpZ2h0MS5wb3NpdGlvbi5zZXQoLTE0LjAsIDEwLjAsIDguMCk7XG4gICAgICAgIGxpZ2h0MS5zY2FsZS5zZXQoMC4xLCAyLjUsIDIuNSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0MSk7XG4gICAgICAgIC8vIC14X3JpZ2h0XG4gICAgICAgIGNvbnN0IGxpZ2h0MiA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDgwKSk7XG4gICAgICAgIGxpZ2h0Mi5wb3NpdGlvbi5zZXQoLTE0LjAsIDE0LjAsIC00LjApO1xuICAgICAgICBsaWdodDIuc2NhbGUuc2V0KDAuMSwgMi41LCAyLjUpO1xuICAgICAgICB0aGlzLmFkZChsaWdodDIpO1xuICAgICAgICAvLyAreCBvbmx5IG9uIGxpZ2h0XG4gICAgICAgIGNvbnN0IGxpZ2h0MyA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDIzKSk7XG4gICAgICAgIGxpZ2h0My5wb3NpdGlvbi5zZXQoMTQuMCwgMTIuMCwgMC4wKTtcbiAgICAgICAgbGlnaHQzLnNjYWxlLnNldCgwLjEsIDUuMCwgNS4wKTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQzKTtcbiAgICAgICAgLy8gK3pcbiAgICAgICAgY29uc3QgbGlnaHQ0ID0gbmV3IE1lc2goZ2VvbWV0cnksIHRoaXMuY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoMTYpKTtcbiAgICAgICAgbGlnaHQ0LnBvc2l0aW9uLnNldCgwLjAsIDkuMCwgMTQuMCk7XG4gICAgICAgIGxpZ2h0NC5zY2FsZS5zZXQoNS4wLCA1LjAsIDAuMSk7XG4gICAgICAgIHRoaXMuYWRkKGxpZ2h0NCk7XG4gICAgICAgIC8vIC16IHJpZ2h0XG4gICAgICAgIGNvbnN0IGxpZ2h0NSA9IG5ldyBNZXNoKGdlb21ldHJ5LCB0aGlzLmNyZWF0ZUFyZWFMaWdodE1hdGVyaWFsKDgwKSk7XG4gICAgICAgIGxpZ2h0NS5wb3NpdGlvbi5zZXQoNy4wLCA4LjAsIC0xNC4wKTtcbiAgICAgICAgbGlnaHQ1LnNjYWxlLnNldCgyLjUsIDIuNSwgMC4xKTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQ1KTtcbiAgICAgICAgLy8gLXogbGVmdFxuICAgICAgICBjb25zdCBsaWdodDYgPSBuZXcgTWVzaChnZW9tZXRyeSwgdGhpcy5jcmVhdGVBcmVhTGlnaHRNYXRlcmlhbCg4MCkpO1xuICAgICAgICBsaWdodDYucG9zaXRpb24uc2V0KC03LjAsIDE2LjAsIC0xNC4wKTtcbiAgICAgICAgbGlnaHQ2LnNjYWxlLnNldCgyLjUsIDIuNSwgMC4xKTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQ2KTtcbiAgICAgICAgLy8gK3lcbiAgICAgICAgY29uc3QgbGlnaHQ3ID0gbmV3IE1lc2goZ2VvbWV0cnksIHRoaXMuY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoMSkpO1xuICAgICAgICBsaWdodDcucG9zaXRpb24uc2V0KDAuMCwgMjAuMCwgMC4wKTtcbiAgICAgICAgbGlnaHQ3LnNjYWxlLnNldCgwLjEsIDAuMSwgMC4xKTtcbiAgICAgICAgdGhpcy5hZGQobGlnaHQ3KTtcbiAgICB9XG4gICAgY3JlYXRlQXJlYUxpZ2h0TWF0ZXJpYWwoaW50ZW5zaXR5KSB7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgIG1hdGVyaWFsLmNvbG9yLnNldFNjYWxhcihpbnRlbnNpdHkpO1xuICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW52aXJvbm1lbnRTY2VuZUFsdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $clone: () => (/* binding */ $clone),\n/* harmony export */   $prepare: () => (/* binding */ $prepare),\n/* harmony export */   $prepared: () => (/* binding */ $prepared),\n/* harmony export */   $preparedGLTF: () => (/* binding */ $preparedGLTF),\n/* harmony export */   GLTFInstance: () => (/* binding */ GLTFInstance)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_utils_SkeletonUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/utils/SkeletonUtils.js */ \"(ssr)/./node_modules/three/examples/jsm/utils/SkeletonUtils.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst $prepared = Symbol('prepared');\nconst $prepare = Symbol('prepare');\nconst $preparedGLTF = Symbol('preparedGLTF');\nconst $clone = Symbol('clone');\n/**\n * Represents the preparation and enhancement of the output of a Three.js\n * GLTFLoader (a Three.js-flavor \"GLTF\"), to make it suitable for optimal,\n * correct viewing in a given presentation context and also make the cloning\n * process more explicit and legible.\n *\n * A GLTFInstance is API-compatible with a Three.js-flavor \"GLTF\", so it should\n * be considered to be interchangeable with the loaded result of a GLTFLoader.\n *\n * This basic implementation only implements trivial preparation and enhancement\n * of a GLTF. These operations are intended to be enhanced by inheriting\n * classes.\n */\nclass GLTFInstance {\n    constructor(preparedGLTF) {\n        this[$preparedGLTF] = preparedGLTF;\n    }\n    /**\n     * Prepares a given GLTF for presentation and future cloning. A GLTF that is\n     * prepared can safely have this method invoked on it multiple times; it will\n     * only be prepared once, including after being cloned.\n     */\n    static prepare(source) {\n        if (source.scene == null) {\n            throw new Error('Model does not have a scene');\n        }\n        if (source[$prepared]) {\n            return source;\n        }\n        const prepared = this[$prepare](source);\n        // NOTE: ES5 Symbol polyfill is not compatible with spread operator\n        // so {...prepared, [$prepared]: true} does not work\n        prepared[$prepared] = true;\n        return prepared;\n    }\n    /**\n     * Override in an inheriting class to apply specialty one-time preparations\n     * for a given input GLTF.\n     */\n    static [$prepare](source) {\n        // TODO(#195,#1003): We don't currently support multiple scenes, so we don't\n        // bother preparing extra scenes for now:\n        const { scene } = source;\n        const scenes = [scene];\n        return Object.assign(Object.assign({}, source), { scene, scenes });\n    }\n    get parser() {\n        return this[$preparedGLTF].parser;\n    }\n    get animations() {\n        return this[$preparedGLTF].animations;\n    }\n    get scene() {\n        return this[$preparedGLTF].scene;\n    }\n    get scenes() {\n        return this[$preparedGLTF].scenes;\n    }\n    get cameras() {\n        return this[$preparedGLTF].cameras;\n    }\n    get asset() {\n        return this[$preparedGLTF].asset;\n    }\n    get userData() {\n        return this[$preparedGLTF].userData;\n    }\n    /**\n     * Creates and returns a copy of this instance.\n     */\n    clone() {\n        const GLTFInstanceConstructor = this.constructor;\n        const clonedGLTF = this[$clone]();\n        return new GLTFInstanceConstructor(clonedGLTF);\n    }\n    /**\n     * Cleans up any retained memory that might not otherwise be released when\n     * this instance is done being used.\n     */\n    dispose() {\n        this.scenes.forEach((scene) => {\n            scene.traverse((object) => {\n                if (!object.isMesh) {\n                    return;\n                }\n                const mesh = object;\n                const materials = Array.isArray(mesh.material) ? mesh.material : [mesh.material];\n                materials.forEach(material => {\n                    // Explicitly dispose any textures assigned to this material\n                    for (const propertyName in material) {\n                        const texture = material[propertyName];\n                        if (texture instanceof three__WEBPACK_IMPORTED_MODULE_0__.Texture) {\n                            const image = texture.source.data;\n                            if (image.close != null) {\n                                image.close();\n                            }\n                            texture.dispose();\n                        }\n                    }\n                    material.dispose();\n                });\n                mesh.geometry.dispose();\n            });\n        });\n    }\n    /**\n     * Override in an inheriting class to implement specialized cloning strategies\n     */\n    [$clone]() {\n        const source = this[$preparedGLTF];\n        // TODO(#195,#1003): We don't currently support multiple scenes, so we don't\n        // bother cloning extra scenes for now:\n        const scene = three_examples_jsm_utils_SkeletonUtils_js__WEBPACK_IMPORTED_MODULE_1__.clone(this.scene);\n        cloneVariantMaterials(scene, this.scene);\n        const scenes = [scene];\n        const userData = source.userData ? Object.assign({}, source.userData) : {};\n        return Object.assign(Object.assign({}, source), { scene, scenes, userData });\n    }\n}\n// Variant materials and original material instances are stored under\n// object.userData.variantMaterials/originalMaterial.\n// Three.js Object3D.clone() doesn't clone Three.js objects under\n// .userData so this function is a workaround.\nconst cloneVariantMaterials = (dst, src) => {\n    traversePair(dst, src, (dst, src) => {\n        if (src.userData.variantMaterials !== undefined) {\n            dst.userData.variantMaterials = new Map(src.userData.variantMaterials);\n        }\n        if (src.userData.variantData !== undefined) {\n            dst.userData.variantData = src.userData.variantData;\n        }\n        if (src.userData.originalMaterial !== undefined) {\n            dst.userData.originalMaterial = src.userData.originalMaterial;\n        }\n    });\n};\nconst traversePair = (obj1, obj2, callback) => {\n    callback(obj1, obj2);\n    // Assume obj1 and obj2 have the same tree structure\n    for (let i = 0; i < obj1.children.length; i++) {\n        traversePair(obj1.children[i], obj2.children[i], callback);\n    }\n};\n//# sourceMappingURL=GLTFInstance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvR0xURkluc3RhbmNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dDO0FBQzJDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0NBQWdDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSw2Q0FBNkMsYUFBYSxlQUFlO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLDBDQUFPO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNEVBQW1CO0FBQ3pDO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0QsNkNBQTZDLGFBQWEseUJBQXlCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9HTFRGSW5zdGFuY2UuanM/MzU3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0ICogYXMgU2tlbGV0b25VdGlscyBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vdXRpbHMvU2tlbGV0b25VdGlscy5qcyc7XG5leHBvcnQgY29uc3QgJHByZXBhcmVkID0gU3ltYm9sKCdwcmVwYXJlZCcpO1xuZXhwb3J0IGNvbnN0ICRwcmVwYXJlID0gU3ltYm9sKCdwcmVwYXJlJyk7XG5leHBvcnQgY29uc3QgJHByZXBhcmVkR0xURiA9IFN5bWJvbCgncHJlcGFyZWRHTFRGJyk7XG5leHBvcnQgY29uc3QgJGNsb25lID0gU3ltYm9sKCdjbG9uZScpO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBwcmVwYXJhdGlvbiBhbmQgZW5oYW5jZW1lbnQgb2YgdGhlIG91dHB1dCBvZiBhIFRocmVlLmpzXG4gKiBHTFRGTG9hZGVyIChhIFRocmVlLmpzLWZsYXZvciBcIkdMVEZcIiksIHRvIG1ha2UgaXQgc3VpdGFibGUgZm9yIG9wdGltYWwsXG4gKiBjb3JyZWN0IHZpZXdpbmcgaW4gYSBnaXZlbiBwcmVzZW50YXRpb24gY29udGV4dCBhbmQgYWxzbyBtYWtlIHRoZSBjbG9uaW5nXG4gKiBwcm9jZXNzIG1vcmUgZXhwbGljaXQgYW5kIGxlZ2libGUuXG4gKlxuICogQSBHTFRGSW5zdGFuY2UgaXMgQVBJLWNvbXBhdGlibGUgd2l0aCBhIFRocmVlLmpzLWZsYXZvciBcIkdMVEZcIiwgc28gaXQgc2hvdWxkXG4gKiBiZSBjb25zaWRlcmVkIHRvIGJlIGludGVyY2hhbmdlYWJsZSB3aXRoIHRoZSBsb2FkZWQgcmVzdWx0IG9mIGEgR0xURkxvYWRlci5cbiAqXG4gKiBUaGlzIGJhc2ljIGltcGxlbWVudGF0aW9uIG9ubHkgaW1wbGVtZW50cyB0cml2aWFsIHByZXBhcmF0aW9uIGFuZCBlbmhhbmNlbWVudFxuICogb2YgYSBHTFRGLiBUaGVzZSBvcGVyYXRpb25zIGFyZSBpbnRlbmRlZCB0byBiZSBlbmhhbmNlZCBieSBpbmhlcml0aW5nXG4gKiBjbGFzc2VzLlxuICovXG5leHBvcnQgY2xhc3MgR0xURkluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihwcmVwYXJlZEdMVEYpIHtcbiAgICAgICAgdGhpc1skcHJlcGFyZWRHTFRGXSA9IHByZXBhcmVkR0xURjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJlcGFyZXMgYSBnaXZlbiBHTFRGIGZvciBwcmVzZW50YXRpb24gYW5kIGZ1dHVyZSBjbG9uaW5nLiBBIEdMVEYgdGhhdCBpc1xuICAgICAqIHByZXBhcmVkIGNhbiBzYWZlbHkgaGF2ZSB0aGlzIG1ldGhvZCBpbnZva2VkIG9uIGl0IG11bHRpcGxlIHRpbWVzOyBpdCB3aWxsXG4gICAgICogb25seSBiZSBwcmVwYXJlZCBvbmNlLCBpbmNsdWRpbmcgYWZ0ZXIgYmVpbmcgY2xvbmVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBwcmVwYXJlKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLnNjZW5lID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgZG9lcyBub3QgaGF2ZSBhIHNjZW5lJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZVskcHJlcGFyZWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXBhcmVkID0gdGhpc1skcHJlcGFyZV0oc291cmNlKTtcbiAgICAgICAgLy8gTk9URTogRVM1IFN5bWJvbCBwb2x5ZmlsbCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHNwcmVhZCBvcGVyYXRvclxuICAgICAgICAvLyBzbyB7Li4ucHJlcGFyZWQsIFskcHJlcGFyZWRdOiB0cnVlfSBkb2VzIG5vdCB3b3JrXG4gICAgICAgIHByZXBhcmVkWyRwcmVwYXJlZF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gcHJlcGFyZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGluIGFuIGluaGVyaXRpbmcgY2xhc3MgdG8gYXBwbHkgc3BlY2lhbHR5IG9uZS10aW1lIHByZXBhcmF0aW9uc1xuICAgICAqIGZvciBhIGdpdmVuIGlucHV0IEdMVEYuXG4gICAgICovXG4gICAgc3RhdGljIFskcHJlcGFyZV0oc291cmNlKSB7XG4gICAgICAgIC8vIFRPRE8oIzE5NSwjMTAwMyk6IFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IG11bHRpcGxlIHNjZW5lcywgc28gd2UgZG9uJ3RcbiAgICAgICAgLy8gYm90aGVyIHByZXBhcmluZyBleHRyYSBzY2VuZXMgZm9yIG5vdzpcbiAgICAgICAgY29uc3QgeyBzY2VuZSB9ID0gc291cmNlO1xuICAgICAgICBjb25zdCBzY2VuZXMgPSBbc2NlbmVdO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzb3VyY2UpLCB7IHNjZW5lLCBzY2VuZXMgfSk7XG4gICAgfVxuICAgIGdldCBwYXJzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRwcmVwYXJlZEdMVEZdLnBhcnNlcjtcbiAgICB9XG4gICAgZ2V0IGFuaW1hdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRwcmVwYXJlZEdMVEZdLmFuaW1hdGlvbnM7XG4gICAgfVxuICAgIGdldCBzY2VuZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHByZXBhcmVkR0xURl0uc2NlbmU7XG4gICAgfVxuICAgIGdldCBzY2VuZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRwcmVwYXJlZEdMVEZdLnNjZW5lcztcbiAgICB9XG4gICAgZ2V0IGNhbWVyYXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRwcmVwYXJlZEdMVEZdLmNhbWVyYXM7XG4gICAgfVxuICAgIGdldCBhc3NldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHByZXBhcmVkR0xURl0uYXNzZXQ7XG4gICAgfVxuICAgIGdldCB1c2VyRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHByZXBhcmVkR0xURl0udXNlckRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IEdMVEZJbnN0YW5jZUNvbnN0cnVjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgY2xvbmVkR0xURiA9IHRoaXNbJGNsb25lXSgpO1xuICAgICAgICByZXR1cm4gbmV3IEdMVEZJbnN0YW5jZUNvbnN0cnVjdG9yKGNsb25lZEdMVEYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgYW55IHJldGFpbmVkIG1lbW9yeSB0aGF0IG1pZ2h0IG5vdCBvdGhlcndpc2UgYmUgcmVsZWFzZWQgd2hlblxuICAgICAqIHRoaXMgaW5zdGFuY2UgaXMgZG9uZSBiZWluZyB1c2VkLlxuICAgICAqL1xuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuc2NlbmVzLmZvckVhY2goKHNjZW5lKSA9PiB7XG4gICAgICAgICAgICBzY2VuZS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFvYmplY3QuaXNNZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzaCA9IG9iamVjdDtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbHMgPSBBcnJheS5pc0FycmF5KG1lc2gubWF0ZXJpYWwpID8gbWVzaC5tYXRlcmlhbCA6IFttZXNoLm1hdGVyaWFsXTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbHMuZm9yRWFjaChtYXRlcmlhbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgZGlzcG9zZSBhbnkgdGV4dHVyZXMgYXNzaWduZWQgdG8gdGhpcyBtYXRlcmlhbFxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBpbiBtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZSA9IG1hdGVyaWFsW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IHRleHR1cmUuc291cmNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLmNsb3NlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBpbiBhbiBpbmhlcml0aW5nIGNsYXNzIHRvIGltcGxlbWVudCBzcGVjaWFsaXplZCBjbG9uaW5nIHN0cmF0ZWdpZXNcbiAgICAgKi9cbiAgICBbJGNsb25lXSgpIHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpc1skcHJlcGFyZWRHTFRGXTtcbiAgICAgICAgLy8gVE9ETygjMTk1LCMxMDAzKTogV2UgZG9uJ3QgY3VycmVudGx5IHN1cHBvcnQgbXVsdGlwbGUgc2NlbmVzLCBzbyB3ZSBkb24ndFxuICAgICAgICAvLyBib3RoZXIgY2xvbmluZyBleHRyYSBzY2VuZXMgZm9yIG5vdzpcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBTa2VsZXRvblV0aWxzLmNsb25lKHRoaXMuc2NlbmUpO1xuICAgICAgICBjbG9uZVZhcmlhbnRNYXRlcmlhbHMoc2NlbmUsIHRoaXMuc2NlbmUpO1xuICAgICAgICBjb25zdCBzY2VuZXMgPSBbc2NlbmVdO1xuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IHNvdXJjZS51c2VyRGF0YSA/IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZS51c2VyRGF0YSkgOiB7fTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc291cmNlKSwgeyBzY2VuZSwgc2NlbmVzLCB1c2VyRGF0YSB9KTtcbiAgICB9XG59XG4vLyBWYXJpYW50IG1hdGVyaWFscyBhbmQgb3JpZ2luYWwgbWF0ZXJpYWwgaW5zdGFuY2VzIGFyZSBzdG9yZWQgdW5kZXJcbi8vIG9iamVjdC51c2VyRGF0YS52YXJpYW50TWF0ZXJpYWxzL29yaWdpbmFsTWF0ZXJpYWwuXG4vLyBUaHJlZS5qcyBPYmplY3QzRC5jbG9uZSgpIGRvZXNuJ3QgY2xvbmUgVGhyZWUuanMgb2JqZWN0cyB1bmRlclxuLy8gLnVzZXJEYXRhIHNvIHRoaXMgZnVuY3Rpb24gaXMgYSB3b3JrYXJvdW5kLlxuY29uc3QgY2xvbmVWYXJpYW50TWF0ZXJpYWxzID0gKGRzdCwgc3JjKSA9PiB7XG4gICAgdHJhdmVyc2VQYWlyKGRzdCwgc3JjLCAoZHN0LCBzcmMpID0+IHtcbiAgICAgICAgaWYgKHNyYy51c2VyRGF0YS52YXJpYW50TWF0ZXJpYWxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRzdC51c2VyRGF0YS52YXJpYW50TWF0ZXJpYWxzID0gbmV3IE1hcChzcmMudXNlckRhdGEudmFyaWFudE1hdGVyaWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNyYy51c2VyRGF0YS52YXJpYW50RGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkc3QudXNlckRhdGEudmFyaWFudERhdGEgPSBzcmMudXNlckRhdGEudmFyaWFudERhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNyYy51c2VyRGF0YS5vcmlnaW5hbE1hdGVyaWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRzdC51c2VyRGF0YS5vcmlnaW5hbE1hdGVyaWFsID0gc3JjLnVzZXJEYXRhLm9yaWdpbmFsTWF0ZXJpYWw7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5jb25zdCB0cmF2ZXJzZVBhaXIgPSAob2JqMSwgb2JqMiwgY2FsbGJhY2spID0+IHtcbiAgICBjYWxsYmFjayhvYmoxLCBvYmoyKTtcbiAgICAvLyBBc3N1bWUgb2JqMSBhbmQgb2JqMiBoYXZlIHRoZSBzYW1lIHRyZWUgc3RydWN0dXJlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoxLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyYXZlcnNlUGFpcihvYmoxLmNoaWxkcmVuW2ldLCBvYmoyLmNoaWxkcmVuW2ldLCBjYWxsYmFjayk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdMVEZJbnN0YW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Hotspot.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hotspot: () => (/* binding */ Hotspot)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"(ssr)/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\nclass Hotspot extends three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_2__.CSS2DObject {\n    constructor(config) {\n        super(document.createElement('div'));\n        this.normal = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 1, 0);\n        this.initialized = false;\n        this.referenceCount = 1;\n        this.pivot = document.createElement('div');\n        this.slot = document.createElement('slot');\n        this.element.classList.add('annotation-wrapper');\n        this.slot.name = config.name;\n        this.element.appendChild(this.pivot);\n        this.pivot.appendChild(this.slot);\n        this.updatePosition(config.position);\n        this.updateNormal(config.normal);\n    }\n    get facingCamera() {\n        return !this.element.classList.contains('hide');\n    }\n    /**\n     * Sets the hotspot to be in the highly visible foreground state.\n     */\n    show() {\n        if (!this.facingCamera || !this.initialized) {\n            this.updateVisibility(true);\n        }\n    }\n    /**\n     * Sets the hotspot to be in the diminished background state.\n     */\n    hide() {\n        if (this.facingCamera || !this.initialized) {\n            this.updateVisibility(false);\n        }\n    }\n    /**\n     * Call this when adding elements to the same slot to keep track.\n     */\n    increment() {\n        this.referenceCount++;\n    }\n    /**\n     * Call this when removing elements from the slot; returns true when the slot\n     * is unused.\n     */\n    decrement() {\n        if (this.referenceCount > 0) {\n            --this.referenceCount;\n        }\n        return this.referenceCount === 0;\n    }\n    /**\n     * Change the position of the hotspot to the input string, in the same format\n     * as the data-position attribute.\n     */\n    updatePosition(position) {\n        if (position == null)\n            return;\n        const positionNodes = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_1__.parseExpressions)(position)[0].terms;\n        for (let i = 0; i < 3; ++i) {\n            this.position.setComponent(i, (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(positionNodes[i]).number);\n        }\n        this.updateMatrixWorld();\n    }\n    /**\n     * Change the hotspot's normal to the input string, in the same format as the\n     * data-normal attribute.\n     */\n    updateNormal(normal) {\n        if (normal == null)\n            return;\n        const normalNodes = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_1__.parseExpressions)(normal)[0].terms;\n        for (let i = 0; i < 3; ++i) {\n            this.normal.setComponent(i, (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnit)(normalNodes[i]).number);\n        }\n    }\n    orient(radians) {\n        this.pivot.style.transform = `rotate(${radians}rad)`;\n    }\n    updateVisibility(show) {\n        // NOTE: IE11 doesn't support a second arg for classList.toggle\n        if (show) {\n            this.element.classList.remove('hide');\n        }\n        else {\n            this.element.classList.add('hide');\n        }\n        // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n        // use that here.\n        this.slot.assignedNodes().forEach((node) => {\n            if (node.nodeType !== Node.ELEMENT_NODE) {\n                return;\n            }\n            const element = node;\n            // Visibility attribute can be configured per-node in the hotspot:\n            const visibilityAttribute = element.dataset.visibilityAttribute;\n            if (visibilityAttribute != null) {\n                const attributeName = `data-${visibilityAttribute}`;\n                // NOTE: IE11 doesn't support toggleAttribute\n                if (show) {\n                    element.setAttribute(attributeName, '');\n                }\n                else {\n                    element.removeAttribute(attributeName);\n                }\n            }\n            element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n                detail: {\n                    visible: show,\n                },\n            }));\n        });\n        this.initialized = true;\n    }\n}\n//# sourceMappingURL=Hotspot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelScene.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/ModelScene.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IlluminationRole: () => (/* binding */ IlluminationRole),\n/* harmony export */   ModelScene: () => (/* binding */ ModelScene)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"(ssr)/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\");\n/* harmony import */ var _features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/scene-graph.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/scene-graph.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles/conversions.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/conversions.js\");\n/* harmony import */ var _styles_parsers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/parsers.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/styles/parsers.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* harmony import */ var _Hotspot_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Hotspot.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Hotspot.js\");\n/* harmony import */ var _ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ModelUtils.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js\");\n/* harmony import */ var _Shadow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Shadow.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Shadow.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\nconst MIN_SHADOW_RATIO = 100;\nconst IlluminationRole = {\n    Primary: 'primary',\n    Secondary: 'secondary'\n};\nconst view = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst target = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst normalWorld = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst raycaster = new three__WEBPACK_IMPORTED_MODULE_9__.Raycaster();\nconst vector3 = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\nconst ndc = new three__WEBPACK_IMPORTED_MODULE_9__.Vector2();\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nclass ModelScene extends three__WEBPACK_IMPORTED_MODULE_9__.Scene {\n    constructor({ canvas, element, width, height }) {\n        super();\n        this.annotationRenderer = new three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_10__.CSS2DRenderer();\n        this.schemaElement = document.createElement('script');\n        this.width = 1;\n        this.height = 1;\n        this.aspect = 1;\n        this.scaleStep = 0;\n        this.renderCount = 0;\n        this.externalRenderer = null;\n        // These default camera values are never used, as they are reset once the\n        // model is loaded and framing is computed.\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_9__.PerspectiveCamera(45, 1, 0.1, 100);\n        this.xrCamera = null;\n        this.url = null;\n        this.target = new three__WEBPACK_IMPORTED_MODULE_9__.Object3D();\n        this.animationNames = [];\n        this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_9__.Box3();\n        this.boundingSphere = new three__WEBPACK_IMPORTED_MODULE_9__.Sphere();\n        this.size = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\n        this.idealAspect = 0;\n        this.framedFoVDeg = 0;\n        this.shadow = null;\n        this.shadowIntensity = 0;\n        this.shadowSoftness = 1;\n        this.bakedShadows = new Set();\n        this.exposure = 1;\n        this.canScale = true;\n        this.isDirty = false;\n        this.goalTarget = new three__WEBPACK_IMPORTED_MODULE_9__.Vector3();\n        this.targetDamperX = new _Damper_js__WEBPACK_IMPORTED_MODULE_5__.Damper();\n        this.targetDamperY = new _Damper_js__WEBPACK_IMPORTED_MODULE_5__.Damper();\n        this.targetDamperZ = new _Damper_js__WEBPACK_IMPORTED_MODULE_5__.Damper();\n        this._currentGLTF = null;\n        this._model = null;\n        this.cancelPendingSourceChange = null;\n        this.animationsByName = new Map();\n        this.currentAnimationAction = null;\n        this.name = 'ModelScene';\n        this.element = element;\n        this.canvas = canvas;\n        // These default camera values are never used, as they are reset once the\n        // model is loaded and framing is computed.\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_9__.PerspectiveCamera(45, 1, 0.1, 100);\n        this.camera.name = 'MainCamera';\n        this.add(this.target);\n        this.setSize(width, height);\n        this.target.name = 'Target';\n        this.mixer = new three__WEBPACK_IMPORTED_MODULE_9__.AnimationMixer(this.target);\n        const { domElement } = this.annotationRenderer;\n        const { style } = domElement;\n        style.display = 'none';\n        style.pointerEvents = 'none';\n        style.position = 'absolute';\n        style.top = '0';\n        this.element.shadowRoot.querySelector('.default').appendChild(domElement);\n        this.schemaElement.setAttribute('type', 'application/ld+json');\n    }\n    /**\n     * Function to create the context lazily, as when there is only one\n     * <model-viewer> element, the renderer's 3D context can be displayed\n     * directly. This extra context is necessary to copy the renderings into when\n     * there are more than one.\n     */\n    get context() {\n        return this.canvas.getContext('2d');\n    }\n    getCamera() {\n        return this.xrCamera != null ? this.xrCamera : this.camera;\n    }\n    queueRender() {\n        this.isDirty = true;\n    }\n    shouldRender() {\n        return this.isDirty;\n    }\n    hasRendered() {\n        this.isDirty = false;\n    }\n    forceRescale() {\n        this.scaleStep = -1;\n        this.queueRender();\n    }\n    /**\n     * Pass in a THREE.Object3D to be controlled\n     * by this model.\n     */\n    async setObject(model) {\n        this.reset();\n        this._model = model;\n        this.target.add(model);\n        await this.setupScene();\n    }\n    /**\n     * Sets the model via URL.\n     */\n    async setSource(url, progressCallback = () => { }) {\n        if (!url || url === this.url) {\n            progressCallback(1);\n            return;\n        }\n        this.reset();\n        this.url = url;\n        if (this.externalRenderer != null) {\n            const framingInfo = await this.externalRenderer.load(progressCallback);\n            this.boundingSphere.radius = framingInfo.framedRadius;\n            this.idealAspect = framingInfo.fieldOfViewAspect;\n            return;\n        }\n        // If we have pending work due to a previous source change in progress,\n        // cancel it so that we do not incur a race condition:\n        if (this.cancelPendingSourceChange != null) {\n            this.cancelPendingSourceChange();\n            this.cancelPendingSourceChange = null;\n        }\n        let gltf;\n        try {\n            gltf = await new Promise(async (resolve, reject) => {\n                this.cancelPendingSourceChange = () => reject();\n                try {\n                    const result = await this.element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].loader.load(url, this.element, progressCallback);\n                    resolve(result);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n        }\n        catch (error) {\n            if (error == null) {\n                // Loading was cancelled, so silently return\n                return;\n            }\n            throw error;\n        }\n        this.cancelPendingSourceChange = null;\n        this.reset();\n        this.url = url;\n        this._currentGLTF = gltf;\n        if (gltf != null) {\n            this._model = gltf.scene;\n            this.target.add(gltf.scene);\n        }\n        const { animations } = gltf;\n        const animationsByName = new Map();\n        const animationNames = [];\n        for (const animation of animations) {\n            animationsByName.set(animation.name, animation);\n            animationNames.push(animation.name);\n        }\n        this.animations = animations;\n        this.animationsByName = animationsByName;\n        this.animationNames = animationNames;\n        await this.setupScene();\n    }\n    async setupScene() {\n        this.applyTransform();\n        this.updateBoundingBox();\n        await this.updateFraming();\n        this.updateShadow();\n        this.setShadowIntensity(this.shadowIntensity);\n    }\n    reset() {\n        this.url = null;\n        this.queueRender();\n        if (this.shadow != null) {\n            this.shadow.setIntensity(0);\n        }\n        this.bakedShadows.clear();\n        const { _model } = this;\n        if (_model != null) {\n            _model.removeFromParent();\n            this._model = null;\n        }\n        const gltf = this._currentGLTF;\n        if (gltf != null) {\n            gltf.dispose();\n            this._currentGLTF = null;\n        }\n        if (this.currentAnimationAction != null) {\n            this.currentAnimationAction.stop();\n            this.currentAnimationAction = null;\n        }\n        this.mixer.stopAllAction();\n        this.mixer.uncacheRoot(this);\n    }\n    dispose() {\n        this.reset();\n        if (this.shadow != null) {\n            this.shadow.dispose();\n            this.shadow = null;\n        }\n        this.element[_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__.$currentGLTF] = null;\n        this.element[_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__.$originalGltfJson] = null;\n        this.element[_features_scene_graph_js__WEBPACK_IMPORTED_MODULE_0__.$model] = null;\n    }\n    get currentGLTF() {\n        return this._currentGLTF;\n    }\n    /**\n     * Updates the ModelScene for a new container size in CSS pixels.\n     */\n    setSize(width, height) {\n        if (this.width === width && this.height === height) {\n            return;\n        }\n        this.width = Math.max(width, 1);\n        this.height = Math.max(height, 1);\n        this.annotationRenderer.setSize(width, height);\n        this.aspect = this.width / this.height;\n        if (this.externalRenderer != null) {\n            const dpr = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.resolveDpr)();\n            this.externalRenderer.resize(width * dpr, height * dpr);\n        }\n        this.queueRender();\n    }\n    markBakedShadow(mesh) {\n        mesh.userData.shadow = true;\n        this.bakedShadows.add(mesh);\n    }\n    unmarkBakedShadow(mesh) {\n        mesh.userData.shadow = false;\n        mesh.visible = true;\n        this.bakedShadows.delete(mesh);\n        this.boundingBox.expandByObject(mesh);\n    }\n    findBakedShadows(group) {\n        const boundingBox = new three__WEBPACK_IMPORTED_MODULE_9__.Box3();\n        group.traverse((object) => {\n            const mesh = object;\n            if (!mesh.isMesh) {\n                return;\n            }\n            const material = mesh.material;\n            if (!material.transparent) {\n                return;\n            }\n            boundingBox.setFromObject(mesh);\n            const size = boundingBox.getSize(vector3);\n            const minDim = Math.min(size.x, size.y, size.z);\n            const maxDim = Math.max(size.x, size.y, size.z);\n            if (maxDim < MIN_SHADOW_RATIO * minDim) {\n                return;\n            }\n            this.markBakedShadow(mesh);\n        });\n    }\n    checkBakedShadows() {\n        const { min, max } = this.boundingBox;\n        const shadowBox = new three__WEBPACK_IMPORTED_MODULE_9__.Box3();\n        this.boundingBox.getSize(this.size);\n        for (const mesh of this.bakedShadows) {\n            shadowBox.setFromObject(mesh);\n            if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO &&\n                shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n                shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n                // floor shadow\n                continue;\n            }\n            if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO &&\n                shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n                shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n                // wall shadow\n                continue;\n            }\n            this.unmarkBakedShadow(mesh);\n        }\n    }\n    applyTransform() {\n        const { model } = this;\n        if (model == null) {\n            return;\n        }\n        const orientation = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_3__.parseExpressions)(this.element.orientation)[0]\n            .terms;\n        const roll = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__.normalizeUnit)(orientation[0]).number;\n        const pitch = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__.normalizeUnit)(orientation[1]).number;\n        const yaw = (0,_styles_conversions_js__WEBPACK_IMPORTED_MODULE_2__.normalizeUnit)(orientation[2]).number;\n        model.quaternion.setFromEuler(new three__WEBPACK_IMPORTED_MODULE_9__.Euler(pitch, yaw, roll, 'YXZ'));\n        const scale = (0,_styles_parsers_js__WEBPACK_IMPORTED_MODULE_3__.parseExpressions)(this.element.scale)[0]\n            .terms;\n        model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n    }\n    updateBoundingBox() {\n        const { model } = this;\n        if (model == null) {\n            return;\n        }\n        this.target.remove(model);\n        this.findBakedShadows(model);\n        const bound = (box, vertex) => {\n            return box.expandByPoint(vertex);\n        };\n        this.setBakedShadowVisibility(false);\n        this.boundingBox = (0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, bound, new three__WEBPACK_IMPORTED_MODULE_9__.Box3());\n        // If there's nothing but the baked shadow, then it's not a baked shadow.\n        if (this.boundingBox.isEmpty()) {\n            this.setBakedShadowVisibility(true);\n            this.bakedShadows.forEach((mesh) => this.unmarkBakedShadow(mesh));\n            this.boundingBox = (0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, bound, new three__WEBPACK_IMPORTED_MODULE_9__.Box3());\n        }\n        this.checkBakedShadows();\n        this.setBakedShadowVisibility();\n        this.boundingBox.getSize(this.size);\n        this.target.add(model);\n    }\n    /**\n     * Calculates the boundingSphere and idealAspect that allows the 3D\n     * object to be framed tightly in a 2D window of any aspect ratio without\n     * clipping at any camera orbit. The camera's center target point can be\n     * optionally specified. If no center is specified, it defaults to the center\n     * of the bounding box, which means asymmetric models will tend to be tight on\n     * one side instead of both. Proper choice of center can correct this.\n     */\n    async updateFraming() {\n        const { model } = this;\n        if (model == null) {\n            return;\n        }\n        this.target.remove(model);\n        this.setBakedShadowVisibility(false);\n        const { center } = this.boundingSphere;\n        this.element.requestUpdate('cameraTarget');\n        await this.element.updateComplete;\n        center.copy(this.getTarget());\n        const radiusSquared = (value, vertex) => {\n            return Math.max(value, center.distanceToSquared(vertex));\n        };\n        this.boundingSphere.radius =\n            Math.sqrt((0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, radiusSquared, 0));\n        const horizontalTanFov = (value, vertex) => {\n            vertex.sub(center);\n            const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n            return Math.max(value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n        };\n        this.idealAspect = (0,_ModelUtils_js__WEBPACK_IMPORTED_MODULE_7__.reduceVertices)(model, horizontalTanFov, 0) /\n            Math.tan((this.framedFoVDeg / 2) * Math.PI / 180);\n        this.setBakedShadowVisibility();\n        this.target.add(model);\n    }\n    setBakedShadowVisibility(visible = this.shadowIntensity <= 0) {\n        for (const shadow of this.bakedShadows) {\n            shadow.visible = visible;\n        }\n    }\n    idealCameraDistance() {\n        const halfFovRad = (this.framedFoVDeg / 2) * Math.PI / 180;\n        return this.boundingSphere.radius / Math.sin(halfFovRad);\n    }\n    /**\n     * Set's the framedFieldOfView based on the aspect ratio of the window in\n     * order to keep the model fully visible at any camera orientation.\n     */\n    adjustedFoV(fovDeg) {\n        const vertical = Math.tan((fovDeg / 2) * Math.PI / 180) *\n            Math.max(1, this.idealAspect / this.aspect);\n        return 2 * Math.atan(vertical) * 180 / Math.PI;\n    }\n    getNDC(clientX, clientY) {\n        if (this.xrCamera != null) {\n            ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n        }\n        else {\n            const rect = this.element.getBoundingClientRect();\n            ndc.set((clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n        }\n        ndc.multiplyScalar(2).subScalar(1);\n        ndc.y *= -1;\n        return ndc;\n    }\n    /**\n     * Returns the size of the corresponding canvas element.\n     */\n    getSize() {\n        return { width: this.width, height: this.height };\n    }\n    setEnvironmentAndSkybox(environment, skybox) {\n        if (this.element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$renderer].arRenderer.presentedScene === this) {\n            return;\n        }\n        this.environment = environment;\n        this.background = skybox;\n        this.queueRender();\n    }\n    /**\n     * Sets the point in model coordinates the model should orbit/pivot around.\n     */\n    setTarget(modelX, modelY, modelZ) {\n        this.goalTarget.set(-modelX, -modelY, -modelZ);\n    }\n    /**\n     * Set the decay time of, affects the speed of target transitions.\n     */\n    setTargetDamperDecayTime(decayMilliseconds) {\n        this.targetDamperX.setDecayTime(decayMilliseconds);\n        this.targetDamperY.setDecayTime(decayMilliseconds);\n        this.targetDamperZ.setDecayTime(decayMilliseconds);\n    }\n    /**\n     * Gets the point in model coordinates the model should orbit/pivot around.\n     */\n    getTarget() {\n        return this.goalTarget.clone().multiplyScalar(-1);\n    }\n    /**\n     * Shifts the model to the target point immediately instead of easing in.\n     */\n    jumpToGoal() {\n        this.updateTarget(_Damper_js__WEBPACK_IMPORTED_MODULE_5__.SETTLING_TIME);\n    }\n    /**\n     * This should be called every frame with the frame delta to cause the target\n     * to transition to its set point.\n     */\n    updateTarget(delta) {\n        const goal = this.goalTarget;\n        const target = this.target.position;\n        if (!goal.equals(target)) {\n            const normalization = this.boundingSphere.radius / 10;\n            let { x, y, z } = target;\n            x = this.targetDamperX.update(x, goal.x, delta, normalization);\n            y = this.targetDamperY.update(y, goal.y, delta, normalization);\n            z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n            this.target.position.set(x, y, z);\n            this.target.updateMatrixWorld();\n            this.queueRender();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Yaw the +z (front) of the model toward the indicated world coordinates.\n     */\n    pointTowards(worldX, worldZ) {\n        const { x, z } = this.position;\n        this.yaw = Math.atan2(worldX - x, worldZ - z);\n    }\n    get model() {\n        return this._model;\n    }\n    /**\n     * Yaw is the scene's orientation about the y-axis, around the rotation\n     * center.\n     */\n    set yaw(radiansY) {\n        this.rotation.y = radiansY;\n        this.queueRender();\n    }\n    get yaw() {\n        return this.rotation.y;\n    }\n    set animationTime(value) {\n        this.mixer.setTime(value);\n        this.queueShadowRender();\n    }\n    get animationTime() {\n        if (this.currentAnimationAction != null) {\n            const loopCount = Math.max(this.currentAnimationAction._loopCount, 0);\n            if (this.currentAnimationAction.loop === three__WEBPACK_IMPORTED_MODULE_9__.LoopPingPong &&\n                (loopCount & 1) === 1) {\n                return this.duration - this.currentAnimationAction.time;\n            }\n            else {\n                return this.currentAnimationAction.time;\n            }\n        }\n        return 0;\n    }\n    set animationTimeScale(value) {\n        this.mixer.timeScale = value;\n    }\n    get animationTimeScale() {\n        return this.mixer.timeScale;\n    }\n    get duration() {\n        if (this.currentAnimationAction != null &&\n            this.currentAnimationAction.getClip()) {\n            return this.currentAnimationAction.getClip().duration;\n        }\n        return 0;\n    }\n    get hasActiveAnimation() {\n        return this.currentAnimationAction != null;\n    }\n    /**\n     * Plays an animation if there are any associated with the current model.\n     * Accepts an optional string name of an animation to play. If no name is\n     * provided, or if no animation is found by the given name, always falls back\n     * to playing the first animation.\n     */\n    playAnimation(name = null, crossfadeTime = 0, loopMode = three__WEBPACK_IMPORTED_MODULE_9__.LoopRepeat, repetitionCount = Infinity) {\n        if (this._currentGLTF == null) {\n            return;\n        }\n        const { animations } = this;\n        if (animations == null || animations.length === 0) {\n            console.warn(`Cannot play animation (model does not have any animations)`);\n            return;\n        }\n        let animationClip = null;\n        if (name != null) {\n            animationClip = this.animationsByName.get(name);\n            if (animationClip == null) {\n                const parsedAnimationIndex = parseInt(name);\n                if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 &&\n                    parsedAnimationIndex < animations.length) {\n                    animationClip = animations[parsedAnimationIndex];\n                }\n            }\n        }\n        if (animationClip == null) {\n            animationClip = animations[0];\n        }\n        try {\n            const { currentAnimationAction: lastAnimationAction } = this;\n            const action = this.mixer.clipAction(animationClip, this);\n            this.currentAnimationAction = action;\n            if (this.element.paused) {\n                this.mixer.stopAllAction();\n            }\n            else {\n                action.paused = false;\n                if (lastAnimationAction != null && action !== lastAnimationAction) {\n                    action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n                }\n                else if (this.animationTimeScale > 0 &&\n                    this.animationTime == this.duration) {\n                    // This is a workaround for what I believe is a three.js bug.\n                    this.animationTime = 0;\n                }\n            }\n            action.setLoop(loopMode, repetitionCount);\n            action.enabled = true;\n            action.clampWhenFinished = true;\n            action.play();\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    stopAnimation() {\n        this.currentAnimationAction = null;\n        this.mixer.stopAllAction();\n    }\n    updateAnimation(step) {\n        this.mixer.update(step);\n        this.queueShadowRender();\n    }\n    subscribeMixerEvent(event, callback) {\n        this.mixer.addEventListener(event, callback);\n    }\n    /**\n     * Call if the object has been changed in such a way that the shadow's shape\n     * has changed (not a rotation about the Y axis).\n     */\n    updateShadow() {\n        const shadow = this.shadow;\n        if (shadow != null) {\n            const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n            shadow.setScene(this, this.shadowSoftness, side);\n            shadow.needsUpdate = true;\n        }\n    }\n    renderShadow(renderer) {\n        const shadow = this.shadow;\n        if (shadow != null && shadow.needsUpdate == true) {\n            shadow.render(renderer, this);\n            shadow.needsUpdate = false;\n        }\n    }\n    queueShadowRender() {\n        if (this.shadow != null) {\n            this.shadow.needsUpdate = true;\n        }\n    }\n    /**\n     * Sets the shadow's intensity, lazily creating the shadow as necessary.\n     */\n    setShadowIntensity(shadowIntensity) {\n        this.shadowIntensity = shadowIntensity;\n        if (this._currentGLTF == null) {\n            return;\n        }\n        this.setBakedShadowVisibility();\n        if (shadowIntensity <= 0 && this.shadow == null) {\n            return;\n        }\n        if (this.shadow == null) {\n            const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n            this.shadow = new _Shadow_js__WEBPACK_IMPORTED_MODULE_8__.Shadow(this, this.shadowSoftness, side);\n        }\n        this.shadow.setIntensity(shadowIntensity);\n    }\n    /**\n     * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n     * shadow's resolution. This involves reallocation, so it should not be\n     * changed frequently. Softer shadows are cheaper to render.\n     */\n    setShadowSoftness(softness) {\n        this.shadowSoftness = softness;\n        const shadow = this.shadow;\n        if (shadow != null) {\n            shadow.setSoftness(softness);\n        }\n    }\n    /**\n     * Shift the floor vertically from the bottom of the model's bounding box by\n     * offset (should generally be negative).\n     */\n    setShadowOffset(offset) {\n        const shadow = this.shadow;\n        if (shadow != null) {\n            shadow.setOffset(offset);\n        }\n    }\n    get raycaster() {\n        return raycaster;\n    }\n    /**\n     * This method returns the world position, model-space normal and texture\n     * coordinate of the point on the mesh corresponding to the input pixel\n     * coordinates given relative to the model-viewer element. If the mesh\n     * is not hit, the result is null.\n     */\n    positionAndNormalFromPoint(ndcPosition, object = this) {\n        this.raycaster.setFromCamera(ndcPosition, this.getCamera());\n        const hits = this.raycaster.intersectObject(object, true);\n        const hit = hits.find((hit) => hit.object.visible && !hit.object.userData.shadow);\n        if (hit == null || hit.face == null) {\n            return null;\n        }\n        if (hit.uv == null) {\n            return { position: hit.point, normal: hit.face.normal, uv: null };\n        }\n        hit.face.normal.applyNormalMatrix(new three__WEBPACK_IMPORTED_MODULE_9__.Matrix3().getNormalMatrix(hit.object.matrixWorld));\n        return { position: hit.point, normal: hit.face.normal, uv: hit.uv };\n    }\n    /**\n     * The following methods are for operating on the set of Hotspot objects\n     * attached to the scene. These come from DOM elements, provided to slots by\n     * the Annotation Mixin.\n     */\n    addHotspot(hotspot) {\n        this.target.add(hotspot);\n        // This happens automatically in render(), but we do it early so that\n        // the slots appear in the shadow DOM and the elements get attached,\n        // allowing us to dispatch events on them.\n        this.annotationRenderer.domElement.appendChild(hotspot.element);\n    }\n    removeHotspot(hotspot) {\n        this.target.remove(hotspot);\n    }\n    /**\n     * Helper method to apply a function to all hotspots.\n     */\n    forHotspots(func) {\n        const { children } = this.target;\n        for (let i = 0, l = children.length; i < l; i++) {\n            const hotspot = children[i];\n            if (hotspot instanceof _Hotspot_js__WEBPACK_IMPORTED_MODULE_6__.Hotspot) {\n                func(hotspot);\n            }\n        }\n    }\n    /**\n     * Update the CSS visibility of the hotspots based on whether their normals\n     * point toward the camera.\n     */\n    updateHotspots(viewerPosition) {\n        this.forHotspots((hotspot) => {\n            view.copy(viewerPosition);\n            target.setFromMatrixPosition(hotspot.matrixWorld);\n            view.sub(target);\n            normalWorld.copy(hotspot.normal)\n                .transformDirection(this.target.matrixWorld);\n            if (view.dot(normalWorld) < 0) {\n                hotspot.hide();\n            }\n            else {\n                hotspot.show();\n            }\n        });\n    }\n    /**\n     * Rotate all hotspots to an absolute orientation given by the input number of\n     * radians. Zero returns them to upright.\n     */\n    orientHotspots(radians) {\n        this.forHotspots((hotspot) => {\n            hotspot.orient(radians);\n        });\n    }\n    /**\n     * Set the rendering visibility of all hotspots. This is used to hide them\n     * during transitions and such.\n     */\n    setHotspotsVisibility(visible) {\n        this.forHotspots((hotspot) => {\n            hotspot.visible = visible;\n        });\n    }\n    updateSchema(src) {\n        var _a;\n        const { schemaElement, element } = this;\n        const { alt, poster, iosSrc } = element;\n        if (src != null) {\n            const encoding = [{\n                    '@type': 'MediaObject',\n                    contentUrl: src,\n                    encodingFormat: ((_a = src.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'gltf' ?\n                        'model/gltf+json' :\n                        'model/gltf-binary'\n                }];\n            if (iosSrc) {\n                encoding.push({\n                    '@type': 'MediaObject',\n                    contentUrl: iosSrc,\n                    encodingFormat: 'model/vnd.usdz+zip'\n                });\n            }\n            const structuredData = {\n                '@context': 'http://schema.org/',\n                '@type': '3DModel',\n                image: poster !== null && poster !== void 0 ? poster : undefined,\n                name: alt !== null && alt !== void 0 ? alt : undefined,\n                encoding\n            };\n            schemaElement.textContent = JSON.stringify(structuredData);\n            document.head.appendChild(schemaElement);\n        }\n        else if (schemaElement.parentElement != null) {\n            schemaElement.parentElement.removeChild(schemaElement);\n        }\n    }\n}\n//# sourceMappingURL=ModelScene.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelScene.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   moveChildren: () => (/* binding */ moveChildren),\n/* harmony export */   reduceVertices: () => (/* binding */ reduceVertices)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Moves Three.js objects from one parent to another\n */\nconst moveChildren = (from, to) => {\n    while (from.children.length) {\n        to.add(from.children.shift());\n    }\n};\n/**\n * Performs a reduction across all the vertices of the input model and all its\n * children. The supplied function takes the reduced value and a vertex and\n * returns the newly reduced value. The value is initialized as zero.\n *\n * Adapted from Three.js, @see https://github.com/mrdoob/three.js/blob/7e0a78beb9317e580d7fa4da9b5b12be051c6feb/src/math/Box3.js#L241\n */\nconst reduceVertices = (model, func, initialValue) => {\n    let value = initialValue;\n    const vertex = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    model.traverseVisible((object) => {\n        let i, l;\n        object.updateWorldMatrix(false, false);\n        const geometry = object.geometry;\n        if (geometry !== undefined) {\n            if (geometry.isGeometry) {\n                const vertices = geometry.vertices;\n                for (i = 0, l = vertices.length; i < l; i++) {\n                    vertex.copy(vertices[i]);\n                    if (object.isSkinnedMesh) {\n                        object.boneTransform(i, vertex);\n                    }\n                    else {\n                        vertex.applyMatrix4(object.matrixWorld);\n                    }\n                    value = func(value, vertex);\n                }\n            }\n            else if (geometry.isBufferGeometry) {\n                const { position } = geometry.attributes;\n                if (position !== undefined) {\n                    for (i = 0, l = position.count; i < l; i++) {\n                        vertex.fromBufferAttribute(position, i);\n                        if (object.isSkinnedMesh) {\n                            object.boneTransform(i, vertex);\n                        }\n                        else {\n                            vertex.applyMatrix4(object.matrixWorld);\n                        }\n                        value = func(value, vertex);\n                    }\n                }\n            }\n        }\n    });\n    return value;\n};\n//# sourceMappingURL=ModelUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvTW9kZWxVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1QkFBdUIsMENBQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFdBQVc7QUFDbkM7QUFDQSxvREFBb0QsT0FBTztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9Nb2RlbFV0aWxzLmpzPzdiYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcbi8qKlxuICogTW92ZXMgVGhyZWUuanMgb2JqZWN0cyBmcm9tIG9uZSBwYXJlbnQgdG8gYW5vdGhlclxuICovXG5leHBvcnQgY29uc3QgbW92ZUNoaWxkcmVuID0gKGZyb20sIHRvKSA9PiB7XG4gICAgd2hpbGUgKGZyb20uY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHRvLmFkZChmcm9tLmNoaWxkcmVuLnNoaWZ0KCkpO1xuICAgIH1cbn07XG4vKipcbiAqIFBlcmZvcm1zIGEgcmVkdWN0aW9uIGFjcm9zcyBhbGwgdGhlIHZlcnRpY2VzIG9mIHRoZSBpbnB1dCBtb2RlbCBhbmQgYWxsIGl0c1xuICogY2hpbGRyZW4uIFRoZSBzdXBwbGllZCBmdW5jdGlvbiB0YWtlcyB0aGUgcmVkdWNlZCB2YWx1ZSBhbmQgYSB2ZXJ0ZXggYW5kXG4gKiByZXR1cm5zIHRoZSBuZXdseSByZWR1Y2VkIHZhbHVlLiBUaGUgdmFsdWUgaXMgaW5pdGlhbGl6ZWQgYXMgemVyby5cbiAqXG4gKiBBZGFwdGVkIGZyb20gVGhyZWUuanMsIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iLzdlMGE3OGJlYjkzMTdlNTgwZDdmYTRkYTliNWIxMmJlMDUxYzZmZWIvc3JjL21hdGgvQm94My5qcyNMMjQxXG4gKi9cbmV4cG9ydCBjb25zdCByZWR1Y2VWZXJ0aWNlcyA9IChtb2RlbCwgZnVuYywgaW5pdGlhbFZhbHVlKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgbW9kZWwudHJhdmVyc2VWaXNpYmxlKChvYmplY3QpID0+IHtcbiAgICAgICAgbGV0IGksIGw7XG4gICAgICAgIG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeChmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcbiAgICAgICAgaWYgKGdlb21ldHJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChnZW9tZXRyeS5pc0dlb21ldHJ5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRleC5jb3B5KHZlcnRpY2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdC5pc1NraW5uZWRNZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuYm9uZVRyYW5zZm9ybShpLCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4LmFwcGx5TWF0cml4NChvYmplY3QubWF0cml4V29ybGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZnVuYyh2YWx1ZSwgdmVydGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwb3NpdGlvbiB9ID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gcG9zaXRpb24uY291bnQ7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QuaXNTa2lubmVkTWVzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5ib25lVHJhbnNmb3JtKGksIHZlcnRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXguYXBwbHlNYXRyaXg0KG9iamVjdC5tYXRyaXhXb3JsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmModmFsdWUsIHZlcnRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TW9kZWxVdGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/ModelUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlacementBox: () => (/* binding */ PlacementBox)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst RADIUS = 0.2;\nconst LINE_WIDTH = 0.03;\nconst MAX_OPACITY = 0.75;\nconst SEGMENTS = 12;\nconst DELTA_PHI = Math.PI / (2 * SEGMENTS);\nconst vector2 = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2();\n/**\n * Adds a quarter-annulus of vertices to the array, centered on cornerX,\n * cornerY.\n */\nconst addCorner = (vertices, cornerX, cornerY) => {\n    let phi = cornerX > 0 ? (cornerY > 0 ? 0 : -Math.PI / 2) :\n        (cornerY > 0 ? Math.PI / 2 : Math.PI);\n    for (let i = 0; i <= SEGMENTS; ++i) {\n        vertices.push(cornerX + (RADIUS - LINE_WIDTH) * Math.cos(phi), cornerY + (RADIUS - LINE_WIDTH) * Math.sin(phi), 0, cornerX + RADIUS * Math.cos(phi), cornerY + RADIUS * Math.sin(phi), 0);\n        phi += DELTA_PHI;\n    }\n};\n/**\n * This class is a set of two coincident planes. The first is just a cute box\n * outline with rounded corners and damped opacity to indicate the floor extents\n * of a scene. It is purposely larger than the scene's bounding box by RADIUS on\n * all sides so that small scenes are still visible / selectable. Its center is\n * actually carved out by vertices to ensure its fragment shader doesn't add\n * much time.\n *\n * The child plane is a simple plane with the same extents for use in hit\n * testing (translation is triggered when the touch hits the plane, rotation\n * otherwise).\n */\nclass PlacementBox extends three__WEBPACK_IMPORTED_MODULE_1__.Mesh {\n    constructor(scene, side) {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const triangles = [];\n        const vertices = [];\n        const { size, boundingBox } = scene;\n        const x = size.x / 2;\n        const y = (side === 'back' ? size.y : size.z) / 2;\n        addCorner(vertices, x, y);\n        addCorner(vertices, -x, y);\n        addCorner(vertices, -x, -y);\n        addCorner(vertices, x, -y);\n        const numVertices = vertices.length / 3;\n        for (let i = 0; i < numVertices - 2; i += 2) {\n            triangles.push(i, i + 1, i + 3, i, i + 3, i + 2);\n        }\n        const i = numVertices - 2;\n        triangles.push(i, i + 1, 1, i, 1, 0);\n        geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(vertices, 3));\n        geometry.setIndex(triangles);\n        super(geometry);\n        this.side = side;\n        const material = this.material;\n        material.side = three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide;\n        material.transparent = true;\n        material.opacity = 0;\n        this.goalOpacity = 0;\n        this.opacityDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_0__.Damper();\n        this.hitPlane =\n            new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(new three__WEBPACK_IMPORTED_MODULE_1__.PlaneGeometry(2 * (x + RADIUS), 2 * (y + RADIUS)));\n        this.hitPlane.visible = false;\n        this.hitPlane.material.side = three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide;\n        this.add(this.hitPlane);\n        boundingBox.getCenter(this.position);\n        switch (side) {\n            case 'bottom':\n                this.rotateX(-Math.PI / 2);\n                this.shadowHeight = boundingBox.min.y;\n                this.position.y = this.shadowHeight;\n                break;\n            case 'back':\n                this.shadowHeight = boundingBox.min.z;\n                this.position.z = this.shadowHeight;\n        }\n        scene.target.add(this);\n        this.offsetHeight = 0;\n    }\n    /**\n     * Get the world hit position if the touch coordinates hit the box, and null\n     * otherwise. Pass the scene in to get access to its raycaster.\n     */\n    getHit(scene, screenX, screenY) {\n        vector2.set(screenX, -screenY);\n        this.hitPlane.visible = true;\n        const hitResult = scene.positionAndNormalFromPoint(vector2, this.hitPlane);\n        this.hitPlane.visible = false;\n        return hitResult == null ? null : hitResult.position;\n    }\n    getExpandedHit(scene, screenX, screenY) {\n        this.hitPlane.scale.set(1000, 1000, 1000);\n        this.hitPlane.updateMatrixWorld();\n        const hitResult = this.getHit(scene, screenX, screenY);\n        this.hitPlane.scale.set(1, 1, 1);\n        return hitResult;\n    }\n    /**\n     * Offset the height of the box relative to the bottom of the scene. Positive\n     * is up, so generally only negative values are used.\n     */\n    set offsetHeight(offset) {\n        offset -= 0.001; // push 1 mm below shadow to avoid z-fighting\n        if (this.side === 'back') {\n            this.position.z = this.shadowHeight + offset;\n        }\n        else {\n            this.position.y = this.shadowHeight + offset;\n        }\n    }\n    get offsetHeight() {\n        if (this.side === 'back') {\n            return this.position.z - this.shadowHeight;\n        }\n        else {\n            return this.position.y - this.shadowHeight;\n        }\n    }\n    /**\n     * Set the box's visibility; it will fade in and out.\n     */\n    set show(visible) {\n        this.goalOpacity = visible ? MAX_OPACITY : 0;\n    }\n    /**\n     * Call on each frame with the frame delta to fade the box.\n     */\n    updateOpacity(delta) {\n        const material = this.material;\n        material.opacity =\n            this.opacityDamper.update(material.opacity, this.goalOpacity, delta, 1);\n        this.visible = material.opacity > 0;\n    }\n    /**\n     * Call this to clean up Three's cache when you remove the box.\n     */\n    dispose() {\n        var _a;\n        const { geometry, material } = this.hitPlane;\n        geometry.dispose();\n        material.dispose();\n        this.geometry.dispose();\n        this.material.dispose();\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.remove(this);\n    }\n}\n//# sourceMappingURL=PlacementBox.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/PlacementBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Renderer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_POWER_PREFERENCE: () => (/* binding */ DEFAULT_POWER_PREFERENCE),\n/* harmony export */   Renderer: () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _features_environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/environment.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/environment.js\");\n/* harmony import */ var _model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model-viewer-base.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/model-viewer-base.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _ARRenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ARRenderer.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/ARRenderer.js\");\n/* harmony import */ var _CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CachingGLTFLoader.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/CachingGLTFLoader.js\");\n/* harmony import */ var _Debugger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Debugger.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Debugger.js\");\n/* harmony import */ var _gltf_instance_ModelViewerGLTFInstance_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gltf-instance/ModelViewerGLTFInstance.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js\");\n/* harmony import */ var _TextureUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TextureUtils.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n// Between 0 and 1: larger means the average responds faster and is less smooth.\nconst DURATION_DECAY = 0.2;\nconst LOW_FRAME_DURATION_MS = 40;\nconst HIGH_FRAME_DURATION_MS = 60;\nconst MAX_AVG_CHANGE_MS = 5;\nconst SCALE_STEPS = [1, 0.79, 0.62, 0.5, 0.4, 0.31, 0.25];\nconst DEFAULT_LAST_STEP = 3;\nconst DEFAULT_POWER_PREFERENCE = 'high-performance';\n/**\n * Registers canvases with Canvas2DRenderingContexts and renders them\n * all in the same WebGLRenderingContext, spitting out textures to apply\n * to the canvases. Creates a fullscreen WebGL canvas that is not added\n * to the DOM, and on each frame, renders each registered canvas on a portion\n * of the WebGL canvas, and applies the texture on the registered canvas.\n *\n * In the future, can use ImageBitmapRenderingContext instead of\n * Canvas2DRenderingContext if supported for cheaper transferring of\n * the texture.\n */\nclass Renderer extends three__WEBPACK_IMPORTED_MODULE_8__.EventDispatcher {\n    constructor(options) {\n        super();\n        this.loader = new _CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_4__.CachingGLTFLoader(_gltf_instance_ModelViewerGLTFInstance_js__WEBPACK_IMPORTED_MODULE_6__.ModelViewerGLTFInstance);\n        this.width = 0;\n        this.height = 0;\n        this.dpr = 1;\n        this.debugger = null;\n        this.scenes = new Set();\n        this.multipleScenesVisible = false;\n        this.lastTick = performance.now();\n        this.renderedLastFrame = false;\n        this.scaleStep = 0;\n        this.lastStep = DEFAULT_LAST_STEP;\n        this.avgFrameDuration = (HIGH_FRAME_DURATION_MS + LOW_FRAME_DURATION_MS) / 2;\n        this.onWebGLContextLost = (event) => {\n            this.dispatchEvent({ type: 'contextlost', sourceEvent: event });\n        };\n        this.onWebGLContextRestored = () => {\n            var _a;\n            (_a = this.textureUtils) === null || _a === void 0 ? void 0 : _a.dispose();\n            this.textureUtils = new _TextureUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.threeRenderer);\n            for (const scene of this.scenes) {\n                scene.element[_features_environment_js__WEBPACK_IMPORTED_MODULE_0__.$updateEnvironment]();\n            }\n        };\n        this.dpr = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.resolveDpr)();\n        this.canvas3D = document.createElement('canvas');\n        this.canvas3D.id = 'webgl-canvas';\n        this.canvas3D.classList.add('show');\n        try {\n            this.threeRenderer = new three__WEBPACK_IMPORTED_MODULE_8__.WebGLRenderer({\n                canvas: this.canvas3D,\n                alpha: true,\n                antialias: true,\n                powerPreference: options.powerPreference,\n                preserveDrawingBuffer: true\n            });\n            this.threeRenderer.autoClear = true;\n            this.threeRenderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_8__.sRGBEncoding;\n            this.threeRenderer.physicallyCorrectLights = true;\n            this.threeRenderer.setPixelRatio(1); // handle pixel ratio externally\n            this.debugger = !!options.debug ? new _Debugger_js__WEBPACK_IMPORTED_MODULE_5__.Debugger(this) : null;\n            this.threeRenderer.debug = { checkShaderErrors: !!this.debugger };\n            // ACESFilmicToneMapping appears to be the most \"saturated\",\n            // and similar to Filament's gltf-viewer.\n            this.threeRenderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_8__.ACESFilmicToneMapping;\n        }\n        catch (error) {\n            console.warn(error);\n        }\n        this.arRenderer = new _ARRenderer_js__WEBPACK_IMPORTED_MODULE_3__.ARRenderer(this);\n        this.textureUtils =\n            this.canRender ? new _TextureUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.threeRenderer) : null;\n        _CachingGLTFLoader_js__WEBPACK_IMPORTED_MODULE_4__.CachingGLTFLoader.initializeKTX2Loader(this.threeRenderer);\n        this.canvas3D.addEventListener('webglcontextlost', this.onWebGLContextLost);\n        this.canvas3D.addEventListener('webglcontextrestored', this.onWebGLContextRestored);\n        this.updateRendererSize();\n    }\n    static get singleton() {\n        return this._singleton;\n    }\n    static resetSingleton() {\n        const elements = this._singleton.dispose();\n        for (const element of elements) {\n            element.disconnectedCallback();\n        }\n        this._singleton = new Renderer({\n            powerPreference: (self.ModelViewerElement || {})\n                .powerPreference ||\n                DEFAULT_POWER_PREFERENCE,\n            debug: (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.isDebugMode)()\n        });\n        for (const element of elements) {\n            element.connectedCallback();\n        }\n    }\n    get canRender() {\n        return this.threeRenderer != null;\n    }\n    get scaleFactor() {\n        return SCALE_STEPS[this.scaleStep];\n    }\n    set minScale(scale) {\n        let i = 1;\n        while (i < SCALE_STEPS.length) {\n            if (SCALE_STEPS[i] < scale) {\n                break;\n            }\n            ++i;\n        }\n        this.lastStep = i - 1;\n    }\n    registerScene(scene) {\n        this.scenes.add(scene);\n        scene.forceRescale();\n        const size = new three__WEBPACK_IMPORTED_MODULE_8__.Vector2();\n        this.threeRenderer.getSize(size);\n        scene.canvas.width = size.x;\n        scene.canvas.height = size.y;\n        if (this.canRender && this.scenes.size > 0) {\n            this.threeRenderer.setAnimationLoop((time, frame) => this.render(time, frame));\n        }\n        if (this.debugger != null) {\n            this.debugger.addScene(scene);\n        }\n    }\n    unregisterScene(scene) {\n        this.scenes.delete(scene);\n        if (this.canvas3D.parentElement === scene.canvas.parentElement) {\n            scene.canvas.parentElement.removeChild(this.canvas3D);\n        }\n        if (this.canRender && this.scenes.size === 0) {\n            this.threeRenderer.setAnimationLoop(null);\n        }\n        if (this.debugger != null) {\n            this.debugger.removeScene(scene);\n        }\n    }\n    displayCanvas(scene) {\n        return this.multipleScenesVisible ? scene.element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$canvas] : this.canvas3D;\n    }\n    /**\n     * The function enables an optimization, where when there is only a single\n     * <model-viewer> element, we can use the renderer's 3D canvas directly for\n     * display. Otherwise we need to use the element's 2D canvas and copy the\n     * renderer's result into it.\n     */\n    countVisibleScenes() {\n        const { canvas3D } = this;\n        let visibleScenes = 0;\n        let canvas3DScene = null;\n        for (const scene of this.scenes) {\n            const { element } = scene;\n            if (element.modelIsVisible && scene.externalRenderer == null) {\n                ++visibleScenes;\n            }\n            if (canvas3D.parentElement === scene.canvas.parentElement) {\n                canvas3DScene = scene;\n            }\n        }\n        const multipleScenesVisible = visibleScenes > 1;\n        if (canvas3DScene != null) {\n            const newlyMultiple = multipleScenesVisible && !this.multipleScenesVisible;\n            const disappearing = !canvas3DScene.element.modelIsVisible;\n            if (newlyMultiple || disappearing) {\n                const { width, height } = this.sceneSize(canvas3DScene);\n                this.copyPixels(canvas3DScene, width, height);\n                canvas3D.parentElement.removeChild(canvas3D);\n            }\n        }\n        this.multipleScenesVisible = multipleScenesVisible;\n    }\n    /**\n     * Updates the renderer's size based on the largest scene and any changes to\n     * device pixel ratio.\n     */\n    updateRendererSize() {\n        const dpr = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.resolveDpr)();\n        if (dpr !== this.dpr) {\n            // If the device pixel ratio has changed due to page zoom, elements\n            // specified by % width do not fire a resize event even though their CSS\n            // pixel dimensions change, so we force them to update their size here.\n            for (const scene of this.scenes) {\n                const { element } = scene;\n                element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$updateSize](element.getBoundingClientRect());\n            }\n        }\n        // Make the renderer the size of the largest scene\n        let width = 0;\n        let height = 0;\n        for (const scene of this.scenes) {\n            width = Math.max(width, scene.width);\n            height = Math.max(height, scene.height);\n        }\n        if (width === this.width && height === this.height && dpr === this.dpr) {\n            return;\n        }\n        this.width = width;\n        this.height = height;\n        this.dpr = dpr;\n        width = Math.ceil(width * dpr);\n        height = Math.ceil(height * dpr);\n        if (this.canRender) {\n            this.threeRenderer.setSize(width, height, false);\n        }\n        // Each scene's canvas must match the renderer size. In general they can be\n        // larger than the element that contains them, but the overflow is hidden\n        // and only the portion that is shown is copied over.\n        for (const scene of this.scenes) {\n            const { canvas } = scene;\n            canvas.width = width;\n            canvas.height = height;\n            scene.forceRescale();\n        }\n    }\n    updateRendererScale(delta) {\n        const scaleStep = this.scaleStep;\n        this.avgFrameDuration += (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(DURATION_DECAY * (delta - this.avgFrameDuration), -MAX_AVG_CHANGE_MS, MAX_AVG_CHANGE_MS);\n        if (this.avgFrameDuration > HIGH_FRAME_DURATION_MS) {\n            ++this.scaleStep;\n        }\n        else if (this.avgFrameDuration < LOW_FRAME_DURATION_MS && this.scaleStep > 0) {\n            --this.scaleStep;\n        }\n        this.scaleStep = Math.min(this.scaleStep, this.lastStep);\n        if (scaleStep !== this.scaleStep) {\n            this.avgFrameDuration =\n                (HIGH_FRAME_DURATION_MS + LOW_FRAME_DURATION_MS) / 2;\n        }\n    }\n    shouldRender(scene) {\n        if (!scene.shouldRender()) {\n            // The first frame we stop rendering the scene (because it stops moving),\n            // trigger one extra render at full scale.\n            if (scene.scaleStep != 0) {\n                scene.scaleStep = 0;\n                this.rescaleCanvas(scene);\n            }\n            else {\n                return false;\n            }\n        }\n        else if (scene.scaleStep != this.scaleStep) {\n            // Update render scale\n            scene.scaleStep = this.scaleStep;\n            this.rescaleCanvas(scene);\n        }\n        return true;\n    }\n    rescaleCanvas(scene) {\n        const scale = SCALE_STEPS[scene.scaleStep];\n        const width = Math.ceil(this.width / scale);\n        const height = Math.ceil(this.height / scale);\n        const { style } = scene.canvas;\n        style.width = `${width}px`;\n        style.height = `${height}px`;\n        this.canvas3D.style.width = `${width}px`;\n        this.canvas3D.style.height = `${height}px`;\n        const renderedDpr = this.dpr * scale;\n        const reason = scale < 1 ? 'GPU throttling' :\n            this.dpr !== window.devicePixelRatio ? 'No meta viewport tag' :\n                '';\n        scene.element.dispatchEvent(new CustomEvent('render-scale', {\n            detail: {\n                reportedDpr: window.devicePixelRatio,\n                renderedDpr: renderedDpr,\n                minimumDpr: this.dpr * SCALE_STEPS[this.lastStep],\n                pixelWidth: Math.ceil(scene.width * renderedDpr),\n                pixelHeight: Math.ceil(scene.height * renderedDpr),\n                reason: reason\n            }\n        }));\n    }\n    sceneSize(scene) {\n        const { dpr } = this;\n        const scaleFactor = SCALE_STEPS[scene.scaleStep];\n        // We avoid using the Three.js PixelRatio and handle it ourselves here so\n        // that we can do proper rounding and avoid white boundary pixels.\n        const width = Math.min(Math.ceil(scene.width * scaleFactor * dpr), this.canvas3D.width);\n        const height = Math.min(Math.ceil(scene.height * scaleFactor * dpr), this.canvas3D.height);\n        return { width, height };\n    }\n    copyPixels(scene, width, height) {\n        const context2D = scene.context;\n        if (context2D == null) {\n            console.log('could not acquire 2d context');\n            return;\n        }\n        context2D.clearRect(0, 0, width, height);\n        context2D.drawImage(this.canvas3D, 0, 0, width, height, 0, 0, width, height);\n        scene.canvas.classList.add('show');\n    }\n    /**\n     * Returns an array version of this.scenes where the non-visible ones are\n     * first. This allows eager scenes to be rendered before they are visible,\n     * without needing the multi-canvas render path.\n     */\n    orderedScenes() {\n        const scenes = [];\n        for (const visible of [false, true]) {\n            for (const scene of this.scenes) {\n                if (scene.element.modelIsVisible === visible) {\n                    scenes.push(scene);\n                }\n            }\n        }\n        return scenes;\n    }\n    get isPresenting() {\n        return this.arRenderer.isPresenting;\n    }\n    /**\n     * This method takes care of updating the element and renderer state based on\n     * the time that has passed since the last rendered frame.\n     */\n    preRender(scene, t, delta) {\n        const { element, exposure } = scene;\n        element[_model_viewer_base_js__WEBPACK_IMPORTED_MODULE_1__.$tick](t, delta);\n        const exposureIsNumber = typeof exposure === 'number' && !Number.isNaN(exposure);\n        this.threeRenderer.toneMappingExposure = exposureIsNumber ? exposure : 1.0;\n    }\n    render(t, frame) {\n        if (frame != null) {\n            this.arRenderer.onWebXRFrame(t, frame);\n            return;\n        }\n        const delta = t - this.lastTick;\n        this.lastTick = t;\n        if (!this.canRender || this.isPresenting) {\n            return;\n        }\n        this.countVisibleScenes();\n        this.updateRendererSize();\n        if (this.renderedLastFrame) {\n            this.updateRendererScale(delta);\n            this.renderedLastFrame = false;\n        }\n        const { canvas3D } = this;\n        for (const scene of this.orderedScenes()) {\n            const { element } = scene;\n            if (!element.loaded ||\n                (!element.modelIsVisible && scene.renderCount > 0)) {\n                continue;\n            }\n            this.preRender(scene, t, delta);\n            if (!this.shouldRender(scene)) {\n                continue;\n            }\n            if (scene.externalRenderer != null) {\n                const camera = scene.getCamera();\n                camera.updateMatrix();\n                const { matrix, projectionMatrix } = camera;\n                const viewMatrix = matrix.elements.slice();\n                const target = scene.getTarget();\n                viewMatrix[12] += target.x;\n                viewMatrix[13] += target.y;\n                viewMatrix[14] += target.z;\n                scene.externalRenderer.render({\n                    viewMatrix: viewMatrix,\n                    projectionMatrix: projectionMatrix.elements\n                });\n                continue;\n            }\n            if (!element.modelIsVisible && !this.multipleScenesVisible) {\n                // Here we are pre-rendering on the visible canvas, so we must mark the\n                // visible scene dirty to ensure it overwrites us.\n                for (const visibleScene of this.scenes) {\n                    if (visibleScene.element.modelIsVisible) {\n                        visibleScene.queueRender();\n                    }\n                }\n            }\n            const { width, height } = this.sceneSize(scene);\n            scene.renderShadow(this.threeRenderer);\n            // Need to set the render target in order to prevent\n            // clearing the depth from a different buffer\n            this.threeRenderer.setRenderTarget(null);\n            this.threeRenderer.setViewport(0, Math.ceil(this.height * this.dpr) - height, width, height);\n            this.threeRenderer.render(scene, scene.camera);\n            if (this.multipleScenesVisible || scene.renderCount === 0) {\n                this.copyPixels(scene, width, height);\n            }\n            else {\n                if (canvas3D.parentElement !== scene.canvas.parentElement) {\n                    scene.canvas.parentElement.appendChild(canvas3D);\n                    scene.canvas.classList.remove('show');\n                }\n            }\n            scene.hasRendered();\n            ++scene.renderCount;\n            this.renderedLastFrame = true;\n        }\n    }\n    dispose() {\n        if (this.textureUtils != null) {\n            this.textureUtils.dispose();\n        }\n        if (this.threeRenderer != null) {\n            this.threeRenderer.dispose();\n        }\n        this.textureUtils = null;\n        this.threeRenderer = null;\n        const elements = [];\n        for (const scene of this.scenes) {\n            elements.push(scene.element);\n        }\n        this.canvas3D.removeEventListener('webglcontextlost', this.onWebGLContextLost);\n        this.canvas3D.removeEventListener('webglcontextrestored', this.onWebGLContextRestored);\n        return elements;\n    }\n}\nRenderer._singleton = new Renderer({\n    powerPreference: (self.ModelViewerElement || {})\n        .powerPreference ||\n        DEFAULT_POWER_PREFERENCE,\n    debug: (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.isDebugMode)()\n});\n//# sourceMappingURL=Renderer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Renderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/Shadow.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/Shadow.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Shadow: () => (/* binding */ Shadow)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_shaders_HorizontalBlurShader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/shaders/HorizontalBlurShader.js */ \"(ssr)/./node_modules/three/examples/jsm/shaders/HorizontalBlurShader.js\");\n/* harmony import */ var three_examples_jsm_shaders_VerticalBlurShader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/shaders/VerticalBlurShader.js */ \"(ssr)/./node_modules/three/examples/jsm/shaders/VerticalBlurShader.js\");\n/* harmony import */ var three_src_math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/src/math/MathUtils.js */ \"(ssr)/./node_modules/three/src/math/MathUtils.js\");\n/* @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n// The softness [0, 1] of the shadow is mapped to a resolution between\n// 2^LOG_MAX_RESOLUTION and 2^LOG_MIN_RESOLUTION.\nconst LOG_MAX_RESOLUTION = 9;\nconst LOG_MIN_RESOLUTION = 6;\n// Animated models are not in general contained in their bounding box, as this\n// is calculated only for their resting pose. We create a cubic shadow volume\n// for animated models sized to their largest bounding box dimension multiplied\n// by this scale factor.\nconst ANIMATION_SCALING = 2;\n// Since hard shadows are not lightened by blurring and depth, set a lower\n// default intensity to make them more perceptually similar to the intensity of\n// the soft shadows.\nconst DEFAULT_HARD_INTENSITY = 0.3;\n/**\n * The Shadow class creates a shadow that fits a given scene and follows a\n * target. This shadow will follow the scene without any updates needed so long\n * as the shadow and scene are both parented to the same object (call it the\n * scene) and this scene is passed as the target parameter to the shadow's\n * constructor. We also must constrain the scene to motion within the horizontal\n * plane and call the setRotation() method whenever the scene's Y-axis rotation\n * changes. For motion outside of the horizontal plane, this.needsUpdate must be\n * set to true.\n *\n * The softness of the shadow is controlled by changing its resolution, making\n * softer shadows faster, but less precise.\n */\nclass Shadow extends three__WEBPACK_IMPORTED_MODULE_0__.Object3D {\n    constructor(scene, softness, side) {\n        super();\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera();\n        // private cameraHelper = new CameraHelper(this.camera);\n        this.renderTarget = null;\n        this.renderTargetBlur = null;\n        this.depthMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshDepthMaterial();\n        this.horizontalBlurMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(three_examples_jsm_shaders_HorizontalBlurShader_js__WEBPACK_IMPORTED_MODULE_1__.HorizontalBlurShader);\n        this.verticalBlurMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(three_examples_jsm_shaders_VerticalBlurShader_js__WEBPACK_IMPORTED_MODULE_2__.VerticalBlurShader);\n        this.intensity = 0;\n        this.softness = 1;\n        this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_0__.Box3;\n        this.size = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3;\n        this.maxDimension = 0;\n        this.isAnimated = false;\n        this.needsUpdate = false;\n        const { camera } = this;\n        camera.rotation.x = Math.PI / 2;\n        camera.left = -0.5;\n        camera.right = 0.5;\n        camera.bottom = -0.5;\n        camera.top = 0.5;\n        this.add(camera);\n        // this.add(this.cameraHelper);\n        // this.cameraHelper.updateMatrixWorld = function() {\n        //   this.matrixWorld = this.camera.matrixWorld;\n        // };\n        const plane = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry();\n        const shadowMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n            // color: new Color(1, 0, 0),\n            opacity: 1,\n            transparent: true,\n            side: three__WEBPACK_IMPORTED_MODULE_0__.BackSide,\n        });\n        this.floor = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(plane, shadowMaterial);\n        this.floor.userData.shadow = true;\n        camera.add(this.floor);\n        // the plane onto which to blur the texture\n        this.blurPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(plane);\n        this.blurPlane.visible = false;\n        camera.add(this.blurPlane);\n        scene.target.add(this);\n        // like MeshDepthMaterial, but goes from black to transparent\n        this.depthMaterial.onBeforeCompile = function (shader) {\n            shader.fragmentShader = shader.fragmentShader.replace('gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * opacity );');\n        };\n        this.horizontalBlurMaterial.depthTest = false;\n        this.verticalBlurMaterial.depthTest = false;\n        this.setScene(scene, softness, side);\n    }\n    /**\n     * Update the shadow's size and position for a new scene. Softness is also\n     * needed, as this controls the shadow's resolution.\n     */\n    setScene(scene, softness, side) {\n        const { boundingBox, size, rotation, position } = this;\n        this.isAnimated = scene.animationNames.length > 0;\n        this.boundingBox.copy(scene.boundingBox);\n        this.size.copy(scene.size);\n        this.maxDimension = Math.max(size.x, size.y, size.z) *\n            (this.isAnimated ? ANIMATION_SCALING : 1);\n        this.boundingBox.getCenter(position);\n        if (side === 'back') {\n            const { min, max } = boundingBox;\n            [min.y, min.z] = [min.z, min.y];\n            [max.y, max.z] = [max.z, max.y];\n            [size.y, size.z] = [size.z, size.y];\n            rotation.x = Math.PI / 2;\n            rotation.y = Math.PI;\n        }\n        else {\n            rotation.x = 0;\n            rotation.y = 0;\n        }\n        if (this.isAnimated) {\n            const minY = boundingBox.min.y;\n            const maxY = boundingBox.max.y;\n            size.y = this.maxDimension;\n            boundingBox.expandByVector(size.subScalar(this.maxDimension).multiplyScalar(-0.5));\n            boundingBox.min.y = minY;\n            boundingBox.max.y = maxY;\n            size.set(this.maxDimension, maxY - minY, this.maxDimension);\n        }\n        if (side === 'bottom') {\n            position.y = boundingBox.min.y;\n        }\n        else {\n            position.z = boundingBox.min.y;\n        }\n        this.setSoftness(softness);\n    }\n    /**\n     * Update the shadow's resolution based on softness (between 0 and 1). Should\n     * not be called frequently, as this results in reallocation.\n     */\n    setSoftness(softness) {\n        this.softness = softness;\n        const { size, camera } = this;\n        const scaleY = (this.isAnimated ? ANIMATION_SCALING : 1);\n        const resolution = scaleY *\n            Math.pow(2, LOG_MAX_RESOLUTION -\n                softness * (LOG_MAX_RESOLUTION - LOG_MIN_RESOLUTION));\n        this.setMapSize(resolution);\n        const softFar = size.y / 2;\n        const hardFar = size.y * scaleY;\n        camera.near = 0;\n        camera.far = (0,three_src_math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.lerp)(hardFar, softFar, softness);\n        // we have co-opted opacity to scale the depth to clip\n        this.depthMaterial.opacity = 1.0 / softness;\n        camera.updateProjectionMatrix();\n        // this.cameraHelper.update();\n        this.setIntensity(this.intensity);\n        this.setOffset(0);\n    }\n    /**\n     * Lower-level version of the above function.\n     */\n    setMapSize(maxMapSize) {\n        const { size } = this;\n        if (this.isAnimated) {\n            maxMapSize *= ANIMATION_SCALING;\n        }\n        const baseWidth = Math.floor(size.x > size.z ? maxMapSize : maxMapSize * size.x / size.z);\n        const baseHeight = Math.floor(size.x > size.z ? maxMapSize * size.z / size.x : maxMapSize);\n        // width of blur filter in pixels (not adjustable)\n        const TAP_WIDTH = 10;\n        const width = TAP_WIDTH + baseWidth;\n        const height = TAP_WIDTH + baseHeight;\n        if (this.renderTarget != null &&\n            (this.renderTarget.width !== width ||\n                this.renderTarget.height !== height)) {\n            this.renderTarget.dispose();\n            this.renderTarget = null;\n            this.renderTargetBlur.dispose();\n            this.renderTargetBlur = null;\n        }\n        if (this.renderTarget == null) {\n            const params = { format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat };\n            this.renderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(width, height, params);\n            this.renderTargetBlur = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(width, height, params);\n            this.floor.material.map =\n                this.renderTarget.texture;\n        }\n        // These pads account for the softening radius around the shadow.\n        this.camera.scale.set(size.x * (1 + TAP_WIDTH / baseWidth), size.z * (1 + TAP_WIDTH / baseHeight), 1);\n        this.needsUpdate = true;\n    }\n    /**\n     * Set the shadow's intensity (0 to 1), which is just its opacity. Turns off\n     * shadow rendering if zero.\n     */\n    setIntensity(intensity) {\n        this.intensity = intensity;\n        if (intensity > 0) {\n            this.visible = true;\n            this.floor.visible = true;\n            this.floor.material.opacity = intensity *\n                (0,three_src_math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.lerp)(DEFAULT_HARD_INTENSITY, 1, this.softness * this.softness);\n        }\n        else {\n            this.visible = false;\n            this.floor.visible = false;\n        }\n    }\n    getIntensity() {\n        return this.intensity;\n    }\n    /**\n     * An offset can be specified to move the\n     * shadow vertically relative to the bottom of the scene. Positive is up, so\n     * values are generally negative. A small offset keeps our shadow from\n     * z-fighting with any baked-in shadow plane.\n     */\n    setOffset(offset) {\n        this.floor.position.z = -offset + 0.001 * this.maxDimension;\n    }\n    render(renderer, scene) {\n        // this.cameraHelper.visible = false;\n        // force the depthMaterial to everything\n        scene.overrideMaterial = this.depthMaterial;\n        // set renderer clear alpha\n        const initialClearAlpha = renderer.getClearAlpha();\n        renderer.setClearAlpha(0);\n        this.floor.visible = false;\n        // disable XR for offscreen rendering\n        const xrEnabled = renderer.xr.enabled;\n        renderer.xr.enabled = false;\n        // render to the render target to get the depths\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.renderTarget);\n        renderer.render(scene, this.camera);\n        // and reset the override material\n        scene.overrideMaterial = null;\n        this.floor.visible = true;\n        this.blurShadow(renderer);\n        // reset and render the normal scene\n        renderer.xr.enabled = xrEnabled;\n        renderer.setRenderTarget(oldRenderTarget);\n        renderer.setClearAlpha(initialClearAlpha);\n        // this.cameraHelper.visible = true;\n    }\n    blurShadow(renderer) {\n        const { camera, horizontalBlurMaterial, verticalBlurMaterial, renderTarget, renderTargetBlur, blurPlane } = this;\n        blurPlane.visible = true;\n        // blur horizontally and draw in the renderTargetBlur\n        blurPlane.material = horizontalBlurMaterial;\n        horizontalBlurMaterial.uniforms.h.value = 1 / this.renderTarget.width;\n        horizontalBlurMaterial.uniforms.tDiffuse.value = this.renderTarget.texture;\n        renderer.setRenderTarget(renderTargetBlur);\n        renderer.render(blurPlane, camera);\n        // blur vertically and draw in the main renderTarget\n        blurPlane.material = verticalBlurMaterial;\n        verticalBlurMaterial.uniforms.v.value = 1 / this.renderTarget.height;\n        verticalBlurMaterial.uniforms.tDiffuse.value =\n            this.renderTargetBlur.texture;\n        renderer.setRenderTarget(renderTarget);\n        renderer.render(blurPlane, camera);\n        blurPlane.visible = false;\n    }\n    dispose() {\n        if (this.renderTarget != null) {\n            this.renderTarget.dispose();\n        }\n        if (this.renderTargetBlur != null) {\n            this.renderTargetBlur.dispose();\n        }\n        this.depthMaterial.dispose();\n        this.horizontalBlurMaterial.dispose();\n        this.verticalBlurMaterial.dispose();\n        this.floor.material.dispose();\n        this.floor.geometry.dispose();\n        this.blurPlane.geometry.dispose();\n        this.removeFromParent();\n    }\n}\n//# sourceMappingURL=Shadow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/Shadow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChangeSource: () => (/* binding */ ChangeSource),\n/* harmony export */   DEFAULT_OPTIONS: () => (/* binding */ DEFAULT_OPTIONS),\n/* harmony export */   KeyCode: () => (/* binding */ KeyCode),\n/* harmony export */   SmoothControls: () => (/* binding */ SmoothControls)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _features_controls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/controls.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/features/controls.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _Damper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Damper.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/Damper.js\");\n/* @license\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst PAN_SENSITIVITY = 0.018;\nconst TAP_DISTANCE = 2;\nconst TAP_MS = 300;\nconst vector2 = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();\nconst vector3 = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst DEFAULT_OPTIONS = Object.freeze({\n    minimumRadius: 0,\n    maximumRadius: Infinity,\n    minimumPolarAngle: Math.PI / 8,\n    maximumPolarAngle: Math.PI - Math.PI / 8,\n    minimumAzimuthalAngle: -Infinity,\n    maximumAzimuthalAngle: Infinity,\n    minimumFieldOfView: 10,\n    maximumFieldOfView: 45,\n    touchAction: 'none'\n});\n// Constants\nconst KEYBOARD_ORBIT_INCREMENT = Math.PI / 8;\nconst ZOOM_SENSITIVITY = 0.04;\n// The move size on pan key event\nconst PAN_KEY_INCREMENT = 10;\nconst KeyCode = {\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n};\nconst ChangeSource = {\n    USER_INTERACTION: 'user-interaction',\n    NONE: 'none',\n    AUTOMATIC: 'automatic'\n};\n/**\n * SmoothControls is a Three.js helper for adding delightful pointer and\n * keyboard-based input to a staged Three.js scene. Its API is very similar to\n * OrbitControls, but it offers more opinionated (subjectively more delightful)\n * defaults, easy extensibility and subjectively better out-of-the-box keyboard\n * support.\n *\n * One important change compared to OrbitControls is that the `update` method\n * of SmoothControls must be invoked on every frame, otherwise the controls\n * will not have an effect.\n *\n * Another notable difference compared to OrbitControls is that SmoothControls\n * does not currently support panning (but probably will in a future revision).\n *\n * Like OrbitControls, SmoothControls assumes that the orientation of the camera\n * has been set in terms of position, rotation and scale, so it is important to\n * ensure that the camera's matrixWorld is in sync before using SmoothControls.\n */\nclass SmoothControls extends three__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {\n    constructor(camera, element, scene) {\n        super();\n        this.camera = camera;\n        this.element = element;\n        this.scene = scene;\n        this.orbitSensitivity = 1;\n        this.inputSensitivity = 1;\n        this.changeSource = ChangeSource.NONE;\n        this._interactionEnabled = false;\n        this._disableZoom = false;\n        this.isUserPointing = false;\n        // Pan state\n        this.enablePan = true;\n        this.enableTap = true;\n        this.panProjection = new three__WEBPACK_IMPORTED_MODULE_3__.Matrix3();\n        this.panPerPixel = 0;\n        // Internal orbital position state\n        this.spherical = new three__WEBPACK_IMPORTED_MODULE_3__.Spherical();\n        this.goalSpherical = new three__WEBPACK_IMPORTED_MODULE_3__.Spherical();\n        this.thetaDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        this.phiDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        this.radiusDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        this.logFov = Math.log(DEFAULT_OPTIONS.maximumFieldOfView);\n        this.goalLogFov = this.logFov;\n        this.fovDamper = new _Damper_js__WEBPACK_IMPORTED_MODULE_2__.Damper();\n        // Pointer state\n        this.touchMode = null;\n        this.pointers = [];\n        this.startTime = 0;\n        this.startPointerPosition = { clientX: 0, clientY: 0 };\n        this.lastSeparation = 0;\n        this.touchDecided = false;\n        this.onContext = (event) => {\n            if (this.enablePan) {\n                event.preventDefault();\n            }\n            else {\n                for (const pointer of this.pointers) {\n                    // Required because of a common browser bug where the context menu never\n                    // fires a pointercancel event.\n                    this.onPointerUp(new PointerEvent('pointercancel', Object.assign(Object.assign({}, this.startPointerPosition), { pointerId: pointer.id })));\n                }\n            }\n        };\n        this.touchModeZoom = (dx, dy) => {\n            if (!this._disableZoom) {\n                const touchDistance = this.twoTouchDistance(this.pointers[0], this.pointers[1]);\n                const deltaZoom = ZOOM_SENSITIVITY *\n                    (this.lastSeparation - touchDistance) * 50 / this.scene.height;\n                this.lastSeparation = touchDistance;\n                this.userAdjustOrbit(0, 0, deltaZoom);\n            }\n            if (this.panPerPixel > 0) {\n                this.movePan(dx, dy);\n            }\n        };\n        // We implement our own version of the browser's CSS touch-action, enforced by\n        // this function, because the iOS implementation of pan-y is bad and doesn't\n        // match Android. Specifically, even if a touch gesture begins by panning X,\n        // iOS will switch to scrolling as soon as the gesture moves in the Y, rather\n        // than staying in the same mode until the end of the gesture.\n        this.disableScroll = (event) => {\n            event.preventDefault();\n        };\n        this.touchModeRotate = (dx, dy) => {\n            const { touchAction } = this._options;\n            if (!this.touchDecided && touchAction !== 'none') {\n                this.touchDecided = true;\n                const dxMag = Math.abs(dx);\n                const dyMag = Math.abs(dy);\n                // If motion is mostly vertical, assume scrolling is the intent.\n                if (this.changeSource === ChangeSource.USER_INTERACTION &&\n                    ((touchAction === 'pan-y' && dyMag > dxMag) ||\n                        (touchAction === 'pan-x' && dxMag > dyMag))) {\n                    this.touchMode = null;\n                    return;\n                }\n                else {\n                    this.element.addEventListener('touchmove', this.disableScroll, { passive: false });\n                }\n            }\n            this.handleSinglePointerMove(dx, dy);\n        };\n        this.onPointerDown = (event) => {\n            if (this.pointers.length > 2) {\n                return;\n            }\n            const { element } = this;\n            if (this.pointers.length === 0) {\n                element.addEventListener('pointermove', this.onPointerMove);\n                element.addEventListener('pointerup', this.onPointerUp);\n                this.touchMode = null;\n                this.touchDecided = false;\n                this.startPointerPosition.clientX = event.clientX;\n                this.startPointerPosition.clientY = event.clientY;\n                this.startTime = performance.now();\n            }\n            try {\n                element.setPointerCapture(event.pointerId);\n            }\n            catch (_a) {\n            }\n            this.pointers.push({ clientX: event.clientX, clientY: event.clientY, id: event.pointerId });\n            this.isUserPointing = false;\n            if (event.pointerType === 'touch') {\n                this.changeSource = event.altKey ? // set by interact() in controls.ts\n                    ChangeSource.AUTOMATIC :\n                    ChangeSource.USER_INTERACTION;\n                this.onTouchChange(event);\n            }\n            else {\n                this.changeSource = ChangeSource.USER_INTERACTION;\n                this.onMouseDown(event);\n            }\n        };\n        this.onPointerMove = (event) => {\n            const pointer = this.pointers.find((pointer) => pointer.id === event.pointerId);\n            if (pointer == null) {\n                return;\n            }\n            const numTouches = this.pointers.length;\n            const dx = (event.clientX - pointer.clientX) / numTouches;\n            const dy = (event.clientY - pointer.clientY) / numTouches;\n            if (dx === 0 && dy === 0) {\n                return;\n            }\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            if (event.pointerType === 'touch') {\n                this.changeSource = event.altKey ? // set by interact() in controls.ts\n                    ChangeSource.AUTOMATIC :\n                    ChangeSource.USER_INTERACTION;\n                if (this.touchMode !== null) {\n                    this.touchMode(dx, dy);\n                }\n            }\n            else {\n                this.changeSource = ChangeSource.USER_INTERACTION;\n                if (this.panPerPixel > 0) {\n                    this.movePan(dx, dy);\n                }\n                else {\n                    this.handleSinglePointerMove(dx, dy);\n                }\n            }\n        };\n        this.onPointerUp = (event) => {\n            const { element } = this;\n            const index = this.pointers.findIndex((pointer) => pointer.id === event.pointerId);\n            if (index !== -1) {\n                this.pointers.splice(index, 1);\n            }\n            // altKey indicates an interaction prompt; don't reset radius in this case\n            // as it will cause the camera to drift.\n            if (this.panPerPixel > 0 && !event.altKey) {\n                this.resetRadius();\n            }\n            if (this.pointers.length === 0) {\n                element.removeEventListener('pointermove', this.onPointerMove);\n                element.removeEventListener('pointerup', this.onPointerUp);\n                element.removeEventListener('touchmove', this.disableScroll);\n                if (this.enablePan && this.enableTap) {\n                    this.recenter(event);\n                }\n            }\n            else if (this.touchMode !== null) {\n                this.onTouchChange(event);\n            }\n            this.scene.element[_features_controls_js__WEBPACK_IMPORTED_MODULE_0__.$panElement].style.opacity = 0;\n            element.style.cursor = 'grab';\n            this.panPerPixel = 0;\n            if (this.isUserPointing) {\n                this.dispatchEvent({ type: 'pointer-change-end' });\n            }\n        };\n        this.onWheel = (event) => {\n            this.changeSource = ChangeSource.USER_INTERACTION;\n            const deltaZoom = event.deltaY *\n                (event.deltaMode == 1 ? 18 : 1) * ZOOM_SENSITIVITY / 30;\n            this.userAdjustOrbit(0, 0, deltaZoom);\n            event.preventDefault();\n        };\n        this.onKeyDown = (event) => {\n            // We track if the key is actually one we respond to, so as not to\n            // accidentally clobber unrelated key inputs when the <model-viewer> has\n            // focus.\n            const { changeSource } = this;\n            this.changeSource = ChangeSource.USER_INTERACTION;\n            const relevantKey = (event.shiftKey && this.enablePan) ?\n                this.panKeyCodeHandler(event) :\n                this.orbitZoomKeyCodeHandler(event);\n            if (relevantKey) {\n                event.preventDefault();\n            }\n            else {\n                this.changeSource = changeSource;\n            }\n        };\n        this._options = Object.assign({}, DEFAULT_OPTIONS);\n        this.setOrbit(0, Math.PI / 2, 1);\n        this.setFieldOfView(100);\n        this.jumpToGoal();\n    }\n    get interactionEnabled() {\n        return this._interactionEnabled;\n    }\n    enableInteraction() {\n        if (this._interactionEnabled === false) {\n            const { element } = this;\n            element.addEventListener('pointerdown', this.onPointerDown);\n            element.addEventListener('pointercancel', this.onPointerUp);\n            if (!this._disableZoom) {\n                element.addEventListener('wheel', this.onWheel);\n            }\n            element.addEventListener('keydown', this.onKeyDown);\n            // This little beauty is to work around a WebKit bug that otherwise makes\n            // touch events randomly not cancelable.\n            element.addEventListener('touchmove', () => { }, { passive: false });\n            element.addEventListener('contextmenu', this.onContext);\n            this.element.style.cursor = 'grab';\n            this._interactionEnabled = true;\n            this.updateTouchActionStyle();\n        }\n    }\n    disableInteraction() {\n        if (this._interactionEnabled === true) {\n            const { element } = this;\n            element.removeEventListener('pointerdown', this.onPointerDown);\n            element.removeEventListener('pointermove', this.onPointerMove);\n            element.removeEventListener('pointerup', this.onPointerUp);\n            element.removeEventListener('pointercancel', this.onPointerUp);\n            element.removeEventListener('wheel', this.onWheel);\n            element.removeEventListener('keydown', this.onKeyDown);\n            element.removeEventListener('contextmenu', this.onContext);\n            element.style.cursor = '';\n            this.touchMode = null;\n            this._interactionEnabled = false;\n            this.updateTouchActionStyle();\n        }\n    }\n    /**\n     * The options that are currently configured for the controls instance.\n     */\n    get options() {\n        return this._options;\n    }\n    set disableZoom(disable) {\n        if (this._disableZoom != disable) {\n            this._disableZoom = disable;\n            if (disable === true) {\n                this.element.removeEventListener('wheel', this.onWheel);\n            }\n            else {\n                this.element.addEventListener('wheel', this.onWheel);\n            }\n            this.updateTouchActionStyle();\n        }\n    }\n    /**\n     * Copy the spherical values that represent the current camera orbital\n     * position relative to the configured target into a provided Spherical\n     * instance. If no Spherical is provided, a new Spherical will be allocated\n     * to copy the values into. The Spherical that values are copied into is\n     * returned.\n     */\n    getCameraSpherical(target = new three__WEBPACK_IMPORTED_MODULE_3__.Spherical()) {\n        return target.copy(this.spherical);\n    }\n    /**\n     * Returns the camera's current vertical field of view in degrees.\n     */\n    getFieldOfView() {\n        return this.camera.fov;\n    }\n    /**\n     * Configure the _options of the controls. Configured _options will be\n     * merged with whatever _options have already been configured for this\n     * controls instance.\n     */\n    applyOptions(_options) {\n        Object.assign(this._options, _options);\n        // Re-evaluates clamping based on potentially new values for min/max\n        // polar, azimuth and radius:\n        this.setOrbit();\n        this.setFieldOfView(Math.exp(this.goalLogFov));\n    }\n    /**\n     * Sets the near and far planes of the camera.\n     */\n    updateNearFar(nearPlane, farPlane) {\n        this.camera.near = Math.max(nearPlane, farPlane / 1000);\n        this.camera.far = farPlane;\n        this.camera.updateProjectionMatrix();\n    }\n    /**\n     * Sets the aspect ratio of the camera\n     */\n    updateAspect(aspect) {\n        this.camera.aspect = aspect;\n        this.camera.updateProjectionMatrix();\n    }\n    /**\n     * Set the absolute orbital goal of the camera. The change will be\n     * applied over a number of frames depending on configured acceleration and\n     * dampening _options.\n     *\n     * Returns true if invoking the method will result in the camera changing\n     * position and/or rotation, otherwise false.\n     */\n    setOrbit(goalTheta = this.goalSpherical.theta, goalPhi = this.goalSpherical.phi, goalRadius = this.goalSpherical.radius) {\n        const { minimumAzimuthalAngle, maximumAzimuthalAngle, minimumPolarAngle, maximumPolarAngle, minimumRadius, maximumRadius } = this._options;\n        const { theta, phi, radius } = this.goalSpherical;\n        const nextTheta = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(goalTheta, minimumAzimuthalAngle, maximumAzimuthalAngle);\n        if (!isFinite(minimumAzimuthalAngle) &&\n            !isFinite(maximumAzimuthalAngle)) {\n            this.spherical.theta =\n                this.wrapAngle(this.spherical.theta - nextTheta) + nextTheta;\n        }\n        const nextPhi = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(goalPhi, minimumPolarAngle, maximumPolarAngle);\n        const nextRadius = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(goalRadius, minimumRadius, maximumRadius);\n        if (nextTheta === theta && nextPhi === phi && nextRadius === radius) {\n            return false;\n        }\n        this.goalSpherical.theta = nextTheta;\n        this.goalSpherical.phi = nextPhi;\n        this.goalSpherical.radius = nextRadius;\n        this.goalSpherical.makeSafe();\n        return true;\n    }\n    /**\n     * Subset of setOrbit() above, which only sets the camera's radius.\n     */\n    setRadius(radius) {\n        this.goalSpherical.radius = radius;\n        this.setOrbit();\n    }\n    /**\n     * Sets the goal field of view for the camera\n     */\n    setFieldOfView(fov) {\n        const { minimumFieldOfView, maximumFieldOfView } = this._options;\n        fov = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(fov, minimumFieldOfView, maximumFieldOfView);\n        this.goalLogFov = Math.log(fov);\n    }\n    /**\n     * Sets the smoothing decay time.\n     */\n    setDamperDecayTime(decayMilliseconds) {\n        this.thetaDamper.setDecayTime(decayMilliseconds);\n        this.phiDamper.setDecayTime(decayMilliseconds);\n        this.radiusDamper.setDecayTime(decayMilliseconds);\n        this.fovDamper.setDecayTime(decayMilliseconds);\n    }\n    /**\n     * Adjust the orbital position of the camera relative to its current orbital\n     * position. Does not let the theta goal get more than pi ahead of the current\n     * theta, which ensures interpolation continues in the direction of the delta.\n     * The deltaZoom parameter adjusts both the field of view and the orbit radius\n     * such that they progress across their allowed ranges in sync.\n     */\n    adjustOrbit(deltaTheta, deltaPhi, deltaZoom) {\n        const { theta, phi, radius } = this.goalSpherical;\n        const { minimumRadius, maximumRadius, minimumFieldOfView, maximumFieldOfView } = this._options;\n        const dTheta = this.spherical.theta - theta;\n        const dThetaLimit = Math.PI - 0.001;\n        const goalTheta = theta - (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.clamp)(deltaTheta, -dThetaLimit - dTheta, dThetaLimit - dTheta);\n        const goalPhi = phi - deltaPhi;\n        const deltaRatio = deltaZoom === 0 ?\n            0 :\n            ((deltaZoom > 0 ? maximumRadius : minimumRadius) - radius) /\n                (Math.log(deltaZoom > 0 ? maximumFieldOfView : minimumFieldOfView) -\n                    this.goalLogFov);\n        const goalRadius = radius +\n            deltaZoom *\n                (isFinite(deltaRatio) ? deltaRatio :\n                    (maximumRadius - minimumRadius) * 2);\n        this.setOrbit(goalTheta, goalPhi, goalRadius);\n        if (deltaZoom !== 0) {\n            const goalLogFov = this.goalLogFov + deltaZoom;\n            this.setFieldOfView(Math.exp(goalLogFov));\n        }\n    }\n    /**\n     * Move the camera instantly instead of accelerating toward the goal\n     * parameters.\n     */\n    jumpToGoal() {\n        this.update(0, _Damper_js__WEBPACK_IMPORTED_MODULE_2__.SETTLING_TIME);\n    }\n    /**\n     * Update controls. In most cases, this will result in the camera\n     * interpolating its position and rotation until it lines up with the\n     * designated goal orbital position.\n     *\n     * Time and delta are measured in milliseconds.\n     */\n    update(_time, delta) {\n        if (this.isStationary()) {\n            return;\n        }\n        const { maximumPolarAngle, maximumRadius } = this._options;\n        const dTheta = this.spherical.theta - this.goalSpherical.theta;\n        if (Math.abs(dTheta) > Math.PI &&\n            !isFinite(this._options.minimumAzimuthalAngle) &&\n            !isFinite(this._options.maximumAzimuthalAngle)) {\n            this.spherical.theta -= Math.sign(dTheta) * 2 * Math.PI;\n        }\n        this.spherical.theta = this.thetaDamper.update(this.spherical.theta, this.goalSpherical.theta, delta, Math.PI);\n        this.spherical.phi = this.phiDamper.update(this.spherical.phi, this.goalSpherical.phi, delta, maximumPolarAngle);\n        this.spherical.radius = this.radiusDamper.update(this.spherical.radius, this.goalSpherical.radius, delta, maximumRadius);\n        this.logFov = this.fovDamper.update(this.logFov, this.goalLogFov, delta, 1);\n        this.moveCamera();\n    }\n    updateTouchActionStyle() {\n        const { style } = this.element;\n        if (this._interactionEnabled) {\n            const { touchAction } = this._options;\n            if (this._disableZoom && touchAction !== 'none') {\n                style.touchAction = 'manipulation';\n            }\n            else {\n                style.touchAction = touchAction;\n            }\n        }\n        else {\n            style.touchAction = '';\n        }\n    }\n    isStationary() {\n        return this.goalSpherical.theta === this.spherical.theta &&\n            this.goalSpherical.phi === this.spherical.phi &&\n            this.goalSpherical.radius === this.spherical.radius &&\n            this.goalLogFov === this.logFov;\n    }\n    dispatchChange() {\n        this.dispatchEvent({ type: 'change', source: this.changeSource });\n    }\n    moveCamera() {\n        // Derive the new camera position from the updated spherical:\n        this.spherical.makeSafe();\n        this.camera.position.setFromSpherical(this.spherical);\n        this.camera.setRotationFromEuler(new three__WEBPACK_IMPORTED_MODULE_3__.Euler(this.spherical.phi - Math.PI / 2, this.spherical.theta, 0, 'YXZ'));\n        if (this.camera.fov !== Math.exp(this.logFov)) {\n            this.camera.fov = Math.exp(this.logFov);\n            this.camera.updateProjectionMatrix();\n        }\n        this.dispatchChange();\n    }\n    userAdjustOrbit(deltaTheta, deltaPhi, deltaZoom) {\n        this.adjustOrbit(deltaTheta * this.orbitSensitivity * this.inputSensitivity, deltaPhi * this.orbitSensitivity * this.inputSensitivity, deltaZoom * this.inputSensitivity);\n        // Always make sure that an initial event is triggered in case there is\n        // contention between user interaction and imperative changes. This initial\n        // event will give external observers that chance to observe that\n        // interaction occurred at all:\n        this.dispatchChange();\n    }\n    // Wraps to between -pi and pi\n    wrapAngle(radians) {\n        const normalized = (radians + Math.PI) / (2 * Math.PI);\n        const wrapped = normalized - Math.floor(normalized);\n        return wrapped * 2 * Math.PI - Math.PI;\n    }\n    pixelLengthToSphericalAngle(pixelLength) {\n        return 2 * Math.PI * pixelLength / this.element.clientHeight;\n    }\n    twoTouchDistance(touchOne, touchTwo) {\n        const { clientX: xOne, clientY: yOne } = touchOne;\n        const { clientX: xTwo, clientY: yTwo } = touchTwo;\n        const xDelta = xTwo - xOne;\n        const yDelta = yTwo - yOne;\n        return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n    }\n    handleSinglePointerMove(dx, dy) {\n        const deltaTheta = this.pixelLengthToSphericalAngle(dx);\n        const deltaPhi = this.pixelLengthToSphericalAngle(dy);\n        if (this.isUserPointing === false) {\n            this.isUserPointing = true;\n            this.dispatchEvent({ type: 'pointer-change-start' });\n        }\n        this.userAdjustOrbit(deltaTheta, deltaPhi, 0);\n    }\n    initializePan() {\n        const { theta, phi } = this.spherical;\n        const psi = theta - this.scene.yaw;\n        this.panPerPixel = PAN_SENSITIVITY / this.scene.height;\n        this.panProjection.set(-Math.cos(psi), -Math.cos(phi) * Math.sin(psi), 0, 0, Math.sin(phi), 0, Math.sin(psi), -Math.cos(phi) * Math.cos(psi), 0);\n    }\n    movePan(dx, dy) {\n        const { scene } = this;\n        const dxy = vector3.set(dx, dy, 0).multiplyScalar(this.inputSensitivity);\n        const metersPerPixel = this.spherical.radius * Math.exp(this.logFov) * this.panPerPixel;\n        dxy.multiplyScalar(metersPerPixel);\n        const target = scene.getTarget();\n        target.add(dxy.applyMatrix3(this.panProjection));\n        scene.boundingSphere.clampPoint(target, target);\n        scene.setTarget(target.x, target.y, target.z);\n        this.dispatchChange();\n    }\n    recenter(pointer) {\n        if (performance.now() > this.startTime + TAP_MS ||\n            Math.abs(pointer.clientX - this.startPointerPosition.clientX) >\n                TAP_DISTANCE ||\n            Math.abs(pointer.clientY - this.startPointerPosition.clientY) >\n                TAP_DISTANCE) {\n            return;\n        }\n        const { scene } = this;\n        const hit = scene.positionAndNormalFromPoint(scene.getNDC(pointer.clientX, pointer.clientY));\n        if (hit == null) {\n            const { cameraTarget } = scene.element;\n            scene.element.cameraTarget = '';\n            scene.element.cameraTarget = cameraTarget;\n            // Zoom all the way out.\n            this.userAdjustOrbit(0, 0, 1);\n        }\n        else {\n            scene.target.worldToLocal(hit.position);\n            scene.setTarget(hit.position.x, hit.position.y, hit.position.z);\n        }\n    }\n    resetRadius() {\n        const { scene } = this;\n        const hit = scene.positionAndNormalFromPoint(vector2.set(0, 0));\n        if (hit == null) {\n            return;\n        }\n        scene.target.worldToLocal(hit.position);\n        const goalTarget = scene.getTarget();\n        const { theta, phi } = this.spherical;\n        // Set target to surface hit point, except the target is still settling,\n        // so offset the goal accordingly so the transition is smooth even though\n        // this will drift the target slightly away from the hit point.\n        const psi = theta - scene.yaw;\n        const n = vector3.set(Math.sin(phi) * Math.sin(psi), Math.cos(phi), Math.sin(phi) * Math.cos(psi));\n        const dr = n.dot(hit.position.sub(goalTarget));\n        goalTarget.add(n.multiplyScalar(dr));\n        scene.setTarget(goalTarget.x, goalTarget.y, goalTarget.z);\n        // Change the camera radius to match the change in target so that the\n        // camera itself does not move, unless it hits a radius bound.\n        this.setOrbit(undefined, undefined, this.goalSpherical.radius - dr);\n    }\n    onTouchChange(event) {\n        if (this.pointers.length === 1) {\n            this.touchMode = this.touchModeRotate;\n        }\n        else {\n            if (this._disableZoom) {\n                this.touchMode = null;\n                this.element.removeEventListener('touchmove', this.disableScroll);\n                return;\n            }\n            this.touchMode = (this.touchDecided && this.touchMode === null) ?\n                null :\n                this.touchModeZoom;\n            this.touchDecided = true;\n            this.element.addEventListener('touchmove', this.disableScroll, { passive: false });\n            this.lastSeparation =\n                this.twoTouchDistance(this.pointers[0], this.pointers[1]);\n            if (this.enablePan && this.touchMode != null) {\n                this.initializePan();\n                if (!event.altKey) { // user interaction, not prompt\n                    this.scene.element[_features_controls_js__WEBPACK_IMPORTED_MODULE_0__.$panElement].style.opacity = 1;\n                }\n            }\n        }\n    }\n    onMouseDown(event) {\n        this.panPerPixel = 0;\n        if (this.enablePan &&\n            (event.button === 2 || event.ctrlKey || event.metaKey ||\n                event.shiftKey)) {\n            this.initializePan();\n            this.scene.element[_features_controls_js__WEBPACK_IMPORTED_MODULE_0__.$panElement].style.opacity = 1;\n        }\n        this.element.style.cursor = 'grabbing';\n    }\n    /**\n     * Handles the orbit and Zoom key presses\n     * Uses constants for the increment.\n     * @param event The keyboard event for the .key value\n     * @returns boolean to indicate if the key event has been handled\n     */\n    orbitZoomKeyCodeHandler(event) {\n        let relevantKey = true;\n        switch (event.key) {\n            case 'PageUp':\n                this.userAdjustOrbit(0, 0, ZOOM_SENSITIVITY);\n                break;\n            case 'PageDown':\n                this.userAdjustOrbit(0, 0, -1 * ZOOM_SENSITIVITY);\n                break;\n            case 'ArrowUp':\n                this.userAdjustOrbit(0, -KEYBOARD_ORBIT_INCREMENT, 0);\n                break;\n            case 'ArrowDown':\n                this.userAdjustOrbit(0, KEYBOARD_ORBIT_INCREMENT, 0);\n                break;\n            case 'ArrowLeft':\n                this.userAdjustOrbit(-KEYBOARD_ORBIT_INCREMENT, 0, 0);\n                break;\n            case 'ArrowRight':\n                this.userAdjustOrbit(KEYBOARD_ORBIT_INCREMENT, 0, 0);\n                break;\n            default:\n                relevantKey = false;\n                break;\n        }\n        return relevantKey;\n    }\n    /**\n     * Handles the Pan key presses\n     * Uses constants for the increment.\n     * @param event The keyboard event for the .key value\n     * @returns boolean to indicate if the key event has been handled\n     */\n    panKeyCodeHandler(event) {\n        this.initializePan();\n        let relevantKey = true;\n        switch (event.key) {\n            case 'ArrowUp':\n                this.movePan(0, -1 * PAN_KEY_INCREMENT); // This is the negative one so that the\n                // model appears to move as the arrow\n                // direction rather than the view moving\n                break;\n            case 'ArrowDown':\n                this.movePan(0, PAN_KEY_INCREMENT);\n                break;\n            case 'ArrowLeft':\n                this.movePan(-1 * PAN_KEY_INCREMENT, 0);\n                break;\n            case 'ArrowRight':\n                this.movePan(PAN_KEY_INCREMENT, 0);\n                break;\n            default:\n                relevantKey = false;\n                break;\n        }\n        return relevantKey;\n    }\n}\n//# sourceMappingURL=SmoothControls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/SmoothControls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TextureUtils)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_RGBELoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/loaders/RGBELoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/RGBELoader.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* harmony import */ var _EnvironmentScene_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnvironmentScene.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentScene.js\");\n/* harmony import */ var _EnvironmentSceneAlt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EnvironmentSceneAlt.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/EnvironmentSceneAlt.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nconst GENERATED_SIGMA = 0.04;\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\nconst HDR_FILE_RE = /\\.hdr(\\.js)?$/;\nconst ldrLoader = new three__WEBPACK_IMPORTED_MODULE_3__.TextureLoader();\nconst hdrLoader = new three_examples_jsm_loaders_RGBELoader_js__WEBPACK_IMPORTED_MODULE_4__.RGBELoader();\nhdrLoader.setDataType(three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType);\nclass TextureUtils extends three__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {\n    constructor(threeRenderer) {\n        super();\n        this.threeRenderer = threeRenderer;\n        this.generatedEnvironmentMap = null;\n        this.generatedEnvironmentMapAlt = null;\n        this.skyboxCache = new Map();\n        this.blurMaterial = null;\n        this.blurScene = null;\n    }\n    async load(url, progressCallback = () => { }) {\n        try {\n            const isHDR = HDR_FILE_RE.test(url);\n            const loader = isHDR ? hdrLoader : ldrLoader;\n            const texture = await new Promise((resolve, reject) => loader.load(url, resolve, (event) => {\n                progressCallback(event.loaded / event.total * 0.9);\n            }, reject));\n            progressCallback(1.0);\n            texture.name = url;\n            texture.mapping = three__WEBPACK_IMPORTED_MODULE_3__.EquirectangularReflectionMapping;\n            if (!isHDR) {\n                texture.encoding = three__WEBPACK_IMPORTED_MODULE_3__.sRGBEncoding;\n            }\n            return texture;\n        }\n        finally {\n            if (progressCallback) {\n                progressCallback(1);\n            }\n        }\n    }\n    /**\n     * Returns a { skybox, environmentMap } object with the targets/textures\n     * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n     * is a Texture from a WebGLRenderCubeTarget.\n     */\n    async generateEnvironmentMapAndSkybox(skyboxUrl = null, environmentMapUrl = null, progressCallback = () => { }) {\n        const useAltEnvironment = environmentMapUrl !== 'legacy';\n        if (environmentMapUrl === 'legacy' || environmentMapUrl === 'neutral') {\n            environmentMapUrl = null;\n        }\n        environmentMapUrl = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_0__.deserializeUrl)(environmentMapUrl);\n        let skyboxLoads = Promise.resolve(null);\n        let environmentMapLoads;\n        // If we have a skybox URL, attempt to load it as a cubemap\n        if (!!skyboxUrl) {\n            skyboxLoads = this.loadEquirectFromUrl(skyboxUrl, progressCallback);\n        }\n        if (!!environmentMapUrl) {\n            // We have an available environment map URL\n            environmentMapLoads =\n                this.loadEquirectFromUrl(environmentMapUrl, progressCallback);\n        }\n        else if (!!skyboxUrl) {\n            // Fallback to deriving the environment map from an available skybox\n            environmentMapLoads =\n                this.loadEquirectFromUrl(skyboxUrl, progressCallback);\n        }\n        else {\n            // Fallback to generating the environment map\n            environmentMapLoads = useAltEnvironment ?\n                this.loadGeneratedEnvironmentMapAlt() :\n                this.loadGeneratedEnvironmentMap();\n        }\n        const [environmentMap, skybox] = await Promise.all([environmentMapLoads, skyboxLoads]);\n        if (environmentMap == null) {\n            throw new Error('Failed to load environment map.');\n        }\n        return { environmentMap, skybox };\n    }\n    /**\n     * Loads an equirect Texture from a given URL, for use as a skybox.\n     */\n    async loadEquirectFromUrl(url, progressCallback) {\n        if (!this.skyboxCache.has(url)) {\n            const skyboxMapLoads = this.load(url, progressCallback);\n            this.skyboxCache.set(url, skyboxMapLoads);\n        }\n        return this.skyboxCache.get(url);\n    }\n    async GenerateEnvironmentMap(scene, name) {\n        await (0,_utilities_js__WEBPACK_IMPORTED_MODULE_0__.timePasses)();\n        const renderer = this.threeRenderer;\n        const cubeTarget = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLCubeRenderTarget(256, {\n            generateMipmaps: false,\n            type: three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType,\n            format: three__WEBPACK_IMPORTED_MODULE_3__.RGBAFormat,\n            encoding: three__WEBPACK_IMPORTED_MODULE_3__.LinearEncoding,\n            depthBuffer: true\n        });\n        const cubeCamera = new three__WEBPACK_IMPORTED_MODULE_3__.CubeCamera(0.1, 100, cubeTarget);\n        const generatedEnvironmentMap = cubeCamera.renderTarget.texture;\n        generatedEnvironmentMap.name = name;\n        const outputEncoding = renderer.outputEncoding;\n        const toneMapping = renderer.toneMapping;\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_3__.NoToneMapping;\n        renderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_3__.LinearEncoding;\n        cubeCamera.update(renderer, scene);\n        this.blurCubemap(cubeTarget, GENERATED_SIGMA);\n        renderer.toneMapping = toneMapping;\n        renderer.outputEncoding = outputEncoding;\n        return generatedEnvironmentMap;\n    }\n    /**\n     * Loads a dynamically generated environment map.\n     */\n    async loadGeneratedEnvironmentMap() {\n        if (this.generatedEnvironmentMap == null) {\n            this.generatedEnvironmentMap =\n                this.GenerateEnvironmentMap(new _EnvironmentScene_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](), 'legacy');\n        }\n        return this.generatedEnvironmentMap;\n    }\n    /**\n     * Loads a dynamically generated environment map, designed to be neutral and\n     * color-preserving. Shows less contrast around the different sides of the\n     * object.\n     */\n    async loadGeneratedEnvironmentMapAlt() {\n        if (this.generatedEnvironmentMapAlt == null) {\n            this.generatedEnvironmentMapAlt =\n                this.GenerateEnvironmentMap(new _EnvironmentSceneAlt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](), 'neutral');\n        }\n        return this.generatedEnvironmentMapAlt;\n    }\n    blurCubemap(cubeTarget, sigma) {\n        if (this.blurMaterial == null) {\n            this.blurMaterial = this.getBlurShader(MAX_SAMPLES);\n            const box = new three__WEBPACK_IMPORTED_MODULE_3__.BoxGeometry();\n            const blurMesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(box, this.blurMaterial);\n            this.blurScene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n            this.blurScene.add(blurMesh);\n        }\n        const tempTarget = cubeTarget.clone();\n        this.halfblur(cubeTarget, tempTarget, sigma, 'latitudinal');\n        this.halfblur(tempTarget, cubeTarget, sigma, 'longitudinal');\n        // Disposing this target after we're done with it somehow corrupts Safari's\n        // whole graphics driver. It's random, but occurs more frequently on\n        // lower-powered GPUs (macbooks with intel graphics, older iPhones). It goes\n        // beyond just messing up the PMREM, as it also occasionally causes\n        // visible corruption on the canvas and even on the rest of the page.\n        /** tempTarget.dispose(); */\n    }\n    halfblur(targetIn, targetOut, sigmaRadians, direction) {\n        // Number of standard deviations at which to cut off the discrete\n        // approximation.\n        const STANDARD_DEVIATIONS = 3;\n        const pixels = targetIn.width;\n        const radiansPerPixel = isFinite(sigmaRadians) ?\n            Math.PI / (2 * pixels) :\n            2 * Math.PI / (2 * MAX_SAMPLES - 1);\n        const sigmaPixels = sigmaRadians / radiansPerPixel;\n        const samples = isFinite(sigmaRadians) ?\n            1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) :\n            MAX_SAMPLES;\n        if (samples > MAX_SAMPLES) {\n            console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n        }\n        const weights = [];\n        let sum = 0;\n        for (let i = 0; i < MAX_SAMPLES; ++i) {\n            const x = i / sigmaPixels;\n            const weight = Math.exp(-x * x / 2);\n            weights.push(weight);\n            if (i == 0) {\n                sum += weight;\n            }\n            else if (i < samples) {\n                sum += 2 * weight;\n            }\n        }\n        for (let i = 0; i < weights.length; i++) {\n            weights[i] = weights[i] / sum;\n        }\n        const blurUniforms = this.blurMaterial.uniforms;\n        blurUniforms['envMap'].value = targetIn.texture;\n        blurUniforms['samples'].value = samples;\n        blurUniforms['weights'].value = weights;\n        blurUniforms['latitudinal'].value = direction === 'latitudinal';\n        blurUniforms['dTheta'].value = radiansPerPixel;\n        const cubeCamera = new three__WEBPACK_IMPORTED_MODULE_3__.CubeCamera(0.1, 100, targetOut);\n        cubeCamera.update(this.threeRenderer, this.blurScene);\n    }\n    getBlurShader(maxSamples) {\n        const weights = new Float32Array(maxSamples);\n        const poleAxis = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 1, 0);\n        const shaderMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n            name: 'SphericalGaussianBlur',\n            defines: { 'n': maxSamples },\n            uniforms: {\n                'envMap': { value: null },\n                'samples': { value: 1 },\n                'weights': { value: weights },\n                'latitudinal': { value: false },\n                'dTheta': { value: 0 },\n                'poleAxis': { value: poleAxis }\n            },\n            vertexShader: /* glsl */ `\n      \n      varying vec3 vOutputDirection;\n  \n      void main() {\n  \n        vOutputDirection = vec3( position );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  \n      }\n    `,\n            fragmentShader: /* glsl */ `\n        varying vec3 vOutputDirection;\n  \n        uniform samplerCube envMap;\n        uniform int samples;\n        uniform float weights[ n ];\n        uniform bool latitudinal;\n        uniform float dTheta;\n        uniform vec3 poleAxis;\n  \n        vec3 getSample( float theta, vec3 axis ) {\n  \n          float cosTheta = cos( theta );\n          // Rodrigues' axis-angle rotation\n          vec3 sampleDirection = vOutputDirection * cosTheta\n            + cross( axis, vOutputDirection ) * sin( theta )\n            + axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n  \n          return vec3( textureCube( envMap, sampleDirection ) );\n  \n        }\n  \n        void main() {\n  \n          vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n  \n          if ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n  \n            axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n  \n          }\n  \n          axis = normalize( axis );\n  \n          gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n          gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n  \n          for ( int i = 1; i < n; i++ ) {\n  \n            if ( i >= samples ) {\n  \n              break;\n  \n            }\n  \n            float theta = dTheta * float( i );\n            gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n            gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n  \n          }\n        }\n      `,\n            blending: three__WEBPACK_IMPORTED_MODULE_3__.NoBlending,\n            depthTest: false,\n            depthWrite: false,\n            side: three__WEBPACK_IMPORTED_MODULE_3__.BackSide\n        });\n        return shaderMaterial;\n    }\n    async dispose() {\n        for (const [, promise] of this.skyboxCache) {\n            const skybox = await promise;\n            skybox.dispose();\n        }\n        if (this.generatedEnvironmentMap != null) {\n            (await this.generatedEnvironmentMap).dispose();\n            this.generatedEnvironmentMap = null;\n        }\n        if (this.generatedEnvironmentMapAlt != null) {\n            (await this.generatedEnvironmentMapAlt).dispose();\n            this.generatedEnvironmentMapAlt = null;\n        }\n        if (this.blurMaterial != null) {\n            this.blurMaterial.dispose();\n        }\n    }\n}\n//# sourceMappingURL=TextureUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/TextureUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelViewerGLTFInstance: () => (/* binding */ ModelViewerGLTFInstance)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GLTFInstance.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/GLTFInstance.js\");\n/* harmony import */ var _correlated_scene_graph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./correlated-scene-graph.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js\");\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nconst $correlatedSceneGraph = Symbol('correlatedSceneGraph');\n/**\n * This specialization of GLTFInstance collects all of the processing needed\n * to prepare a model and to clone it making special considerations for\n * <model-viewer> use cases.\n */\nclass ModelViewerGLTFInstance extends _GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.GLTFInstance {\n    /**\n     * @override\n     */\n    static [_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$prepare](source) {\n        const prepared = super[_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$prepare](source);\n        if (prepared[$correlatedSceneGraph] == null) {\n            prepared[$correlatedSceneGraph] = _correlated_scene_graph_js__WEBPACK_IMPORTED_MODULE_1__.CorrelatedSceneGraph.from(prepared);\n        }\n        const { scene } = prepared;\n        const nullSphere = new three__WEBPACK_IMPORTED_MODULE_2__.Sphere(undefined, Infinity);\n        scene.traverse((node) => {\n            // Set a high renderOrder while we're here to ensure the model\n            // always renders on top of the sky sphere\n            node.renderOrder = 1000;\n            // Three.js seems to cull some animated models incorrectly. Since we\n            // expect to view our whole scene anyway, we turn off the frustum\n            // culling optimization here.\n            node.frustumCulled = false;\n            // Animations for objects without names target their UUID instead. When\n            // objects are cloned, they get new UUIDs which the animation can't\n            // find. To fix this, we assign their UUID as their name.\n            if (!node.name) {\n                node.name = node.uuid;\n            }\n            const mesh = node;\n            if (mesh.isMesh) {\n                const { geometry } = mesh;\n                mesh.castShadow = true;\n                if (mesh.isSkinnedMesh) {\n                    // Akin to disabling frustum culling above, we have to also manually\n                    // disable the bounds to make raycasting correct for skinned meshes.\n                    geometry.boundingSphere = nullSphere;\n                    // The bounding box is set in GLTFLoader by the accessor bounds, which\n                    // are not updated with animation.\n                    geometry.boundingBox = null;\n                }\n                const material = mesh.material;\n                if (material.isMeshBasicMaterial === true) {\n                    material.toneMapped = false;\n                }\n                // This makes shadows better for non-manifold meshes\n                material.shadowSide = three__WEBPACK_IMPORTED_MODULE_2__.FrontSide;\n                // Fixes an edge case with unused extra UV-coords being incorrectly\n                // referenced by three.js; remove when\n                // https://github.com/mrdoob/three.js/pull/23974 is merged.\n                if (material.aoMap) {\n                    const { gltf, threeObjectMap } = prepared[$correlatedSceneGraph];\n                    const gltfRef = threeObjectMap.get(material);\n                    if (gltf.materials != null && gltfRef != null &&\n                        gltfRef.materials != null) {\n                        const gltfMaterial = gltf.materials[gltfRef.materials];\n                        if (gltfMaterial.occlusionTexture &&\n                            gltfMaterial.occlusionTexture.texCoord === 0 &&\n                            geometry.attributes.uv != null) {\n                            geometry.setAttribute('uv2', geometry.attributes.uv);\n                        }\n                    }\n                }\n            }\n        });\n        return prepared;\n    }\n    get correlatedSceneGraph() {\n        return this[_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$preparedGLTF][$correlatedSceneGraph];\n    }\n    /**\n     * @override\n     */\n    [_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$clone]() {\n        const clone = super[_GLTFInstance_js__WEBPACK_IMPORTED_MODULE_0__.$clone]();\n        const sourceUUIDToClonedMaterial = new Map();\n        clone.scene.traverse((node) => {\n            // Materials aren't cloned when cloning meshes; geometry\n            // and materials are copied by reference. This is necessary\n            // for the same model to be used twice with different\n            // scene-graph operations.\n            if (node.isMesh) {\n                const mesh = node;\n                const material = mesh.material;\n                if (material != null) {\n                    if (sourceUUIDToClonedMaterial.has(material.uuid)) {\n                        mesh.material = sourceUUIDToClonedMaterial.get(material.uuid);\n                        return;\n                    }\n                    mesh.material = material.clone();\n                    sourceUUIDToClonedMaterial.set(material.uuid, mesh.material);\n                }\n            }\n        });\n        // Cross-correlate the scene graph by relying on information in the\n        // current scene graph; without this step, relationships between the\n        // Three.js object graph and the glTF scene graph will be lost.\n        clone[$correlatedSceneGraph] =\n            _correlated_scene_graph_js__WEBPACK_IMPORTED_MODULE_1__.CorrelatedSceneGraph.from(clone, this.correlatedSceneGraph);\n        return clone;\n    }\n}\n//# sourceMappingURL=ModelViewerGLTFInstance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/ModelViewerGLTFInstance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GLTFExporterMaterialsVariantsExtension)\n/* harmony export */ });\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @param object {THREE.Object3D}\n * @return {boolean}\n */\nconst compatibleObject = (object) => {\n    // @TODO: Need properer variantMaterials format validation?\n    return object.material !==\n        undefined && // easier than (!object.isMesh && !object.isLine &&\n        // !object.isPoints)\n        object.userData && // just in case\n        object.userData.variantMaterials &&\n        // Is this line costly?\n        !!Array\n            .from(object.userData.variantMaterials\n            .values())\n            .filter(m => compatibleMaterial(m.material));\n};\n/**\n * @param material {THREE.Material}\n * @return {boolean}\n */\nconst compatibleMaterial = (material) => {\n    // @TODO: support multi materials?\n    return material && material.isMaterial && !Array.isArray(material);\n};\nclass GLTFExporterMaterialsVariantsExtension {\n    constructor(writer) {\n        this.writer = writer;\n        this.name = 'KHR_materials_variants';\n        this.variantNames = [];\n    }\n    beforeParse(objects) {\n        // Find all variant names and store them to the table\n        const variantNameSet = new Set();\n        for (const object of objects) {\n            object.traverse(o => {\n                if (!compatibleObject(o)) {\n                    return;\n                }\n                const variantMaterials = o.userData.variantMaterials;\n                const variantDataMap = o.userData.variantData;\n                for (const [variantName, variantData] of variantDataMap) {\n                    const variantMaterial = variantMaterials.get(variantData.index);\n                    // Ignore unloaded variant materials\n                    if (variantMaterial && compatibleMaterial(variantMaterial.material)) {\n                        variantNameSet.add(variantName);\n                    }\n                }\n            });\n        }\n        // We may want to sort?\n        variantNameSet.forEach(name => this.variantNames.push(name));\n    }\n    writeMesh(mesh, meshDef) {\n        if (!compatibleObject(mesh)) {\n            return;\n        }\n        const userData = mesh.userData;\n        const variantMaterials = userData.variantMaterials;\n        const variantDataMap = userData.variantData;\n        const mappingTable = new Map();\n        // Removes gaps in the variant indices list (caused by deleting variants).\n        const reIndexedVariants = new Map();\n        const variants = Array.from(variantDataMap.values()).sort((a, b) => {\n            return a.index - b.index;\n        });\n        for (const [i, variantData] of variants.entries()) {\n            reIndexedVariants.set(variantData.index, i);\n        }\n        for (const variantData of variantDataMap.values()) {\n            const variantInstance = variantMaterials.get(variantData.index);\n            if (!variantInstance || !compatibleMaterial(variantInstance.material)) {\n                continue;\n            }\n            const materialIndex = this.writer.processMaterial(variantInstance.material);\n            if (!mappingTable.has(materialIndex)) {\n                mappingTable.set(materialIndex, { material: materialIndex, variants: [] });\n            }\n            mappingTable.get(materialIndex).variants.push(reIndexedVariants.get(variantData.index));\n        }\n        const mappingsDef = Array.from(mappingTable.values())\n            .map((m => { return m.variants.sort((a, b) => a - b) && m; }))\n            .sort((a, b) => a.material - b.material);\n        if (mappingsDef.length === 0) {\n            return;\n        }\n        const originalMaterialIndex = compatibleMaterial(userData.originalMaterial) ?\n            this.writer.processMaterial(userData.originalMaterial) :\n            -1;\n        for (const primitiveDef of meshDef.primitives) {\n            // Override primitiveDef.material with original material.\n            if (originalMaterialIndex >= 0) {\n                primitiveDef.material = originalMaterialIndex;\n            }\n            primitiveDef.extensions = primitiveDef.extensions || {};\n            primitiveDef.extensions[this.name] = { mappings: mappingsDef };\n        }\n    }\n    afterParse() {\n        if (this.variantNames.length === 0) {\n            return;\n        }\n        const root = this.writer.json;\n        root.extensions = root.extensions || {};\n        const variantsDef = this.variantNames.map(n => {\n            return { name: n };\n        });\n        root.extensions[this.name] = { variants: variantsDef };\n        this.writer.extensionsUsed[this.name] = true;\n    }\n}\n//# sourceMappingURL=VariantMaterialExporterPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialExporterPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GLTFMaterialsVariantsExtension)\n/* harmony export */ });\n/* @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * KHR_materials_variants specification allows duplicated variant names\n * but it makes handling the extension complex.\n * We ensure tha names and make it easier.\n * If you want to export the extension with the original names\n * you are recommended to write GLTFExporter plugin to restore the names.\n *\n * @param variantNames {Array<string>}\n * @return {Array<string>}\n */\nconst ensureUniqueNames = (variantNames) => {\n    const uniqueNames = [];\n    const knownNames = new Set();\n    for (const name of variantNames) {\n        let uniqueName = name;\n        let suffix = 0;\n        // @TODO: An easy solution.\n        //        O(N^2) in the worst scenario where N is variantNames.length.\n        //        Fix me if needed.\n        while (knownNames.has(uniqueName)) {\n            uniqueName = name + '.' + (++suffix);\n        }\n        knownNames.add(uniqueName);\n        uniqueNames.push(uniqueName);\n    }\n    return uniqueNames;\n};\n/**\n * Convert mappings array to table object to make handling the extension easier.\n *\n * @param\n *     extensionDef {glTF.meshes[n].primitive.extensions.KHR_materials_variants}\n * @param variantNames {Array<string>} Required to be unique names\n * @return {Map}\n */\nconst mappingsArrayToTable = (extensionDef) => {\n    const table = new Map();\n    for (const mapping of extensionDef.mappings) {\n        for (const variant of mapping.variants) {\n            table.set(variant, { material: null, gltfMaterialIndex: mapping.material });\n        }\n    }\n    return table;\n};\nclass GLTFMaterialsVariantsExtension {\n    constructor(parser) {\n        this.parser = parser;\n        this.name = 'KHR_materials_variants';\n    }\n    // Note that the following properties will be overridden even if they are\n    // pre-defined\n    // - gltf.userData.variants\n    // - mesh.userData.variantMaterials\n    afterRoot(gltf) {\n        const parser = this.parser;\n        const json = parser.json;\n        if (json.extensions === undefined ||\n            json.extensions[this.name] === undefined) {\n            return null;\n        }\n        const extensionDef = json.extensions[this.name];\n        const variantsDef = extensionDef.variants || [];\n        const variants = ensureUniqueNames(variantsDef.map((v) => v.name));\n        for (const scene of gltf.scenes) {\n            // Save the variants data under associated mesh.userData\n            scene.traverse(object => {\n                const mesh = object;\n                if (!mesh.isMesh) {\n                    return;\n                }\n                const association = parser.associations.get(mesh);\n                if (association == null || association.meshes == null ||\n                    association.primitives == null) {\n                    return;\n                }\n                const meshDef = json.meshes[association.meshes];\n                const primitivesDef = meshDef.primitives;\n                const primitiveDef = primitivesDef[association.primitives];\n                const extensionsDef = primitiveDef.extensions;\n                if (!extensionsDef || !extensionsDef[this.name]) {\n                    return;\n                }\n                mesh.userData.variantMaterials =\n                    mappingsArrayToTable(extensionsDef[this.name]);\n            });\n        }\n        gltf.userData.variants = variants;\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=VariantMaterialLoaderPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvZ2x0Zi1pbnN0YW5jZS9WYXJpYW50TWF0ZXJpYWxMb2FkZXJQbHVnaW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsd0JBQXdCLGVBQWU7QUFDdkMsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQXFEO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdGhyZWUtY29tcG9uZW50cy9nbHRmLWluc3RhbmNlL1ZhcmlhbnRNYXRlcmlhbExvYWRlclBsdWdpbi5qcz83MzYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogS0hSX21hdGVyaWFsc192YXJpYW50cyBzcGVjaWZpY2F0aW9uIGFsbG93cyBkdXBsaWNhdGVkIHZhcmlhbnQgbmFtZXNcbiAqIGJ1dCBpdCBtYWtlcyBoYW5kbGluZyB0aGUgZXh0ZW5zaW9uIGNvbXBsZXguXG4gKiBXZSBlbnN1cmUgdGhhIG5hbWVzIGFuZCBtYWtlIGl0IGVhc2llci5cbiAqIElmIHlvdSB3YW50IHRvIGV4cG9ydCB0aGUgZXh0ZW5zaW9uIHdpdGggdGhlIG9yaWdpbmFsIG5hbWVzXG4gKiB5b3UgYXJlIHJlY29tbWVuZGVkIHRvIHdyaXRlIEdMVEZFeHBvcnRlciBwbHVnaW4gdG8gcmVzdG9yZSB0aGUgbmFtZXMuXG4gKlxuICogQHBhcmFtIHZhcmlhbnROYW1lcyB7QXJyYXk8c3RyaW5nPn1cbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZz59XG4gKi9cbmNvbnN0IGVuc3VyZVVuaXF1ZU5hbWVzID0gKHZhcmlhbnROYW1lcykgPT4ge1xuICAgIGNvbnN0IHVuaXF1ZU5hbWVzID0gW107XG4gICAgY29uc3Qga25vd25OYW1lcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdmFyaWFudE5hbWVzKSB7XG4gICAgICAgIGxldCB1bmlxdWVOYW1lID0gbmFtZTtcbiAgICAgICAgbGV0IHN1ZmZpeCA9IDA7XG4gICAgICAgIC8vIEBUT0RPOiBBbiBlYXN5IHNvbHV0aW9uLlxuICAgICAgICAvLyAgICAgICAgTyhOXjIpIGluIHRoZSB3b3JzdCBzY2VuYXJpbyB3aGVyZSBOIGlzIHZhcmlhbnROYW1lcy5sZW5ndGguXG4gICAgICAgIC8vICAgICAgICBGaXggbWUgaWYgbmVlZGVkLlxuICAgICAgICB3aGlsZSAoa25vd25OYW1lcy5oYXModW5pcXVlTmFtZSkpIHtcbiAgICAgICAgICAgIHVuaXF1ZU5hbWUgPSBuYW1lICsgJy4nICsgKCsrc3VmZml4KTtcbiAgICAgICAgfVxuICAgICAgICBrbm93bk5hbWVzLmFkZCh1bmlxdWVOYW1lKTtcbiAgICAgICAgdW5pcXVlTmFtZXMucHVzaCh1bmlxdWVOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuaXF1ZU5hbWVzO1xufTtcbi8qKlxuICogQ29udmVydCBtYXBwaW5ncyBhcnJheSB0byB0YWJsZSBvYmplY3QgdG8gbWFrZSBoYW5kbGluZyB0aGUgZXh0ZW5zaW9uIGVhc2llci5cbiAqXG4gKiBAcGFyYW1cbiAqICAgICBleHRlbnNpb25EZWYge2dsVEYubWVzaGVzW25dLnByaW1pdGl2ZS5leHRlbnNpb25zLktIUl9tYXRlcmlhbHNfdmFyaWFudHN9XG4gKiBAcGFyYW0gdmFyaWFudE5hbWVzIHtBcnJheTxzdHJpbmc+fSBSZXF1aXJlZCB0byBiZSB1bmlxdWUgbmFtZXNcbiAqIEByZXR1cm4ge01hcH1cbiAqL1xuY29uc3QgbWFwcGluZ3NBcnJheVRvVGFibGUgPSAoZXh0ZW5zaW9uRGVmKSA9PiB7XG4gICAgY29uc3QgdGFibGUgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBtYXBwaW5nIG9mIGV4dGVuc2lvbkRlZi5tYXBwaW5ncykge1xuICAgICAgICBmb3IgKGNvbnN0IHZhcmlhbnQgb2YgbWFwcGluZy52YXJpYW50cykge1xuICAgICAgICAgICAgdGFibGUuc2V0KHZhcmlhbnQsIHsgbWF0ZXJpYWw6IG51bGwsIGdsdGZNYXRlcmlhbEluZGV4OiBtYXBwaW5nLm1hdGVyaWFsIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWJsZTtcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHTFRGTWF0ZXJpYWxzVmFyaWFudHNFeHRlbnNpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0tIUl9tYXRlcmlhbHNfdmFyaWFudHMnO1xuICAgIH1cbiAgICAvLyBOb3RlIHRoYXQgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIHdpbGwgYmUgb3ZlcnJpZGRlbiBldmVuIGlmIHRoZXkgYXJlXG4gICAgLy8gcHJlLWRlZmluZWRcbiAgICAvLyAtIGdsdGYudXNlckRhdGEudmFyaWFudHNcbiAgICAvLyAtIG1lc2gudXNlckRhdGEudmFyaWFudE1hdGVyaWFsc1xuICAgIGFmdGVyUm9vdChnbHRmKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IHRoaXMucGFyc2VyO1xuICAgICAgICBjb25zdCBqc29uID0gcGFyc2VyLmpzb247XG4gICAgICAgIGlmIChqc29uLmV4dGVuc2lvbnMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAganNvbi5leHRlbnNpb25zW3RoaXMubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uRGVmID0ganNvbi5leHRlbnNpb25zW3RoaXMubmFtZV07XG4gICAgICAgIGNvbnN0IHZhcmlhbnRzRGVmID0gZXh0ZW5zaW9uRGVmLnZhcmlhbnRzIHx8IFtdO1xuICAgICAgICBjb25zdCB2YXJpYW50cyA9IGVuc3VyZVVuaXF1ZU5hbWVzKHZhcmlhbnRzRGVmLm1hcCgodikgPT4gdi5uYW1lKSk7XG4gICAgICAgIGZvciAoY29uc3Qgc2NlbmUgb2YgZ2x0Zi5zY2VuZXMpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIHZhcmlhbnRzIGRhdGEgdW5kZXIgYXNzb2NpYXRlZCBtZXNoLnVzZXJEYXRhXG4gICAgICAgICAgICBzY2VuZS50cmF2ZXJzZShvYmplY3QgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBvYmplY3Q7XG4gICAgICAgICAgICAgICAgaWYgKCFtZXNoLmlzTWVzaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGFzc29jaWF0aW9uID0gcGFyc2VyLmFzc29jaWF0aW9ucy5nZXQobWVzaCk7XG4gICAgICAgICAgICAgICAgaWYgKGFzc29jaWF0aW9uID09IG51bGwgfHwgYXNzb2NpYXRpb24ubWVzaGVzID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24ucHJpbWl0aXZlcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzaERlZiA9IGpzb24ubWVzaGVzW2Fzc29jaWF0aW9uLm1lc2hlc107XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWl0aXZlc0RlZiA9IG1lc2hEZWYucHJpbWl0aXZlcztcbiAgICAgICAgICAgICAgICBjb25zdCBwcmltaXRpdmVEZWYgPSBwcmltaXRpdmVzRGVmW2Fzc29jaWF0aW9uLnByaW1pdGl2ZXNdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbnNEZWYgPSBwcmltaXRpdmVEZWYuZXh0ZW5zaW9ucztcbiAgICAgICAgICAgICAgICBpZiAoIWV4dGVuc2lvbnNEZWYgfHwgIWV4dGVuc2lvbnNEZWZbdGhpcy5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lc2gudXNlckRhdGEudmFyaWFudE1hdGVyaWFscyA9XG4gICAgICAgICAgICAgICAgICAgIG1hcHBpbmdzQXJyYXlUb1RhYmxlKGV4dGVuc2lvbnNEZWZbdGhpcy5uYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnbHRmLnVzZXJEYXRhLnZhcmlhbnRzID0gdmFyaWFudHM7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WYXJpYW50TWF0ZXJpYWxMb2FkZXJQbHVnaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/VariantMaterialLoaderPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CorrelatedSceneGraph: () => (/* binding */ CorrelatedSceneGraph)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst $threeGLTF = Symbol('threeGLTF');\nconst $gltf = Symbol('gltf');\nconst $gltfElementMap = Symbol('gltfElementMap');\nconst $threeObjectMap = Symbol('threeObjectMap');\nconst $parallelTraverseThreeScene = Symbol('parallelTraverseThreeScene');\nconst $correlateOriginalThreeGLTF = Symbol('correlateOriginalThreeGLTF');\nconst $correlateCloneThreeGLTF = Symbol('correlateCloneThreeGLTF');\n/**\n * The Three.js GLTFLoader provides us with an in-memory representation\n * of a glTF in terms of Three.js constructs. It also provides us with a copy\n * of the deserialized glTF without any Three.js decoration, and a mapping of\n * glTF elements to their corresponding Three.js constructs.\n *\n * A CorrelatedSceneGraph exposes a synchronously available mapping of glTF\n * element references to their corresponding Three.js constructs.\n */\nclass CorrelatedSceneGraph {\n    constructor(threeGLTF, gltf, threeObjectMap, gltfElementMap) {\n        this[$threeGLTF] = threeGLTF;\n        this[$gltf] = gltf;\n        this[$gltfElementMap] = gltfElementMap;\n        this[$threeObjectMap] = threeObjectMap;\n    }\n    /**\n     * Produce a CorrelatedSceneGraph from a naturally generated Three.js GLTF.\n     * Such GLTFs are produced by Three.js' GLTFLoader, and contain cached\n     * details that expedite the correlation step.\n     *\n     * If a CorrelatedSceneGraph is provided as the second argument, re-correlates\n     * a cloned Three.js GLTF with a clone of the glTF hierarchy used to produce\n     * the upstream Three.js GLTF that the clone was created from. The result\n     * CorrelatedSceneGraph is representative of the cloned hierarchy.\n     */\n    static from(threeGLTF, upstreamCorrelatedSceneGraph) {\n        if (upstreamCorrelatedSceneGraph != null) {\n            return this[$correlateCloneThreeGLTF](threeGLTF, upstreamCorrelatedSceneGraph);\n        }\n        else {\n            return this[$correlateOriginalThreeGLTF](threeGLTF);\n        }\n    }\n    static [$correlateOriginalThreeGLTF](threeGLTF) {\n        const gltf = threeGLTF.parser.json;\n        const associations = threeGLTF.parser.associations;\n        const gltfElementMap = new Map();\n        const defaultMaterial = { name: 'Default' };\n        const defaultReference = { type: 'materials', index: -1 };\n        for (const threeMaterial of associations.keys()) {\n            // Note: GLTFLoader creates a \"default\" material that has no\n            // corresponding glTF element in the case that no materials are\n            // specified in the source glTF. In this case we append a default\n            // material to allow this to be operated upon.\n            if (threeMaterial instanceof three__WEBPACK_IMPORTED_MODULE_0__.Material &&\n                associations.get(threeMaterial) == null) {\n                if (defaultReference.index < 0) {\n                    if (gltf.materials == null) {\n                        gltf.materials = [];\n                    }\n                    defaultReference.index = gltf.materials.length;\n                    gltf.materials.push(defaultMaterial);\n                }\n                threeMaterial.name = defaultMaterial.name;\n                associations.set(threeMaterial, { materials: defaultReference.index });\n            }\n        }\n        // Creates a reverse look up map (gltf-object to Three-object)\n        for (const [threeObject, gltfMappings] of associations) {\n            if (gltfMappings) {\n                const objWithUserData = threeObject;\n                objWithUserData.userData = objWithUserData.userData || {};\n                objWithUserData.userData.associations = gltfMappings;\n            }\n            for (const mapping in gltfMappings) {\n                if (mapping != null && mapping !== 'primitives') {\n                    const type = mapping;\n                    const elementArray = gltf[type] || [];\n                    const gltfElement = elementArray[gltfMappings[type]];\n                    if (gltfElement == null) {\n                        // TODO: Maybe throw here...\n                        continue;\n                    }\n                    let threeObjects = gltfElementMap.get(gltfElement);\n                    if (threeObjects == null) {\n                        threeObjects = new Set();\n                        gltfElementMap.set(gltfElement, threeObjects);\n                    }\n                    threeObjects.add(threeObject);\n                }\n            }\n        }\n        return new CorrelatedSceneGraph(threeGLTF, gltf, associations, gltfElementMap);\n    }\n    /**\n     * Transfers the association between a raw glTF and a Three.js scene graph\n     * to a clone of the Three.js scene graph, resolved as a new\n     * CorrelatedSceneGraph instance.\n     */\n    static [$correlateCloneThreeGLTF](cloneThreeGLTF, upstreamCorrelatedSceneGraph) {\n        const originalThreeGLTF = upstreamCorrelatedSceneGraph.threeGLTF;\n        const originalGLTF = upstreamCorrelatedSceneGraph.gltf;\n        const cloneGLTF = JSON.parse(JSON.stringify(originalGLTF));\n        const cloneThreeObjectMap = new Map();\n        const cloneGLTFElementMap = new Map();\n        for (let i = 0; i < originalThreeGLTF.scenes.length; i++) {\n            this[$parallelTraverseThreeScene](originalThreeGLTF.scenes[i], cloneThreeGLTF.scenes[i], (object, cloneObject) => {\n                const elementReference = upstreamCorrelatedSceneGraph.threeObjectMap.get(object);\n                if (elementReference == null) {\n                    return;\n                }\n                for (const mapping in elementReference) {\n                    if (mapping != null && mapping !== 'primitives') {\n                        const type = mapping;\n                        const index = elementReference[type];\n                        const cloneElement = cloneGLTF[type][index];\n                        const mappings = cloneThreeObjectMap.get(cloneObject) || {};\n                        mappings[type] = index;\n                        cloneThreeObjectMap.set(cloneObject, mappings);\n                        const cloneObjects = cloneGLTFElementMap.get(cloneElement) || new Set();\n                        cloneObjects.add(cloneObject);\n                        cloneGLTFElementMap.set(cloneElement, cloneObjects);\n                    }\n                }\n            });\n        }\n        return new CorrelatedSceneGraph(cloneThreeGLTF, cloneGLTF, cloneThreeObjectMap, cloneGLTFElementMap);\n    }\n    /**\n     * Traverses two presumably identical Three.js scenes, and invokes a\n     * callback for each Object3D or Material encountered, including the initial\n     * scene. Adapted from\n     * https://github.com/mrdoob/three.js/blob/7c1424c5819ab622a346dd630ee4e6431388021e/examples/jsm/utils/SkeletonUtils.js#L586-L596\n     */\n    static [$parallelTraverseThreeScene](sceneOne, sceneTwo, callback) {\n        const isMesh = (object) => {\n            return object.isMesh;\n        };\n        const traverse = (a, b) => {\n            callback(a, b);\n            if (a.isObject3D) {\n                if (isMesh(a)) {\n                    if (Array.isArray(a.material)) {\n                        for (let i = 0; i < a.material.length; ++i) {\n                            traverse(a.material[i], b.material[i]);\n                        }\n                    }\n                    else {\n                        traverse(a.material, b.material);\n                    }\n                }\n                for (let i = 0; i < a.children.length; ++i) {\n                    traverse(a.children[i], b.children[i]);\n                }\n            }\n        };\n        traverse(sceneOne, sceneTwo);\n    }\n    /**\n     * The source Three.js GLTF result given to us by a Three.js GLTFLoader.\n     */\n    get threeGLTF() {\n        return this[$threeGLTF];\n    }\n    /**\n     * The in-memory deserialized source glTF.\n     */\n    get gltf() {\n        return this[$gltf];\n    }\n    /**\n     * A Map of glTF element references to arrays of corresponding Three.js\n     * object references. Three.js objects are kept in arrays to account for\n     * cases where more than one Three.js object corresponds to a single glTF\n     * element.\n     */\n    get gltfElementMap() {\n        return this[$gltfElementMap];\n    }\n    /**\n     * A map of individual Three.js objects to corresponding elements in the\n     * source glTF.\n     */\n    get threeObjectMap() {\n        return this[$threeObjectMap];\n    }\n}\n//# sourceMappingURL=correlated-scene-graph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/correlated-scene-graph.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Filter: () => (/* binding */ Filter),\n/* harmony export */   Wrap: () => (/* binding */ Wrap)\n/* harmony export */ });\nvar Filter;\n(function (Filter) {\n    Filter[Filter[\"Nearest\"] = 9728] = \"Nearest\";\n    Filter[Filter[\"Linear\"] = 9729] = \"Linear\";\n    Filter[Filter[\"NearestMipmapNearest\"] = 9984] = \"NearestMipmapNearest\";\n    Filter[Filter[\"LinearMipmapNearest\"] = 9985] = \"LinearMipmapNearest\";\n    Filter[Filter[\"NearestMipmapLinear\"] = 9986] = \"NearestMipmapLinear\";\n    Filter[Filter[\"LinearMipmapLinear\"] = 9987] = \"LinearMipmapLinear\";\n})(Filter || (Filter = {}));\nvar Wrap;\n(function (Wrap) {\n    Wrap[Wrap[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n    Wrap[Wrap[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n    Wrap[Wrap[\"Repeat\"] = 10497] = \"Repeat\";\n})(Wrap || (Wrap = {}));\n//# sourceMappingURL=gltf-2.0.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3RocmVlLWNvbXBvbmVudHMvZ2x0Zi1pbnN0YW5jZS9nbHRmLTIuMC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3QjtBQUNsQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi90aHJlZS1jb21wb25lbnRzL2dsdGYtaW5zdGFuY2UvZ2x0Zi0yLjAuanM/Zjk1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIEZpbHRlcjtcbihmdW5jdGlvbiAoRmlsdGVyKSB7XG4gICAgRmlsdGVyW0ZpbHRlcltcIk5lYXJlc3RcIl0gPSA5NzI4XSA9IFwiTmVhcmVzdFwiO1xuICAgIEZpbHRlcltGaWx0ZXJbXCJMaW5lYXJcIl0gPSA5NzI5XSA9IFwiTGluZWFyXCI7XG4gICAgRmlsdGVyW0ZpbHRlcltcIk5lYXJlc3RNaXBtYXBOZWFyZXN0XCJdID0gOTk4NF0gPSBcIk5lYXJlc3RNaXBtYXBOZWFyZXN0XCI7XG4gICAgRmlsdGVyW0ZpbHRlcltcIkxpbmVhck1pcG1hcE5lYXJlc3RcIl0gPSA5OTg1XSA9IFwiTGluZWFyTWlwbWFwTmVhcmVzdFwiO1xuICAgIEZpbHRlcltGaWx0ZXJbXCJOZWFyZXN0TWlwbWFwTGluZWFyXCJdID0gOTk4Nl0gPSBcIk5lYXJlc3RNaXBtYXBMaW5lYXJcIjtcbiAgICBGaWx0ZXJbRmlsdGVyW1wiTGluZWFyTWlwbWFwTGluZWFyXCJdID0gOTk4N10gPSBcIkxpbmVhck1pcG1hcExpbmVhclwiO1xufSkoRmlsdGVyIHx8IChGaWx0ZXIgPSB7fSkpO1xuZXhwb3J0IHZhciBXcmFwO1xuKGZ1bmN0aW9uIChXcmFwKSB7XG4gICAgV3JhcFtXcmFwW1wiQ2xhbXBUb0VkZ2VcIl0gPSAzMzA3MV0gPSBcIkNsYW1wVG9FZGdlXCI7XG4gICAgV3JhcFtXcmFwW1wiTWlycm9yZWRSZXBlYXRcIl0gPSAzMzY0OF0gPSBcIk1pcnJvcmVkUmVwZWF0XCI7XG4gICAgV3JhcFtXcmFwW1wiUmVwZWF0XCJdID0gMTA0OTddID0gXCJSZXBlYXRcIjtcbn0pKFdyYXAgfHwgKFdyYXAgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2x0Zi0yLjAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/three-components/gltf-instance/gltf-2.0.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities.js":
/*!************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CAPPED_DEVICE_PIXEL_RATIO: () => (/* binding */ CAPPED_DEVICE_PIXEL_RATIO),\n/* harmony export */   assertIsArCandidate: () => (/* binding */ assertIsArCandidate),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   deserializeUrl: () => (/* binding */ deserializeUrl),\n/* harmony export */   getFirstMapKey: () => (/* binding */ getFirstMapKey),\n/* harmony export */   isDebugMode: () => (/* binding */ isDebugMode),\n/* harmony export */   resolveDpr: () => (/* binding */ resolveDpr),\n/* harmony export */   step: () => (/* binding */ step),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   timePasses: () => (/* binding */ timePasses),\n/* harmony export */   toFullUrl: () => (/* binding */ toFullUrl),\n/* harmony export */   waitForEvent: () => (/* binding */ waitForEvent)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/constants.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst deserializeUrl = (url) => (!!url && url !== 'null') ? toFullUrl(url) : null;\nconst assertIsArCandidate = () => {\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_WEBXR_AR_CANDIDATE) {\n        return;\n    }\n    const missingApis = [];\n    if (!_constants_js__WEBPACK_IMPORTED_MODULE_0__.HAS_WEBXR_DEVICE_API) {\n        missingApis.push('WebXR Device API');\n    }\n    if (!_constants_js__WEBPACK_IMPORTED_MODULE_0__.HAS_WEBXR_HIT_TEST_API) {\n        missingApis.push('WebXR Hit Test API');\n    }\n    throw new Error(`The following APIs are required for AR, but are missing in this browser: ${missingApis.join(', ')}`);\n};\n/**\n * Converts a partial URL string to a fully qualified URL string.\n *\n * @param {String} url\n * @return {String}\n */\nconst toFullUrl = (partialUrl) => {\n    const url = new URL(partialUrl, window.location.toString());\n    return url.toString();\n};\n/**\n * Returns a throttled version of a given function that is only invoked at most\n * once within a given threshold of time in milliseconds.\n *\n * The throttled version of the function has a \"flush\" property that resets the\n * threshold for cases when immediate invocation is desired.\n */\nconst throttle = (fn, ms) => {\n    let timer = null;\n    const throttled = (...args) => {\n        if (timer != null) {\n            return;\n        }\n        fn(...args);\n        timer = self.setTimeout(() => timer = null, ms);\n    };\n    throttled.flush = () => {\n        if (timer != null) {\n            self.clearTimeout(timer);\n            timer = null;\n        }\n    };\n    return throttled;\n};\nconst debounce = (fn, ms) => {\n    let timer = null;\n    return (...args) => {\n        if (timer != null) {\n            self.clearTimeout(timer);\n        }\n        timer = self.setTimeout(() => {\n            timer = null;\n            fn(...args);\n        }, ms);\n    };\n};\n/**\n * @param {Number} edge\n * @param {Number} value\n * @return {Number} 0 if value is less than edge, otherwise 1\n */\nconst step = (edge, value) => {\n    return value < edge ? 0 : 1;\n};\n/**\n * @param {Number} value\n * @param {Number} lowerLimit\n * @param {Number} upperLimit\n * @return {Number} value clamped within lowerLimit..upperLimit\n */\nconst clamp = (value, lowerLimit, upperLimit) => Math.max(lowerLimit, Math.min(upperLimit, value));\n// The DPR we use for a \"capped\" scenario (see resolveDpr below):\nconst CAPPED_DEVICE_PIXEL_RATIO = 1;\n/**\n * This helper analyzes the layout of the current page to decide if we should\n * use the natural device pixel ratio, or a capped value.\n *\n * We cap DPR if there is no meta viewport (suggesting that user is not\n * consciously specifying how to scale the viewport relative to the device\n * screen size).\n *\n * The rationale is that this condition typically leads to a pathological\n * outcome on mobile devices. When the window dimensions are scaled up on a\n * device with a high DPR, we create a canvas that is much larger than\n * appropriate to accommodate for the pixel density if we naively use the\n * reported DPR.\n *\n * This value needs to be measured in real time, as device pixel ratio can\n * change over time (e.g., when a user zooms the page). Also, in some cases\n * (such as Firefox on Android), the window's innerWidth is initially reported\n * as the same as the screen's availWidth but changes later.\n *\n * A user who specifies a meta viewport, thereby consciously creating scaling\n * conditions where <model-viewer> is slow, will be encouraged to live their\n * best life.\n */\nconst resolveDpr = (() => {\n    // If true, implies that the user is conscious of the viewport scaling\n    // relative to the device screen size.\n    const HAS_META_VIEWPORT_TAG = (() => {\n        var _a;\n        // Search result pages sometimes do not include a meta viewport tag even\n        // though they are certainly modern and work properly with devicePixelRatio.\n        if ((_a = document.documentElement.getAttribute('itemtype')) === null || _a === void 0 ? void 0 : _a.includes('schema.org/SearchResultsPage')) {\n            return true;\n        }\n        const metas = document.head != null ?\n            Array.from(document.head.querySelectorAll('meta')) :\n            [];\n        for (const meta of metas) {\n            if (meta.name === 'viewport') {\n                return true;\n            }\n        }\n        return false;\n    })();\n    if (!HAS_META_VIEWPORT_TAG) {\n        console.warn('No <meta name=\"viewport\"> detected; <model-viewer> will cap pixel density at 1.');\n    }\n    return () => HAS_META_VIEWPORT_TAG ? window.devicePixelRatio :\n        CAPPED_DEVICE_PIXEL_RATIO;\n})();\n/**\n * Debug mode is enabled when one of the two following conditions is true:\n *\n *  1. A 'model-viewer-debug-mode' query parameter is present in the current\n *     search string\n *  2. There is a global object ModelViewerElement with a debugMode property set\n *     to true\n */\nconst isDebugMode = (() => {\n    const debugQueryParameterName = 'model-viewer-debug-mode';\n    const debugQueryParameter = new RegExp(`[?&]${debugQueryParameterName}(&|$)`);\n    return () => (self.ModelViewerElement &&\n        self.ModelViewerElement.debugMode) ||\n        (self.location && self.location.search &&\n            self.location.search.match(debugQueryParameter));\n})();\n/**\n * Returns the first key in a Map in iteration order.\n *\n * NOTE(cdata): This is necessary because IE11 does not implement iterator\n * methods of Map, and polymer-build does not polyfill these methods for\n * compatibility and performance reasons. This helper proposes that it is\n * a reasonable compromise to sacrifice a very small amount of runtime\n * performance in IE11 for the sake of code clarity.\n */\nconst getFirstMapKey = (map) => {\n    if (map.keys != null) {\n        return map.keys().next().value || null;\n    }\n    let firstKey = null;\n    try {\n        map.forEach((_value, key, _map) => {\n            firstKey = key;\n            // Stop iterating the Map with forEach:\n            throw new Error();\n        });\n    }\n    catch (_error) {\n    }\n    return firstKey;\n};\nconst timePasses = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n/**\n * @param {EventTarget|EventDispatcher} target\n * @param {string} eventName\n * @param {?Function} predicate\n */\nconst waitForEvent = (target, eventName, predicate = null) => new Promise(resolve => {\n    function handler(event) {\n        if (!predicate || predicate(event)) {\n            resolve(event);\n            target.removeEventListener(eventName, handler);\n        }\n    }\n    target.addEventListener(eventName, handler);\n});\n//# sourceMappingURL=utilities.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/animation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/animation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easeInOutQuad: () => (/* binding */ easeInOutQuad),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   sequence: () => (/* binding */ sequence),\n/* harmony export */   timeline: () => (/* binding */ timeline)\n/* harmony export */ });\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Adapted from https://gist.github.com/gre/1650294\nconst easeInOutQuad = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n/**\n * Creates a TimingFunction that uses a given ease to interpolate between\n * two configured number values.\n */\nconst interpolate = (start, end, ease = easeInOutQuad) => (time) => start + (end - start) * ease(time);\n/**\n * Creates a TimingFunction that interpolates through a weighted list\n * of other TimingFunctions (\"tracks\"). Tracks are interpolated in order, and\n * allocated a percentage of the total time based on their relative weight.\n */\nconst sequence = (tracks, weights) => {\n    const cumulativeSum = ((sum) => (value) => sum += value);\n    const times = weights.map(cumulativeSum(0));\n    return (time) => {\n        time = (0,_utilities__WEBPACK_IMPORTED_MODULE_0__.clamp)(time, 0, 1);\n        time *= times[times.length - 1];\n        const i = times.findIndex((val) => val >= time);\n        const start = i < 1 ? 0 : times[i - 1];\n        const end = times[i];\n        return tracks[i]((time - start) / (end - start));\n    };\n};\n/**\n * Creates a \"timeline\" TimingFunction out of an initial value and a series of\n * Keyframes. The timeline function accepts value from 0-1 and returns the\n * current value based on keyframe interpolation across the total number of\n * frames. Frames are only used to indicate the relative length of each keyframe\n * transition, so interpolated values will be computed for fractional frames.\n */\nconst timeline = (path) => {\n    const tracks = [];\n    const weights = [];\n    let lastValue = path.initialValue;\n    for (let i = 0; i < path.keyframes.length; ++i) {\n        const keyframe = path.keyframes[i];\n        const { value, frames } = keyframe;\n        const ease = keyframe.ease || easeInOutQuad;\n        const track = interpolate(lastValue, value, ease);\n        tracks.push(track);\n        weights.push(frames);\n        lastValue = value;\n    }\n    return sequence(tracks, weights);\n};\n//# sourceMappingURL=animation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9hbmltYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkJBQTJCO0FBQy9DO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Bnb29nbGUvbW9kZWwtdmlld2VyL2xpYi91dGlsaXRpZXMvYW5pbWF0aW9uLmpzPzZiMjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi91dGlsaXRpZXMnO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dyZS8xNjUwMjk0XG5leHBvcnQgY29uc3QgZWFzZUluT3V0UXVhZCA9ICh0KSA9PiB0IDwgLjUgPyAyICogdCAqIHQgOiAtMSArICg0IC0gMiAqIHQpICogdDtcbi8qKlxuICogQ3JlYXRlcyBhIFRpbWluZ0Z1bmN0aW9uIHRoYXQgdXNlcyBhIGdpdmVuIGVhc2UgdG8gaW50ZXJwb2xhdGUgYmV0d2VlblxuICogdHdvIGNvbmZpZ3VyZWQgbnVtYmVyIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGludGVycG9sYXRlID0gKHN0YXJ0LCBlbmQsIGVhc2UgPSBlYXNlSW5PdXRRdWFkKSA9PiAodGltZSkgPT4gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogZWFzZSh0aW1lKTtcbi8qKlxuICogQ3JlYXRlcyBhIFRpbWluZ0Z1bmN0aW9uIHRoYXQgaW50ZXJwb2xhdGVzIHRocm91Z2ggYSB3ZWlnaHRlZCBsaXN0XG4gKiBvZiBvdGhlciBUaW1pbmdGdW5jdGlvbnMgKFwidHJhY2tzXCIpLiBUcmFja3MgYXJlIGludGVycG9sYXRlZCBpbiBvcmRlciwgYW5kXG4gKiBhbGxvY2F0ZWQgYSBwZXJjZW50YWdlIG9mIHRoZSB0b3RhbCB0aW1lIGJhc2VkIG9uIHRoZWlyIHJlbGF0aXZlIHdlaWdodC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlcXVlbmNlID0gKHRyYWNrcywgd2VpZ2h0cykgPT4ge1xuICAgIGNvbnN0IGN1bXVsYXRpdmVTdW0gPSAoKHN1bSkgPT4gKHZhbHVlKSA9PiBzdW0gKz0gdmFsdWUpO1xuICAgIGNvbnN0IHRpbWVzID0gd2VpZ2h0cy5tYXAoY3VtdWxhdGl2ZVN1bSgwKSk7XG4gICAgcmV0dXJuICh0aW1lKSA9PiB7XG4gICAgICAgIHRpbWUgPSBjbGFtcCh0aW1lLCAwLCAxKTtcbiAgICAgICAgdGltZSAqPSB0aW1lc1t0aW1lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgaSA9IHRpbWVzLmZpbmRJbmRleCgodmFsKSA9PiB2YWwgPj0gdGltZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gaSA8IDEgPyAwIDogdGltZXNbaSAtIDFdO1xuICAgICAgICBjb25zdCBlbmQgPSB0aW1lc1tpXTtcbiAgICAgICAgcmV0dXJuIHRyYWNrc1tpXSgodGltZSAtIHN0YXJ0KSAvIChlbmQgLSBzdGFydCkpO1xuICAgIH07XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgXCJ0aW1lbGluZVwiIFRpbWluZ0Z1bmN0aW9uIG91dCBvZiBhbiBpbml0aWFsIHZhbHVlIGFuZCBhIHNlcmllcyBvZlxuICogS2V5ZnJhbWVzLiBUaGUgdGltZWxpbmUgZnVuY3Rpb24gYWNjZXB0cyB2YWx1ZSBmcm9tIDAtMSBhbmQgcmV0dXJucyB0aGVcbiAqIGN1cnJlbnQgdmFsdWUgYmFzZWQgb24ga2V5ZnJhbWUgaW50ZXJwb2xhdGlvbiBhY3Jvc3MgdGhlIHRvdGFsIG51bWJlciBvZlxuICogZnJhbWVzLiBGcmFtZXMgYXJlIG9ubHkgdXNlZCB0byBpbmRpY2F0ZSB0aGUgcmVsYXRpdmUgbGVuZ3RoIG9mIGVhY2gga2V5ZnJhbWVcbiAqIHRyYW5zaXRpb24sIHNvIGludGVycG9sYXRlZCB2YWx1ZXMgd2lsbCBiZSBjb21wdXRlZCBmb3IgZnJhY3Rpb25hbCBmcmFtZXMuXG4gKi9cbmV4cG9ydCBjb25zdCB0aW1lbGluZSA9IChwYXRoKSA9PiB7XG4gICAgY29uc3QgdHJhY2tzID0gW107XG4gICAgY29uc3Qgd2VpZ2h0cyA9IFtdO1xuICAgIGxldCBsYXN0VmFsdWUgPSBwYXRoLmluaXRpYWxWYWx1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgua2V5ZnJhbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGtleWZyYW1lID0gcGF0aC5rZXlmcmFtZXNbaV07XG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIGZyYW1lcyB9ID0ga2V5ZnJhbWU7XG4gICAgICAgIGNvbnN0IGVhc2UgPSBrZXlmcmFtZS5lYXNlIHx8IGVhc2VJbk91dFF1YWQ7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gaW50ZXJwb2xhdGUobGFzdFZhbHVlLCB2YWx1ZSwgZWFzZSk7XG4gICAgICAgIHRyYWNrcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgd2VpZ2h0cy5wdXNoKGZyYW1lcyk7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gc2VxdWVuY2UodHJhY2tzLCB3ZWlnaHRzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/animation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheEvictionPolicy: () => (/* binding */ CacheEvictionPolicy)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\nconst $retainerCount = Symbol('retainerCount');\nconst $recentlyUsed = Symbol('recentlyUsed');\nconst $evict = Symbol('evict');\nconst $evictionThreshold = Symbol('evictionThreshold');\nconst $cache = Symbol('cache');\n/**\n * The CacheEvictionPolicy manages the lifecycle for items in a cache,\n * evicting any items outside some threshold bounds in \"recently used\" order,\n * if they are evictable.\n *\n * Items are considered cached as they are retained. When all retainers\n * of an item release it, that item is considered evictable.\n */\nclass CacheEvictionPolicy {\n    constructor(cache, evictionThreshold = 5) {\n        this[_a] = new Map();\n        this[_b] = [];\n        this[$cache] = cache;\n        this[$evictionThreshold] = evictionThreshold;\n    }\n    /**\n     * The eviction threshold is the maximum number of items to hold\n     * in cache indefinitely. Items within the threshold (in recently\n     * used order) will continue to be cached even if they have zero\n     * retainers.\n     */\n    set evictionThreshold(value) {\n        this[$evictionThreshold] = value;\n        this[$evict]();\n    }\n    get evictionThreshold() {\n        return this[$evictionThreshold];\n    }\n    /**\n     * A reference to the cache that operates under this policy\n     */\n    get cache() {\n        return this[$cache];\n    }\n    /**\n     * Given an item key, returns the number of retainers of that item\n     */\n    retainerCount(key) {\n        return this[$retainerCount].get(key) || 0;\n    }\n    /**\n     * Resets the internal tracking of cache item retainers. Use only in cases\n     * where it is certain that all retained cache items have been accounted for!\n     */\n    reset() {\n        this[$retainerCount].clear();\n        this[$recentlyUsed] = [];\n    }\n    /**\n     * Mark a given cache item as retained, where the item is represented\n     * by its key. An item can have any number of retainers.\n     */\n    retain(key) {\n        if (!this[$retainerCount].has(key)) {\n            this[$retainerCount].set(key, 0);\n        }\n        this[$retainerCount].set(key, this[$retainerCount].get(key) + 1);\n        const recentlyUsedIndex = this[$recentlyUsed].indexOf(key);\n        if (recentlyUsedIndex !== -1) {\n            this[$recentlyUsed].splice(recentlyUsedIndex, 1);\n        }\n        this[$recentlyUsed].unshift(key);\n        // Evict, in case retaining a new item pushed an evictable item beyond the\n        // eviction threshold\n        this[$evict]();\n    }\n    /**\n     * Mark a given cache item as released by one of its retainers, where the item\n     * is represented by its key. When all retainers of an item have released it,\n     * the item is considered evictable.\n     */\n    release(key) {\n        if (this[$retainerCount].has(key)) {\n            this[$retainerCount].set(key, Math.max(this[$retainerCount].get(key) - 1, 0));\n        }\n        this[$evict]();\n    }\n    [(_a = $retainerCount, _b = $recentlyUsed, $evict)]() {\n        if (this[$recentlyUsed].length < this[$evictionThreshold]) {\n            return;\n        }\n        for (let i = this[$recentlyUsed].length - 1; i >= this[$evictionThreshold]; --i) {\n            const key = this[$recentlyUsed][i];\n            const retainerCount = this[$retainerCount].get(key);\n            if (retainerCount === 0) {\n                this[$cache].delete(key);\n                this[$recentlyUsed].splice(i, 1);\n            }\n        }\n    }\n}\n//# sourceMappingURL=cache-eviction-policy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9jYWNoZS1ldmljdGlvbi1wb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsK0JBQStCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdXRpbGl0aWVzL2NhY2hlLWV2aWN0aW9uLXBvbGljeS5qcz9mNzlkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfYSwgX2I7XG5jb25zdCAkcmV0YWluZXJDb3VudCA9IFN5bWJvbCgncmV0YWluZXJDb3VudCcpO1xuY29uc3QgJHJlY2VudGx5VXNlZCA9IFN5bWJvbCgncmVjZW50bHlVc2VkJyk7XG5jb25zdCAkZXZpY3QgPSBTeW1ib2woJ2V2aWN0Jyk7XG5jb25zdCAkZXZpY3Rpb25UaHJlc2hvbGQgPSBTeW1ib2woJ2V2aWN0aW9uVGhyZXNob2xkJyk7XG5jb25zdCAkY2FjaGUgPSBTeW1ib2woJ2NhY2hlJyk7XG4vKipcbiAqIFRoZSBDYWNoZUV2aWN0aW9uUG9saWN5IG1hbmFnZXMgdGhlIGxpZmVjeWNsZSBmb3IgaXRlbXMgaW4gYSBjYWNoZSxcbiAqIGV2aWN0aW5nIGFueSBpdGVtcyBvdXRzaWRlIHNvbWUgdGhyZXNob2xkIGJvdW5kcyBpbiBcInJlY2VudGx5IHVzZWRcIiBvcmRlcixcbiAqIGlmIHRoZXkgYXJlIGV2aWN0YWJsZS5cbiAqXG4gKiBJdGVtcyBhcmUgY29uc2lkZXJlZCBjYWNoZWQgYXMgdGhleSBhcmUgcmV0YWluZWQuIFdoZW4gYWxsIHJldGFpbmVyc1xuICogb2YgYW4gaXRlbSByZWxlYXNlIGl0LCB0aGF0IGl0ZW0gaXMgY29uc2lkZXJlZCBldmljdGFibGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZUV2aWN0aW9uUG9saWN5IHtcbiAgICBjb25zdHJ1Y3RvcihjYWNoZSwgZXZpY3Rpb25UaHJlc2hvbGQgPSA1KSB7XG4gICAgICAgIHRoaXNbX2FdID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzW19iXSA9IFtdO1xuICAgICAgICB0aGlzWyRjYWNoZV0gPSBjYWNoZTtcbiAgICAgICAgdGhpc1skZXZpY3Rpb25UaHJlc2hvbGRdID0gZXZpY3Rpb25UaHJlc2hvbGQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBldmljdGlvbiB0aHJlc2hvbGQgaXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIGhvbGRcbiAgICAgKiBpbiBjYWNoZSBpbmRlZmluaXRlbHkuIEl0ZW1zIHdpdGhpbiB0aGUgdGhyZXNob2xkIChpbiByZWNlbnRseVxuICAgICAqIHVzZWQgb3JkZXIpIHdpbGwgY29udGludWUgdG8gYmUgY2FjaGVkIGV2ZW4gaWYgdGhleSBoYXZlIHplcm9cbiAgICAgKiByZXRhaW5lcnMuXG4gICAgICovXG4gICAgc2V0IGV2aWN0aW9uVGhyZXNob2xkKHZhbHVlKSB7XG4gICAgICAgIHRoaXNbJGV2aWN0aW9uVGhyZXNob2xkXSA9IHZhbHVlO1xuICAgICAgICB0aGlzWyRldmljdF0oKTtcbiAgICB9XG4gICAgZ2V0IGV2aWN0aW9uVGhyZXNob2xkKCkge1xuICAgICAgICByZXR1cm4gdGhpc1skZXZpY3Rpb25UaHJlc2hvbGRdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY2FjaGUgdGhhdCBvcGVyYXRlcyB1bmRlciB0aGlzIHBvbGljeVxuICAgICAqL1xuICAgIGdldCBjYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJGNhY2hlXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gaXRlbSBrZXksIHJldHVybnMgdGhlIG51bWJlciBvZiByZXRhaW5lcnMgb2YgdGhhdCBpdGVtXG4gICAgICovXG4gICAgcmV0YWluZXJDb3VudChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbJHJldGFpbmVyQ291bnRdLmdldChrZXkpIHx8IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgdHJhY2tpbmcgb2YgY2FjaGUgaXRlbSByZXRhaW5lcnMuIFVzZSBvbmx5IGluIGNhc2VzXG4gICAgICogd2hlcmUgaXQgaXMgY2VydGFpbiB0aGF0IGFsbCByZXRhaW5lZCBjYWNoZSBpdGVtcyBoYXZlIGJlZW4gYWNjb3VudGVkIGZvciFcbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpc1skcmV0YWluZXJDb3VudF0uY2xlYXIoKTtcbiAgICAgICAgdGhpc1skcmVjZW50bHlVc2VkXSA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrIGEgZ2l2ZW4gY2FjaGUgaXRlbSBhcyByZXRhaW5lZCwgd2hlcmUgdGhlIGl0ZW0gaXMgcmVwcmVzZW50ZWRcbiAgICAgKiBieSBpdHMga2V5LiBBbiBpdGVtIGNhbiBoYXZlIGFueSBudW1iZXIgb2YgcmV0YWluZXJzLlxuICAgICAqL1xuICAgIHJldGFpbihrZXkpIHtcbiAgICAgICAgaWYgKCF0aGlzWyRyZXRhaW5lckNvdW50XS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpc1skcmV0YWluZXJDb3VudF0uc2V0KGtleSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1skcmV0YWluZXJDb3VudF0uc2V0KGtleSwgdGhpc1skcmV0YWluZXJDb3VudF0uZ2V0KGtleSkgKyAxKTtcbiAgICAgICAgY29uc3QgcmVjZW50bHlVc2VkSW5kZXggPSB0aGlzWyRyZWNlbnRseVVzZWRdLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgaWYgKHJlY2VudGx5VXNlZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpc1skcmVjZW50bHlVc2VkXS5zcGxpY2UocmVjZW50bHlVc2VkSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbJHJlY2VudGx5VXNlZF0udW5zaGlmdChrZXkpO1xuICAgICAgICAvLyBFdmljdCwgaW4gY2FzZSByZXRhaW5pbmcgYSBuZXcgaXRlbSBwdXNoZWQgYW4gZXZpY3RhYmxlIGl0ZW0gYmV5b25kIHRoZVxuICAgICAgICAvLyBldmljdGlvbiB0aHJlc2hvbGRcbiAgICAgICAgdGhpc1skZXZpY3RdKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hcmsgYSBnaXZlbiBjYWNoZSBpdGVtIGFzIHJlbGVhc2VkIGJ5IG9uZSBvZiBpdHMgcmV0YWluZXJzLCB3aGVyZSB0aGUgaXRlbVxuICAgICAqIGlzIHJlcHJlc2VudGVkIGJ5IGl0cyBrZXkuIFdoZW4gYWxsIHJldGFpbmVycyBvZiBhbiBpdGVtIGhhdmUgcmVsZWFzZWQgaXQsXG4gICAgICogdGhlIGl0ZW0gaXMgY29uc2lkZXJlZCBldmljdGFibGUuXG4gICAgICovXG4gICAgcmVsZWFzZShrZXkpIHtcbiAgICAgICAgaWYgKHRoaXNbJHJldGFpbmVyQ291bnRdLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aGlzWyRyZXRhaW5lckNvdW50XS5zZXQoa2V5LCBNYXRoLm1heCh0aGlzWyRyZXRhaW5lckNvdW50XS5nZXQoa2V5KSAtIDEsIDApKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzWyRldmljdF0oKTtcbiAgICB9XG4gICAgWyhfYSA9ICRyZXRhaW5lckNvdW50LCBfYiA9ICRyZWNlbnRseVVzZWQsICRldmljdCldKCkge1xuICAgICAgICBpZiAodGhpc1skcmVjZW50bHlVc2VkXS5sZW5ndGggPCB0aGlzWyRldmljdGlvblRocmVzaG9sZF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gdGhpc1skcmVjZW50bHlVc2VkXS5sZW5ndGggLSAxOyBpID49IHRoaXNbJGV2aWN0aW9uVGhyZXNob2xkXTsgLS1pKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzWyRyZWNlbnRseVVzZWRdW2ldO1xuICAgICAgICAgICAgY29uc3QgcmV0YWluZXJDb3VudCA9IHRoaXNbJHJldGFpbmVyQ291bnRdLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKHJldGFpbmVyQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzWyRjYWNoZV0uZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgdGhpc1skcmVjZW50bHlVc2VkXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS1ldmljdGlvbi1wb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/cache-eviction-policy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/data-conversion.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/data-conversion.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataUrlToBlob: () => (/* binding */ dataUrlToBlob)\n/* harmony export */ });\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nconst dataUrlToBlob = async (base64DataUrl) => {\n    return new Promise((resolve, reject) => {\n        const sliceSize = 512;\n        const typeMatch = base64DataUrl.match(/data:(.*);/);\n        if (!typeMatch) {\n            return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n        }\n        const type = typeMatch[1];\n        const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n        const byteCharacters = atob(base64);\n        const byteArrays = [];\n        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        resolve(new Blob(byteArrays, { type }));\n    });\n};\n//# sourceMappingURL=data-conversion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9kYXRhLWNvbnZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBLHVDQUF1QyxlQUFlO0FBQ3REO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBLDZCQUE2QixnQ0FBZ0M7QUFDN0Q7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxNQUFNO0FBQzdDLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdXRpbGl0aWVzL2RhdGEtY29udmVyc2lvbi5qcz85MGNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29udmVydHMgYSBiYXNlNjQgc3RyaW5nIHdoaWNoIHJlcHJlc2VudHMgYSBkYXRhIHVybFxuICogaW50byBhIEJsb2Igb2YgdGhlIHNhbWUgY29udGVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRhVXJsVG9CbG9iID0gYXN5bmMgKGJhc2U2NERhdGFVcmwpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBzbGljZVNpemUgPSA1MTI7XG4gICAgICAgIGNvbnN0IHR5cGVNYXRjaCA9IGJhc2U2NERhdGFVcmwubWF0Y2goL2RhdGE6KC4qKTsvKTtcbiAgICAgICAgaWYgKCF0eXBlTWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKGAke2Jhc2U2NERhdGFVcmx9IGlzIG5vdCBhIHZhbGlkIGRhdGEgVXJsYCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlTWF0Y2hbMV07XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGJhc2U2NERhdGFVcmwucmVwbGFjZSgvZGF0YTppbWFnZVxcL1xcdys7YmFzZTY0LC8sICcnKTtcbiAgICAgICAgY29uc3QgYnl0ZUNoYXJhY3RlcnMgPSBhdG9iKGJhc2U2NCk7XG4gICAgICAgIGNvbnN0IGJ5dGVBcnJheXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYnl0ZUNoYXJhY3RlcnMubGVuZ3RoOyBvZmZzZXQgKz0gc2xpY2VTaXplKSB7XG4gICAgICAgICAgICBjb25zdCBzbGljZSA9IGJ5dGVDaGFyYWN0ZXJzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2xpY2VTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVOdW1iZXJzID0gbmV3IEFycmF5KHNsaWNlLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYnl0ZU51bWJlcnNbaV0gPSBzbGljZS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZU51bWJlcnMpO1xuICAgICAgICAgICAgYnl0ZUFycmF5cy5wdXNoKGJ5dGVBcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShuZXcgQmxvYihieXRlQXJyYXlzLCB7IHR5cGUgfSkpO1xuICAgIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGEtY29udmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/data-conversion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/focus-visible.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/focus-visible.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusVisiblePolyfillMixin: () => (/* binding */ FocusVisiblePolyfillMixin)\n/* harmony export */ });\n/**\n * This mixin function is designed to be applied to a class that inherits\n * from HTMLElement. It makes it easy for a custom element to coordinate with\n * the :focus-visible polyfill.\n *\n * NOTE(cdata): The code here was adapted from an example proposed with the\n * introduction of ShadowDOM support in the :focus-visible polyfill.\n *\n * @see https://github.com/WICG/focus-visible/pull/196\n * @param {Function} SuperClass The base class implementation to decorate with\n * implementation that coordinates with the :focus-visible polyfill\n */\nconst FocusVisiblePolyfillMixin = (SuperClass) => {\n    var _a;\n    const coordinateWithPolyfill = (instance) => {\n        // If there is no shadow root, there is no need to coordinate with\n        // the polyfill. If we already coordinated with the polyfill, we can\n        // skip subsequent invocations:\n        if (instance.shadowRoot == null ||\n            instance.hasAttribute('data-js-focus-visible')) {\n            return () => { };\n        }\n        // The polyfill might already be loaded. If so, we can apply it to\n        // the shadow root immediately:\n        if (self.applyFocusVisiblePolyfill) {\n            self.applyFocusVisiblePolyfill(instance.shadowRoot);\n        }\n        else {\n            const coordinationHandler = () => {\n                self.applyFocusVisiblePolyfill(instance.shadowRoot);\n            };\n            // Otherwise, wait for the polyfill to be loaded lazily. It might\n            // never be loaded, but if it is then we can apply it to the\n            // shadow root at the appropriate time by waiting for the ready\n            // event:\n            self.addEventListener('focus-visible-polyfill-ready', coordinationHandler, { once: true });\n            return () => {\n                self.removeEventListener('focus-visible-polyfill-ready', coordinationHandler);\n            };\n        }\n        return () => { };\n    };\n    const $endPolyfillCoordination = Symbol('endPolyfillCoordination');\n    // IE11 doesn't natively support custom elements or JavaScript class\n    // syntax The mixin implementation assumes that the user will take the\n    // appropriate steps to support both:\n    class FocusVisibleCoordinator extends SuperClass {\n        constructor() {\n            super(...arguments);\n            this[_a] = null;\n        }\n        // Attempt to coordinate with the polyfill when connected to the\n        // document:\n        connectedCallback() {\n            super.connectedCallback && super.connectedCallback();\n            if (this[$endPolyfillCoordination] == null) {\n                this[$endPolyfillCoordination] = coordinateWithPolyfill(this);\n            }\n        }\n        disconnectedCallback() {\n            super.disconnectedCallback && super.disconnectedCallback();\n            // It's important to remove the polyfill event listener when we\n            // disconnect, otherwise we will leak the whole element via window:\n            if (this[$endPolyfillCoordination] != null) {\n                this[$endPolyfillCoordination]();\n                this[$endPolyfillCoordination] = null;\n            }\n        }\n    }\n    _a = $endPolyfillCoordination;\n    ;\n    return FocusVisibleCoordinator;\n};\n//# sourceMappingURL=focus-visible.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9mb2N1cy12aXNpYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsWUFBWTtBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdXRpbGl0aWVzL2ZvY3VzLXZpc2libGUuanM/ZWFmZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbWl4aW4gZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgYXBwbGllZCB0byBhIGNsYXNzIHRoYXQgaW5oZXJpdHNcbiAqIGZyb20gSFRNTEVsZW1lbnQuIEl0IG1ha2VzIGl0IGVhc3kgZm9yIGEgY3VzdG9tIGVsZW1lbnQgdG8gY29vcmRpbmF0ZSB3aXRoXG4gKiB0aGUgOmZvY3VzLXZpc2libGUgcG9seWZpbGwuXG4gKlxuICogTk9URShjZGF0YSk6IFRoZSBjb2RlIGhlcmUgd2FzIGFkYXB0ZWQgZnJvbSBhbiBleGFtcGxlIHByb3Bvc2VkIHdpdGggdGhlXG4gKiBpbnRyb2R1Y3Rpb24gb2YgU2hhZG93RE9NIHN1cHBvcnQgaW4gdGhlIDpmb2N1cy12aXNpYmxlIHBvbHlmaWxsLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9wdWxsLzE5NlxuICogQHBhcmFtIHtGdW5jdGlvbn0gU3VwZXJDbGFzcyBUaGUgYmFzZSBjbGFzcyBpbXBsZW1lbnRhdGlvbiB0byBkZWNvcmF0ZSB3aXRoXG4gKiBpbXBsZW1lbnRhdGlvbiB0aGF0IGNvb3JkaW5hdGVzIHdpdGggdGhlIDpmb2N1cy12aXNpYmxlIHBvbHlmaWxsXG4gKi9cbmV4cG9ydCBjb25zdCBGb2N1c1Zpc2libGVQb2x5ZmlsbE1peGluID0gKFN1cGVyQ2xhc3MpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgY29vcmRpbmF0ZVdpdGhQb2x5ZmlsbCA9IChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBzaGFkb3cgcm9vdCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjb29yZGluYXRlIHdpdGhcbiAgICAgICAgLy8gdGhlIHBvbHlmaWxsLiBJZiB3ZSBhbHJlYWR5IGNvb3JkaW5hdGVkIHdpdGggdGhlIHBvbHlmaWxsLCB3ZSBjYW5cbiAgICAgICAgLy8gc2tpcCBzdWJzZXF1ZW50IGludm9jYXRpb25zOlxuICAgICAgICBpZiAoaW5zdGFuY2Uuc2hhZG93Um9vdCA9PSBudWxsIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtanMtZm9jdXMtdmlzaWJsZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4geyB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBwb2x5ZmlsbCBtaWdodCBhbHJlYWR5IGJlIGxvYWRlZC4gSWYgc28sIHdlIGNhbiBhcHBseSBpdCB0b1xuICAgICAgICAvLyB0aGUgc2hhZG93IHJvb3QgaW1tZWRpYXRlbHk6XG4gICAgICAgIGlmIChzZWxmLmFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwpIHtcbiAgICAgICAgICAgIHNlbGYuYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbChpbnN0YW5jZS5zaGFkb3dSb290KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGlvbkhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsKGluc3RhbmNlLnNoYWRvd1Jvb3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2FpdCBmb3IgdGhlIHBvbHlmaWxsIHRvIGJlIGxvYWRlZCBsYXppbHkuIEl0IG1pZ2h0XG4gICAgICAgICAgICAvLyBuZXZlciBiZSBsb2FkZWQsIGJ1dCBpZiBpdCBpcyB0aGVuIHdlIGNhbiBhcHBseSBpdCB0byB0aGVcbiAgICAgICAgICAgIC8vIHNoYWRvdyByb290IGF0IHRoZSBhcHByb3ByaWF0ZSB0aW1lIGJ5IHdhaXRpbmcgZm9yIHRoZSByZWFkeVxuICAgICAgICAgICAgLy8gZXZlbnQ6XG4gICAgICAgICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzLXZpc2libGUtcG9seWZpbGwtcmVhZHknLCBjb29yZGluYXRpb25IYW5kbGVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMtdmlzaWJsZS1wb2x5ZmlsbC1yZWFkeScsIGNvb3JkaW5hdGlvbkhhbmRsZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4geyB9O1xuICAgIH07XG4gICAgY29uc3QgJGVuZFBvbHlmaWxsQ29vcmRpbmF0aW9uID0gU3ltYm9sKCdlbmRQb2x5ZmlsbENvb3JkaW5hdGlvbicpO1xuICAgIC8vIElFMTEgZG9lc24ndCBuYXRpdmVseSBzdXBwb3J0IGN1c3RvbSBlbGVtZW50cyBvciBKYXZhU2NyaXB0IGNsYXNzXG4gICAgLy8gc3ludGF4IFRoZSBtaXhpbiBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoYXQgdGhlIHVzZXIgd2lsbCB0YWtlIHRoZVxuICAgIC8vIGFwcHJvcHJpYXRlIHN0ZXBzIHRvIHN1cHBvcnQgYm90aDpcbiAgICBjbGFzcyBGb2N1c1Zpc2libGVDb29yZGluYXRvciBleHRlbmRzIFN1cGVyQ2xhc3Mge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICB0aGlzW19hXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXR0ZW1wdCB0byBjb29yZGluYXRlIHdpdGggdGhlIHBvbHlmaWxsIHdoZW4gY29ubmVjdGVkIHRvIHRoZVxuICAgICAgICAvLyBkb2N1bWVudDpcbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjayAmJiBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgaWYgKHRoaXNbJGVuZFBvbHlmaWxsQ29vcmRpbmF0aW9uXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1skZW5kUG9seWZpbGxDb29yZGluYXRpb25dID0gY29vcmRpbmF0ZVdpdGhQb2x5ZmlsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrICYmIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICAvLyBJdCdzIGltcG9ydGFudCB0byByZW1vdmUgdGhlIHBvbHlmaWxsIGV2ZW50IGxpc3RlbmVyIHdoZW4gd2VcbiAgICAgICAgICAgIC8vIGRpc2Nvbm5lY3QsIG90aGVyd2lzZSB3ZSB3aWxsIGxlYWsgdGhlIHdob2xlIGVsZW1lbnQgdmlhIHdpbmRvdzpcbiAgICAgICAgICAgIGlmICh0aGlzWyRlbmRQb2x5ZmlsbENvb3JkaW5hdGlvbl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNbJGVuZFBvbHlmaWxsQ29vcmRpbmF0aW9uXSgpO1xuICAgICAgICAgICAgICAgIHRoaXNbJGVuZFBvbHlmaWxsQ29vcmRpbmF0aW9uXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2EgPSAkZW5kUG9seWZpbGxDb29yZGluYXRpb247XG4gICAgO1xuICAgIHJldHVybiBGb2N1c1Zpc2libGVDb29yZGluYXRvcjtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb2N1cy12aXNpYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/focus-visible.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProgressTracker: () => (/* binding */ ProgressTracker)\n/* harmony export */ });\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities.js */ \"(ssr)/./node_modules/@google/model-viewer/lib/utilities.js\");\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\nclass ProgressTracker extends EventTarget {\n    constructor() {\n        super(...arguments);\n        this.ongoingActivities = new Set();\n        this.totalProgress = 0;\n    }\n    /**\n     * The total number of activities currently being tracked.\n     */\n    get ongoingActivityCount() {\n        return this.ongoingActivities.size;\n    }\n    /**\n     * Registers a new activity to be tracked by the progress tracker. The method\n     * returns a special callback that should be invoked whenever new progress is\n     * ready to be reported. The progress should be reported as a value between 0\n     * and 1, where 0 would represent the beginning of the action and 1 would\n     * represent its completion.\n     *\n     * There is no built-in notion of a time-out for ongoing activities, so once\n     * an ongoing activity is begun, it is up to the consumer of this API to\n     * update the progress until that activity is no longer ongoing.\n     *\n     * Progress is only allowed to move forward for any given activity. If a lower\n     * progress is reported than the previously reported progress, it will be\n     * ignored.\n     */\n    beginActivity() {\n        const activity = { progress: 0, completed: false };\n        this.ongoingActivities.add(activity);\n        if (this.ongoingActivityCount === 1) {\n            // Announce the first progress event (which should always be 0 / 1\n            // total progress):\n            this.announceTotalProgress(activity, 0);\n        }\n        return (progress) => {\n            let nextProgress;\n            nextProgress = Math.max((0,_utilities_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(progress, 0, 1), activity.progress);\n            if (nextProgress !== activity.progress) {\n                this.announceTotalProgress(activity, nextProgress);\n            }\n            return activity.progress;\n        };\n    }\n    announceTotalProgress(updatedActivity, nextProgress) {\n        let progressLeft = 0;\n        let completedActivities = 0;\n        if (nextProgress == 1.0)\n            updatedActivity.completed = true;\n        for (const activity of this.ongoingActivities) {\n            const { progress } = activity;\n            progressLeft += 1.0 - progress;\n            if (activity.completed === true) {\n                completedActivities++;\n            }\n        }\n        const lastProgress = updatedActivity.progress;\n        updatedActivity.progress = nextProgress;\n        // Advance the total progress by the fraction of total remaining progress\n        // due to this activity.\n        this.totalProgress += (nextProgress - lastProgress) *\n            (1.0 - this.totalProgress) / progressLeft;\n        const totalProgress = completedActivities === this.ongoingActivityCount ?\n            1.0 :\n            this.totalProgress;\n        this.dispatchEvent(new CustomEvent('progress', { detail: { totalProgress } }));\n        if (completedActivities === this.ongoingActivityCount) {\n            this.totalProgress = 0.0;\n            this.ongoingActivities.clear();\n        }\n    }\n}\n//# sourceMappingURL=progress-tracker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS9tb2RlbC12aWV3ZXIvbGliL3V0aWxpdGllcy9wcm9ncmVzcy10cmFja2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvREFBSztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFVBQVUsaUJBQWlCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlL21vZGVsLXZpZXdlci9saWIvdXRpbGl0aWVzL3Byb2dyZXNzLXRyYWNrZXIuanM/YzQzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL3V0aWxpdGllcy5qcyc7XG4vKipcbiAqIFByb2dyZXNzVHJhY2tlciBpcyBhbiBldmVudCBlbWl0dGVyIHRoYXQgaGVscHMgdG8gdHJhY2sgdGhlIG9uZ29pbmcgcHJvZ3Jlc3NcbiAqIG9mIG1hbnkgc2ltdWx0YW5lb3VzIGFjdGlvbnMuXG4gKlxuICogUHJvZ3Jlc3NUcmFja2VyIHJlcG9ydHMgcHJvZ3Jlc3MgYWN0aXZpdHkgaW4gdGhlIGZvcm0gb2YgYSBwcm9ncmVzcyBldmVudC5cbiAqIFRoZSBldmVudC5kZXRhaWwudG90YWxQcm9ncmVzcyB2YWx1ZSBpbmRpY2F0ZXMgdGhlIGVsYXBzZWQgcHJvZ3Jlc3Mgb2YgYWxsXG4gKiBhY3Rpdml0aWVzIGJlaW5nIHRyYWNrZWQgYnkgdGhlIFByb2dyZXNzVHJhY2tlci5cbiAqXG4gKiBUaGUgdmFsdWUgb2YgdG90YWxQcm9ncmVzcyBpcyBhIG51bWJlciB0aGF0IHByb2dyZXNzZXMgZnJvbSAwIHRvIDEuIFRoZVxuICogUHJvZ3Jlc3NUcmFja2VyIGFsbG93cyBmb3IgdGhlIGxhenkgYWNjdW11bGF0aW9uIG9mIHRyYWNrZWQgYWN0aW9ucywgc28gdGhlXG4gKiB0b3RhbCBwcm9ncmVzcyByZXByZXNlbnRzIGEgYWJzdHJhY3QsIG5vbi1hYnNvbHV0ZSBwcm9ncmVzcyB0b3dhcmRzIHRoZVxuICogY29tcGxldGlvbiBvZiBhbGwgY3VycmVudGx5IHRyYWNrZWQgZXZlbnRzLlxuICpcbiAqIFdoZW4gYWxsIGN1cnJlbnRseSB0cmFja2VkIGFjdGl2aXRpZXMgYXJlIGZpbmlzaGVkLCB0aGUgUHJvZ3Jlc3NUcmFja2VyXG4gKiBlbWl0cyBvbmUgZmluYWwgcHJvZ3Jlc3MgZXZlbnQgYW5kIHRoZW4gcmVzZXRzIHRoZSBsaXN0IG9mIGl0cyBjdXJyZW50bHlcbiAqIHRyYWNrZWQgYWN0aXZpdGllcy4gVGhpcyBtZWFucyB0aGF0IGZyb20gYW4gb2JzZXJ2ZXIncyBwZXJzcGVjdGl2ZSxcbiAqIG9uZ29pbmcgYWN0aXZpdGllcyB3aWxsIGFjY3VtdWxhdGUgYW5kIGNvbGxlY3RpdmVseSBjb250cmlidXRlIHRvIHRoZSBub3Rpb25cbiAqIG9mIHRvdGFsIHByb2dyZXNzIHVudGlsIGFsbCBjdXJyZW50bHkgdHJhY2tlZCBvbmdvaW5nIGFjdGl2aXRpZXMgaGF2ZVxuICogY29tcGxldGVkLlxuICovXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NUcmFja2VyIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm9uZ29pbmdBY3Rpdml0aWVzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnRvdGFsUHJvZ3Jlc3MgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIGFjdGl2aXRpZXMgY3VycmVudGx5IGJlaW5nIHRyYWNrZWQuXG4gICAgICovXG4gICAgZ2V0IG9uZ29pbmdBY3Rpdml0eUNvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbmdvaW5nQWN0aXZpdGllcy5zaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgYWN0aXZpdHkgdG8gYmUgdHJhY2tlZCBieSB0aGUgcHJvZ3Jlc3MgdHJhY2tlci4gVGhlIG1ldGhvZFxuICAgICAqIHJldHVybnMgYSBzcGVjaWFsIGNhbGxiYWNrIHRoYXQgc2hvdWxkIGJlIGludm9rZWQgd2hlbmV2ZXIgbmV3IHByb2dyZXNzIGlzXG4gICAgICogcmVhZHkgdG8gYmUgcmVwb3J0ZWQuIFRoZSBwcm9ncmVzcyBzaG91bGQgYmUgcmVwb3J0ZWQgYXMgYSB2YWx1ZSBiZXR3ZWVuIDBcbiAgICAgKiBhbmQgMSwgd2hlcmUgMCB3b3VsZCByZXByZXNlbnQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYWN0aW9uIGFuZCAxIHdvdWxkXG4gICAgICogcmVwcmVzZW50IGl0cyBjb21wbGV0aW9uLlxuICAgICAqXG4gICAgICogVGhlcmUgaXMgbm8gYnVpbHQtaW4gbm90aW9uIG9mIGEgdGltZS1vdXQgZm9yIG9uZ29pbmcgYWN0aXZpdGllcywgc28gb25jZVxuICAgICAqIGFuIG9uZ29pbmcgYWN0aXZpdHkgaXMgYmVndW4sIGl0IGlzIHVwIHRvIHRoZSBjb25zdW1lciBvZiB0aGlzIEFQSSB0b1xuICAgICAqIHVwZGF0ZSB0aGUgcHJvZ3Jlc3MgdW50aWwgdGhhdCBhY3Rpdml0eSBpcyBubyBsb25nZXIgb25nb2luZy5cbiAgICAgKlxuICAgICAqIFByb2dyZXNzIGlzIG9ubHkgYWxsb3dlZCB0byBtb3ZlIGZvcndhcmQgZm9yIGFueSBnaXZlbiBhY3Rpdml0eS4gSWYgYSBsb3dlclxuICAgICAqIHByb2dyZXNzIGlzIHJlcG9ydGVkIHRoYW4gdGhlIHByZXZpb3VzbHkgcmVwb3J0ZWQgcHJvZ3Jlc3MsIGl0IHdpbGwgYmVcbiAgICAgKiBpZ25vcmVkLlxuICAgICAqL1xuICAgIGJlZ2luQWN0aXZpdHkoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2aXR5ID0geyBwcm9ncmVzczogMCwgY29tcGxldGVkOiBmYWxzZSB9O1xuICAgICAgICB0aGlzLm9uZ29pbmdBY3Rpdml0aWVzLmFkZChhY3Rpdml0eSk7XG4gICAgICAgIGlmICh0aGlzLm9uZ29pbmdBY3Rpdml0eUNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAvLyBBbm5vdW5jZSB0aGUgZmlyc3QgcHJvZ3Jlc3MgZXZlbnQgKHdoaWNoIHNob3VsZCBhbHdheXMgYmUgMCAvIDFcbiAgICAgICAgICAgIC8vIHRvdGFsIHByb2dyZXNzKTpcbiAgICAgICAgICAgIHRoaXMuYW5ub3VuY2VUb3RhbFByb2dyZXNzKGFjdGl2aXR5LCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHByb2dyZXNzKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV4dFByb2dyZXNzO1xuICAgICAgICAgICAgbmV4dFByb2dyZXNzID0gTWF0aC5tYXgoY2xhbXAocHJvZ3Jlc3MsIDAsIDEpLCBhY3Rpdml0eS5wcm9ncmVzcyk7XG4gICAgICAgICAgICBpZiAobmV4dFByb2dyZXNzICE9PSBhY3Rpdml0eS5wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5ub3VuY2VUb3RhbFByb2dyZXNzKGFjdGl2aXR5LCBuZXh0UHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5LnByb2dyZXNzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhbm5vdW5jZVRvdGFsUHJvZ3Jlc3ModXBkYXRlZEFjdGl2aXR5LCBuZXh0UHJvZ3Jlc3MpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzTGVmdCA9IDA7XG4gICAgICAgIGxldCBjb21wbGV0ZWRBY3Rpdml0aWVzID0gMDtcbiAgICAgICAgaWYgKG5leHRQcm9ncmVzcyA9PSAxLjApXG4gICAgICAgICAgICB1cGRhdGVkQWN0aXZpdHkuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpdml0eSBvZiB0aGlzLm9uZ29pbmdBY3Rpdml0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCB7IHByb2dyZXNzIH0gPSBhY3Rpdml0eTtcbiAgICAgICAgICAgIHByb2dyZXNzTGVmdCArPSAxLjAgLSBwcm9ncmVzcztcbiAgICAgICAgICAgIGlmIChhY3Rpdml0eS5jb21wbGV0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWRBY3Rpdml0aWVzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFzdFByb2dyZXNzID0gdXBkYXRlZEFjdGl2aXR5LnByb2dyZXNzO1xuICAgICAgICB1cGRhdGVkQWN0aXZpdHkucHJvZ3Jlc3MgPSBuZXh0UHJvZ3Jlc3M7XG4gICAgICAgIC8vIEFkdmFuY2UgdGhlIHRvdGFsIHByb2dyZXNzIGJ5IHRoZSBmcmFjdGlvbiBvZiB0b3RhbCByZW1haW5pbmcgcHJvZ3Jlc3NcbiAgICAgICAgLy8gZHVlIHRvIHRoaXMgYWN0aXZpdHkuXG4gICAgICAgIHRoaXMudG90YWxQcm9ncmVzcyArPSAobmV4dFByb2dyZXNzIC0gbGFzdFByb2dyZXNzKSAqXG4gICAgICAgICAgICAoMS4wIC0gdGhpcy50b3RhbFByb2dyZXNzKSAvIHByb2dyZXNzTGVmdDtcbiAgICAgICAgY29uc3QgdG90YWxQcm9ncmVzcyA9IGNvbXBsZXRlZEFjdGl2aXRpZXMgPT09IHRoaXMub25nb2luZ0FjdGl2aXR5Q291bnQgP1xuICAgICAgICAgICAgMS4wIDpcbiAgICAgICAgICAgIHRoaXMudG90YWxQcm9ncmVzcztcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgncHJvZ3Jlc3MnLCB7IGRldGFpbDogeyB0b3RhbFByb2dyZXNzIH0gfSkpO1xuICAgICAgICBpZiAoY29tcGxldGVkQWN0aXZpdGllcyA9PT0gdGhpcy5vbmdvaW5nQWN0aXZpdHlDb3VudCkge1xuICAgICAgICAgICAgdGhpcy50b3RhbFByb2dyZXNzID0gMC4wO1xuICAgICAgICAgICAgdGhpcy5vbmdvaW5nQWN0aXZpdGllcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZ3Jlc3MtdHJhY2tlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google/model-viewer/lib/utilities/progress-tracker.js\n");

/***/ })

};
;