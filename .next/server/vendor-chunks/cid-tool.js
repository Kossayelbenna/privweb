"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cid-tool";
exports.ids = ["vendor-chunks/cid-tool"];
exports.modules = {

/***/ "(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js":
/*!*********************************************************************!*\
  !*** ./node_modules/cid-tool/node_modules/uint8arrays/to-string.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst bases = __webpack_require__(/*! ./util/bases */ \"(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js\")\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n\nmodule.exports = toString\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3RvLXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixjQUFjLG1CQUFPLENBQUMsMEZBQWM7O0FBRXBDO0FBQ0EsYUFBYSwyQ0FBMkM7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxvQkFBb0I7QUFDL0IsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3RvLXN0cmluZy5qcz9hYThiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYXNlcyA9IHJlcXVpcmUoJy4vdXRpbC9iYXNlcycpXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi91dGlsL2Jhc2VzJykuU3VwcG9ydGVkRW5jb2RpbmdzfSBTdXBwb3J0ZWRFbmNvZGluZ3NcbiAqL1xuXG4vKipcbiAqIFR1cm5zIGEgYFVpbnQ4QXJyYXlgIGludG8gYSBzdHJpbmcuXG4gKlxuICogU3VwcG9ydHMgYHV0ZjhgLCBgdXRmLThgIGFuZCBhbnkgZW5jb2Rpbmcgc3VwcG9ydGVkIGJ5IHRoZSBtdWx0aWJhc2UgbW9kdWxlLlxuICpcbiAqIEFsc28gYGFzY2lpYCB3aGljaCBpcyBzaW1pbGFyIHRvIG5vZGUncyAnYmluYXJ5JyBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IHRvIHR1cm4gaW50byBhIHN0cmluZ1xuICogQHBhcmFtIHtTdXBwb3J0ZWRFbmNvZGluZ3N9IFtlbmNvZGluZz11dGY4XSAtIFRoZSBlbmNvZGluZyB0byB1c2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nIChhcnJheSwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXVxuXG4gIGlmICghYmFzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jb2RpbmcgXCIke2VuY29kaW5nfVwiYClcbiAgfVxuXG4gIC8vIHN0cmlwIG11bHRpYmFzZSBwcmVmaXhcbiAgcmV0dXJuIGJhc2UuZW5jb2Rlci5lbmNvZGUoYXJyYXkpLnN1YnN0cmluZygxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js":
/*!**********************************************************************!*\
  !*** ./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("  \n\nconst { bases } = __webpack_require__(/*! multiformats/basics */ \"(ssr)/./node_modules/multiformats/cjs/src/basics.js\")\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3V0aWwvYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsRUFBYzs7QUFFZCxRQUFRLFFBQVEsRUFBRSxtQkFBTyxDQUFDLGdGQUFxQjs7QUFFL0M7QUFDQSxhQUFhLDREQUE0RDtBQUN6RTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyw2QkFBNkI7QUFDeEMsV0FBVyw2QkFBNkI7QUFDeEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLGFBQWEseUVBQXlFO0FBQ3RGOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3V0aWwvYmFzZXMuanM/ZTk5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIgICd1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IGJhc2VzIH0gPSByZXF1aXJlKCdtdWx0aWZvcm1hdHMvYmFzaWNzJylcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtdWx0aWZvcm1hdHMvYmFzZXMvaW50ZXJmYWNlJykuTXVsdGliYXNlQ29kZWM8YW55Pn0gTXVsdGliYXNlQ29kZWNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4XG4gKiBAcGFyYW0geyhidWY6IFVpbnQ4QXJyYXkpID0+IHN0cmluZ30gZW5jb2RlXG4gKiBAcGFyYW0geyhzdHI6IHN0cmluZykgPT4gVWludDhBcnJheX0gZGVjb2RlXG4gKiBAcmV0dXJucyB7TXVsdGliYXNlQ29kZWN9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvZGVjIChuYW1lLCBwcmVmaXgsIGVuY29kZSwgZGVjb2RlKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBwcmVmaXgsXG4gICAgZW5jb2Rlcjoge1xuICAgICAgbmFtZSxcbiAgICAgIHByZWZpeCxcbiAgICAgIGVuY29kZVxuICAgIH0sXG4gICAgZGVjb2Rlcjoge1xuICAgICAgZGVjb2RlXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHN0cmluZyA9IGNyZWF0ZUNvZGVjKCd1dGY4JywgJ3UnLCAoYnVmKSA9PiB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKVxuICByZXR1cm4gJ3UnICsgZGVjb2Rlci5kZWNvZGUoYnVmKVxufSwgKHN0cikgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKClcbiAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHN0ci5zdWJzdHJpbmcoMSkpXG59KVxuXG5jb25zdCBhc2NpaSA9IGNyZWF0ZUNvZGVjKCdhc2NpaScsICdhJywgKGJ1ZikgPT4ge1xuICBsZXQgc3RyaW5nID0gJ2EnXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpKyspIHtcbiAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHN0cmluZ1xufSwgKHN0cikgPT4ge1xuICBzdHIgPSBzdHIuc3Vic3RyaW5nKDEpXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KHN0ci5sZW5ndGgpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBidWZbaV0gPSBzdHIuY2hhckNvZGVBdChpKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufSlcblxuLyoqXG4gKiBAdHlwZWRlZiB7J3V0ZjgnIHwgJ3V0Zi04JyB8ICdoZXgnIHwgJ2xhdGluMScgfCAnYXNjaWknIHwgJ2JpbmFyeScgfCBrZXlvZiBiYXNlcyB9IFN1cHBvcnRlZEVuY29kaW5nc1xuICovXG5cbi8qKlxuICogQHR5cGUge1JlY29yZDxTdXBwb3J0ZWRFbmNvZGluZ3MsIE11bHRpYmFzZUNvZGVjPn1cbiAqL1xuY29uc3QgQkFTRVMgPSB7XG4gICd1dGY4Jzogc3RyaW5nLFxuICAndXRmLTgnOiBzdHJpbmcsXG4gICdoZXgnOiBiYXNlcy5iYXNlMTYsXG4gICdsYXRpbjEnOiBhc2NpaSxcbiAgJ2FzY2lpJzogYXNjaWksXG4gICdiaW5hcnknOiBhc2NpaSxcblxuICAuLi5iYXNlc1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJBU0VTXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/base32.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/base32.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\")\n// @ts-ignore no types\nconst explain = __webpack_require__(/*! explain-error */ \"(ssr)/./node_modules/explain-error/index.js\")\n\n/**\n * @param {CID | string | Uint8Array} cid\n */\nmodule.exports = function base32 (cid) {\n  try {\n    cid = new CID(cid)\n  } catch (err) {\n    throw explain(err, `invalid cid: ${cid}`)\n  }\n\n  if (cid.version !== 1) {\n    cid = cid.toV1()\n  }\n\n  return cid.toBaseEncodedString('base32')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZTMyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFlBQVksbUJBQU8sQ0FBQyxvREFBTTtBQUMxQjtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFlOztBQUV2QztBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLHVDQUF1QyxJQUFJO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvY29yZS9iYXNlMzIuanM/MDUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgQ0lEID0gcmVxdWlyZSgnY2lkcycpXG4vLyBAdHMtaWdub3JlIG5vIHR5cGVzXG5jb25zdCBleHBsYWluID0gcmVxdWlyZSgnZXhwbGFpbi1lcnJvcicpXG5cbi8qKlxuICogQHBhcmFtIHtDSUQgfCBzdHJpbmcgfCBVaW50OEFycmF5fSBjaWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiYXNlMzIgKGNpZCkge1xuICB0cnkge1xuICAgIGNpZCA9IG5ldyBDSUQoY2lkKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBleHBsYWluKGVyciwgYGludmFsaWQgY2lkOiAke2NpZH1gKVxuICB9XG5cbiAgaWYgKGNpZC52ZXJzaW9uICE9PSAxKSB7XG4gICAgY2lkID0gY2lkLnRvVjEoKVxuICB9XG5cbiAgcmV0dXJuIGNpZC50b0Jhc2VFbmNvZGVkU3RyaW5nKCdiYXNlMzInKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/bases.js":
/*!*************************************************!*\
  !*** ./node_modules/cid-tool/src/core/bases.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\")\n\nmodule.exports = function bases () {\n  const output = []\n\n  for (const base of Object.values(multibase.names)) {\n    output.push({ name: base.name, code: base.code })\n  }\n\n  return output\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosa0JBQWtCLG1CQUFPLENBQUMsOERBQVc7O0FBRXJDO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BEOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NpZC10b29sL3NyYy9jb3JlL2Jhc2VzLmpzPzM5NmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IG11bHRpYmFzZSA9IHJlcXVpcmUoJ211bHRpYmFzZScpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFzZXMgKCkge1xuICBjb25zdCBvdXRwdXQgPSBbXVxuXG4gIGZvciAoY29uc3QgYmFzZSBvZiBPYmplY3QudmFsdWVzKG11bHRpYmFzZS5uYW1lcykpIHtcbiAgICBvdXRwdXQucHVzaCh7IG5hbWU6IGJhc2UubmFtZSwgY29kZTogYmFzZS5jb2RlIH0pXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/codecs.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/codecs.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\")\n\nmodule.exports = function codecs () {\n  const output = []\n\n  for (const [key, value] of Object.entries(CID.codecs)) {\n    output.push({ name: key, code: value })\n  }\n\n  return output\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvY29kZWNzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFlBQVksbUJBQU8sQ0FBQyxvREFBTTs7QUFFMUI7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUM7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvY29kZWNzLmpzP2Q0Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IENJRCA9IHJlcXVpcmUoJ2NpZHMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvZGVjcyAoKSB7XG4gIGNvbnN0IG91dHB1dCA9IFtdXG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ0lELmNvZGVjcykpIHtcbiAgICBvdXRwdXQucHVzaCh7IG5hbWU6IGtleSwgY29kZTogdmFsdWUgfSlcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/codecs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/format.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/format.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\")\nconst bases = __webpack_require__(/*! ./bases */ \"(ssr)/./node_modules/cid-tool/src/core/bases.js\")\nconst codecs = __webpack_require__(/*! ./codecs */ \"(ssr)/./node_modules/cid-tool/src/core/codecs.js\")\n// @ts-ignore no types\nconst explain = __webpack_require__(/*! explain-error */ \"(ssr)/./node_modules/explain-error/index.js\")\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\")\nconst multihash = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\nconst uint8ArrayToString = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js\")\n\n/**\n * @typedef {import('multibase').BaseName} BaseName\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n */\n\n/**\n * @param {CID | string | Uint8Array} cid\n * @param {import('./types').FormatOptions} options\n */\nmodule.exports = function format (cid, options) {\n  options = options || {}\n\n  let formatStr = options.format || '%s'\n\n  if (formatStr === 'prefix') {\n    formatStr = '%P'\n  }\n\n  if (!isString(formatStr) || formatStr.indexOf('%') === -1) {\n    throw new Error(`invalid format string: ${formatStr}`)\n  }\n\n  const originalCid = cid\n\n  try {\n    cid = new CID(cid)\n  } catch (err) {\n    throw explain(err, `invalid cid: ${cid}`)\n  }\n\n  if (options.cidVersion != null && cid.version !== options.cidVersion) {\n    if (options.cidVersion === 0) {\n      cid = cid.toV0()\n    } else if (options.cidVersion === 1) {\n      cid = cid.toV1()\n    } else {\n      throw new Error(`invalid cid version: ${options.cidVersion}`)\n    }\n  }\n\n  /**\n   * @type {BaseName}\n   */\n  let base = 'base58btc'\n\n  if (options.base) {\n    // Validate passed base name/code\n    base = findBase(options.base).name\n  } else if (isString(originalCid)) {\n    // Use base of input CID if string\n    base = multibase.isEncoded(originalCid) || base\n  }\n\n  return formatStr.replace(/%([a-zA-Z%])/g, replacer(cid, base))\n}\n\n/**\n * @param {*} obj\n * @returns {obj is String}\n */\nfunction isString (obj) {\n  return Object.prototype.toString.call(obj) === '[object String]'\n}\n\n/**\n * @param {CID} cid\n * @param {BaseName} base\n * @returns {(match: any, specifier: string) => string}\n */\nfunction replacer (cid, base) {\n  /**\n   * @param {*} match\n   * @param {string} specifier\n   */\n  const replace = (match, specifier) => {\n    switch (specifier) {\n      case '%':\n        return '%'\n      case 'b': // base name\n        return base\n      case 'B': // base code\n        return findBase(base).code\n      case 'v': // version string\n        return `cidv${cid.version}`\n      case 'V': // version num\n        return cid.version.toString()\n      case 'c': // codec name\n        return cid.codec\n      case 'C': // codec code\n        return findCodec(cid).toString()\n      case 'h': // hash fun name\n        return multihash.decode(cid.multihash).name\n      case 'H': // hash fun code\n        return multihash.decode(cid.multihash).code.toString()\n      case 'L': // hash length\n        return multihash.decode(cid.multihash).length.toString()\n      case 'm': // multihash encoded in base %b\n        return uint8ArrayToString(multibase.encode(base, cid.multihash))\n      case 'M': // multihash encoded in base %b without base prefix\n        return uint8ArrayToString(cid.multihash, base)\n      case 'd': // hash digest encoded in base %b\n        return uint8ArrayToString(multibase.encode(base, multihash.decode(cid.multihash).digest))\n      case 'D': // hash digest encoded in base %b without base prefix\n        return uint8ArrayToString(multihash.decode(cid.multihash).digest, base)\n      case 's': // cid string encoded in base %b\n        return cid.toString(base)\n      case 'S': // cid string without base prefix\n        return cid.version === 1\n          ? cid.toString(base).slice(1)\n          : uint8ArrayToString(cid.bytes, base)\n      case 'P': // prefix\n        return prefix(cid)\n\n      default:\n        throw new Error(`unrecognized specifier in format string: ${specifier}`)\n    }\n  }\n\n  return replace\n}\n\n/**\n * @param {BaseNameOrCode} nameOrCode\n */\nfunction findBase (nameOrCode) {\n  const baseNameCode = bases().find(b => (b.code === nameOrCode) || b.name === nameOrCode)\n\n  if (!baseNameCode) {\n    throw new Error(`invalid multibase: ${nameOrCode}`)\n  }\n\n  return baseNameCode\n}\n\n/**\n * @param {CID} cid\n */\nfunction findCodec (cid) {\n  const codec = codecs().find(c => c.name === cid.codec)\n\n  if (!codec) {\n    throw new Error(`invalid codec: ${cid.codec}`)\n  }\n\n  return codec.code\n}\n\n/**\n * @param {CID} cid\n */\nfunction prefix (cid) {\n  const { name, length } = multihash.decode(cid.multihash)\n  return `cidv${cid.version}-${cid.codec}-${name}-${length}`\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFlBQVksbUJBQU8sQ0FBQyxvREFBTTtBQUMxQixjQUFjLG1CQUFPLENBQUMsZ0VBQVM7QUFDL0IsZUFBZSxtQkFBTyxDQUFDLGtFQUFVO0FBQ2pDO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsa0VBQWU7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsOERBQVc7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMsa0VBQWE7QUFDdkMsMkJBQTJCLG1CQUFPLENBQUMsa0dBQXVCOztBQUUxRDtBQUNBLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsb0NBQW9DO0FBQ2pEOztBQUVBO0FBQ0EsV0FBVywyQkFBMkI7QUFDdEMsV0FBVyxpQ0FBaUM7QUFDNUM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxVQUFVO0FBQ3hEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osdUNBQXVDLElBQUk7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOLDhDQUE4QyxtQkFBbUI7QUFDakU7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLFVBQVU7QUFDckIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWEsR0FBRztBQUNoQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9FQUFvRSxVQUFVO0FBQzlFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxXQUFXO0FBQ3JEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDLFVBQVU7QUFDaEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0EsVUFBVSxlQUFlO0FBQ3pCLGdCQUFnQixZQUFZLEdBQUcsVUFBVSxHQUFHLEtBQUssR0FBRyxPQUFPO0FBQzNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvY29yZS9mb3JtYXQuanM/Y2Y2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgQ0lEID0gcmVxdWlyZSgnY2lkcycpXG5jb25zdCBiYXNlcyA9IHJlcXVpcmUoJy4vYmFzZXMnKVxuY29uc3QgY29kZWNzID0gcmVxdWlyZSgnLi9jb2RlY3MnKVxuLy8gQHRzLWlnbm9yZSBubyB0eXBlc1xuY29uc3QgZXhwbGFpbiA9IHJlcXVpcmUoJ2V4cGxhaW4tZXJyb3InKVxuY29uc3QgbXVsdGliYXNlID0gcmVxdWlyZSgnbXVsdGliYXNlJylcbmNvbnN0IG11bHRpaGFzaCA9IHJlcXVpcmUoJ211bHRpaGFzaGVzJylcbmNvbnN0IHVpbnQ4QXJyYXlUb1N0cmluZyA9IHJlcXVpcmUoJ3VpbnQ4YXJyYXlzL3RvLXN0cmluZycpXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbXVsdGliYXNlJykuQmFzZU5hbWV9IEJhc2VOYW1lXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtdWx0aWJhc2UnKS5CYXNlTmFtZU9yQ29kZX0gQmFzZU5hbWVPckNvZGVcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q0lEIHwgc3RyaW5nIHwgVWludDhBcnJheX0gY2lkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi90eXBlcycpLkZvcm1hdE9wdGlvbnN9IG9wdGlvbnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JtYXQgKGNpZCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGxldCBmb3JtYXRTdHIgPSBvcHRpb25zLmZvcm1hdCB8fCAnJXMnXG5cbiAgaWYgKGZvcm1hdFN0ciA9PT0gJ3ByZWZpeCcpIHtcbiAgICBmb3JtYXRTdHIgPSAnJVAnXG4gIH1cblxuICBpZiAoIWlzU3RyaW5nKGZvcm1hdFN0cikgfHwgZm9ybWF0U3RyLmluZGV4T2YoJyUnKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZm9ybWF0IHN0cmluZzogJHtmb3JtYXRTdHJ9YClcbiAgfVxuXG4gIGNvbnN0IG9yaWdpbmFsQ2lkID0gY2lkXG5cbiAgdHJ5IHtcbiAgICBjaWQgPSBuZXcgQ0lEKGNpZClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgZXhwbGFpbihlcnIsIGBpbnZhbGlkIGNpZDogJHtjaWR9YClcbiAgfVxuXG4gIGlmIChvcHRpb25zLmNpZFZlcnNpb24gIT0gbnVsbCAmJiBjaWQudmVyc2lvbiAhPT0gb3B0aW9ucy5jaWRWZXJzaW9uKSB7XG4gICAgaWYgKG9wdGlvbnMuY2lkVmVyc2lvbiA9PT0gMCkge1xuICAgICAgY2lkID0gY2lkLnRvVjAoKVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jaWRWZXJzaW9uID09PSAxKSB7XG4gICAgICBjaWQgPSBjaWQudG9WMSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBjaWQgdmVyc2lvbjogJHtvcHRpb25zLmNpZFZlcnNpb259YClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0Jhc2VOYW1lfVxuICAgKi9cbiAgbGV0IGJhc2UgPSAnYmFzZTU4YnRjJ1xuXG4gIGlmIChvcHRpb25zLmJhc2UpIHtcbiAgICAvLyBWYWxpZGF0ZSBwYXNzZWQgYmFzZSBuYW1lL2NvZGVcbiAgICBiYXNlID0gZmluZEJhc2Uob3B0aW9ucy5iYXNlKS5uYW1lXG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcob3JpZ2luYWxDaWQpKSB7XG4gICAgLy8gVXNlIGJhc2Ugb2YgaW5wdXQgQ0lEIGlmIHN0cmluZ1xuICAgIGJhc2UgPSBtdWx0aWJhc2UuaXNFbmNvZGVkKG9yaWdpbmFsQ2lkKSB8fCBiYXNlXG4gIH1cblxuICByZXR1cm4gZm9ybWF0U3RyLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCByZXBsYWNlcihjaWQsIGJhc2UpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJucyB7b2JqIGlzIFN0cmluZ31cbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcgKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nXG59XG5cbi8qKlxuICogQHBhcmFtIHtDSUR9IGNpZFxuICogQHBhcmFtIHtCYXNlTmFtZX0gYmFzZVxuICogQHJldHVybnMgeyhtYXRjaDogYW55LCBzcGVjaWZpZXI6IHN0cmluZykgPT4gc3RyaW5nfVxuICovXG5mdW5jdGlvbiByZXBsYWNlciAoY2lkLCBiYXNlKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IG1hdGNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcGVjaWZpZXJcbiAgICovXG4gIGNvbnN0IHJlcGxhY2UgPSAobWF0Y2gsIHNwZWNpZmllcikgPT4ge1xuICAgIHN3aXRjaCAoc3BlY2lmaWVyKSB7XG4gICAgICBjYXNlICclJzpcbiAgICAgICAgcmV0dXJuICclJ1xuICAgICAgY2FzZSAnYic6IC8vIGJhc2UgbmFtZVxuICAgICAgICByZXR1cm4gYmFzZVxuICAgICAgY2FzZSAnQic6IC8vIGJhc2UgY29kZVxuICAgICAgICByZXR1cm4gZmluZEJhc2UoYmFzZSkuY29kZVxuICAgICAgY2FzZSAndic6IC8vIHZlcnNpb24gc3RyaW5nXG4gICAgICAgIHJldHVybiBgY2lkdiR7Y2lkLnZlcnNpb259YFxuICAgICAgY2FzZSAnVic6IC8vIHZlcnNpb24gbnVtXG4gICAgICAgIHJldHVybiBjaWQudmVyc2lvbi50b1N0cmluZygpXG4gICAgICBjYXNlICdjJzogLy8gY29kZWMgbmFtZVxuICAgICAgICByZXR1cm4gY2lkLmNvZGVjXG4gICAgICBjYXNlICdDJzogLy8gY29kZWMgY29kZVxuICAgICAgICByZXR1cm4gZmluZENvZGVjKGNpZCkudG9TdHJpbmcoKVxuICAgICAgY2FzZSAnaCc6IC8vIGhhc2ggZnVuIG5hbWVcbiAgICAgICAgcmV0dXJuIG11bHRpaGFzaC5kZWNvZGUoY2lkLm11bHRpaGFzaCkubmFtZVxuICAgICAgY2FzZSAnSCc6IC8vIGhhc2ggZnVuIGNvZGVcbiAgICAgICAgcmV0dXJuIG11bHRpaGFzaC5kZWNvZGUoY2lkLm11bHRpaGFzaCkuY29kZS50b1N0cmluZygpXG4gICAgICBjYXNlICdMJzogLy8gaGFzaCBsZW5ndGhcbiAgICAgICAgcmV0dXJuIG11bHRpaGFzaC5kZWNvZGUoY2lkLm11bHRpaGFzaCkubGVuZ3RoLnRvU3RyaW5nKClcbiAgICAgIGNhc2UgJ20nOiAvLyBtdWx0aWhhc2ggZW5jb2RlZCBpbiBiYXNlICViXG4gICAgICAgIHJldHVybiB1aW50OEFycmF5VG9TdHJpbmcobXVsdGliYXNlLmVuY29kZShiYXNlLCBjaWQubXVsdGloYXNoKSlcbiAgICAgIGNhc2UgJ00nOiAvLyBtdWx0aWhhc2ggZW5jb2RlZCBpbiBiYXNlICViIHdpdGhvdXQgYmFzZSBwcmVmaXhcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb1N0cmluZyhjaWQubXVsdGloYXNoLCBiYXNlKVxuICAgICAgY2FzZSAnZCc6IC8vIGhhc2ggZGlnZXN0IGVuY29kZWQgaW4gYmFzZSAlYlxuICAgICAgICByZXR1cm4gdWludDhBcnJheVRvU3RyaW5nKG11bHRpYmFzZS5lbmNvZGUoYmFzZSwgbXVsdGloYXNoLmRlY29kZShjaWQubXVsdGloYXNoKS5kaWdlc3QpKVxuICAgICAgY2FzZSAnRCc6IC8vIGhhc2ggZGlnZXN0IGVuY29kZWQgaW4gYmFzZSAlYiB3aXRob3V0IGJhc2UgcHJlZml4XG4gICAgICAgIHJldHVybiB1aW50OEFycmF5VG9TdHJpbmcobXVsdGloYXNoLmRlY29kZShjaWQubXVsdGloYXNoKS5kaWdlc3QsIGJhc2UpXG4gICAgICBjYXNlICdzJzogLy8gY2lkIHN0cmluZyBlbmNvZGVkIGluIGJhc2UgJWJcbiAgICAgICAgcmV0dXJuIGNpZC50b1N0cmluZyhiYXNlKVxuICAgICAgY2FzZSAnUyc6IC8vIGNpZCBzdHJpbmcgd2l0aG91dCBiYXNlIHByZWZpeFxuICAgICAgICByZXR1cm4gY2lkLnZlcnNpb24gPT09IDFcbiAgICAgICAgICA/IGNpZC50b1N0cmluZyhiYXNlKS5zbGljZSgxKVxuICAgICAgICAgIDogdWludDhBcnJheVRvU3RyaW5nKGNpZC5ieXRlcywgYmFzZSlcbiAgICAgIGNhc2UgJ1AnOiAvLyBwcmVmaXhcbiAgICAgICAgcmV0dXJuIHByZWZpeChjaWQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5yZWNvZ25pemVkIHNwZWNpZmllciBpbiBmb3JtYXQgc3RyaW5nOiAke3NwZWNpZmllcn1gKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXBsYWNlXG59XG5cbi8qKlxuICogQHBhcmFtIHtCYXNlTmFtZU9yQ29kZX0gbmFtZU9yQ29kZVxuICovXG5mdW5jdGlvbiBmaW5kQmFzZSAobmFtZU9yQ29kZSkge1xuICBjb25zdCBiYXNlTmFtZUNvZGUgPSBiYXNlcygpLmZpbmQoYiA9PiAoYi5jb2RlID09PSBuYW1lT3JDb2RlKSB8fCBiLm5hbWUgPT09IG5hbWVPckNvZGUpXG5cbiAgaWYgKCFiYXNlTmFtZUNvZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgbXVsdGliYXNlOiAke25hbWVPckNvZGV9YClcbiAgfVxuXG4gIHJldHVybiBiYXNlTmFtZUNvZGVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NJRH0gY2lkXG4gKi9cbmZ1bmN0aW9uIGZpbmRDb2RlYyAoY2lkKSB7XG4gIGNvbnN0IGNvZGVjID0gY29kZWNzKCkuZmluZChjID0+IGMubmFtZSA9PT0gY2lkLmNvZGVjKVxuXG4gIGlmICghY29kZWMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgY29kZWM6ICR7Y2lkLmNvZGVjfWApXG4gIH1cblxuICByZXR1cm4gY29kZWMuY29kZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q0lEfSBjaWRcbiAqL1xuZnVuY3Rpb24gcHJlZml4IChjaWQpIHtcbiAgY29uc3QgeyBuYW1lLCBsZW5ndGggfSA9IG11bHRpaGFzaC5kZWNvZGUoY2lkLm11bHRpaGFzaClcbiAgcmV0dXJuIGBjaWR2JHtjaWQudmVyc2lvbn0tJHtjaWQuY29kZWN9LSR7bmFtZX0tJHtsZW5ndGh9YFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/hashes.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/hashes.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst multihash = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\n\n// TODO: list only safe hashes https://github.com/ipfs/go-verifcid\nmodule.exports = function hashes () {\n  const output = []\n\n  for (const [name, code] of Object.entries(multihash.names)) {\n    output.push({ name, code })\n  }\n\n  return output\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaGFzaGVzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQixtQkFBTyxDQUFDLGtFQUFhOztBQUV2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsWUFBWTtBQUM5Qjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvY29yZS9oYXNoZXMuanM/MDVhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgbXVsdGloYXNoID0gcmVxdWlyZSgnbXVsdGloYXNoZXMnKVxuXG4vLyBUT0RPOiBsaXN0IG9ubHkgc2FmZSBoYXNoZXMgaHR0cHM6Ly9naXRodWIuY29tL2lwZnMvZ28tdmVyaWZjaWRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzaGVzICgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW11cblxuICBmb3IgKGNvbnN0IFtuYW1lLCBjb2RlXSBvZiBPYmplY3QuZW50cmllcyhtdWx0aWhhc2gubmFtZXMpKSB7XG4gICAgb3V0cHV0LnB1c2goeyBuYW1lLCBjb2RlIH0pXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/hashes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/index.js":
/*!*************************************************!*\
  !*** ./node_modules/cid-tool/src/core/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nexports.base32 = __webpack_require__(/*! ./base32 */ \"(ssr)/./node_modules/cid-tool/src/core/base32.js\")\nexports.bases = __webpack_require__(/*! ./bases */ \"(ssr)/./node_modules/cid-tool/src/core/bases.js\")\nexports.codecs = __webpack_require__(/*! ./codecs */ \"(ssr)/./node_modules/cid-tool/src/core/codecs.js\")\nexports.format = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/cid-tool/src/core/format.js\")\nexports.hashes = __webpack_require__(/*! ./hashes */ \"(ssr)/./node_modules/cid-tool/src/core/hashes.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosd0dBQW9DO0FBQ3BDLHFHQUFrQztBQUNsQyx3R0FBb0M7QUFDcEMsd0dBQW9DO0FBQ3BDLHdHQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1jbGllbnQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaW5kZXguanM/MmI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5iYXNlMzIgPSByZXF1aXJlKCcuL2Jhc2UzMicpXG5leHBvcnRzLmJhc2VzID0gcmVxdWlyZSgnLi9iYXNlcycpXG5leHBvcnRzLmNvZGVjcyA9IHJlcXVpcmUoJy4vY29kZWNzJylcbmV4cG9ydHMuZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKVxuZXhwb3J0cy5oYXNoZXMgPSByZXF1aXJlKCcuL2hhc2hlcycpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/cid-tool/src/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * @typedef {import('./core/types').FormatOptions} FormatOptions\n */\n\nmodule.exports = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/cid-tool/src/core/index.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0EsYUFBYSxzQ0FBc0M7QUFDbkQ7O0FBRUEscUdBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvaW5kZXguanM/YjVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUvdHlwZXMnKS5Gb3JtYXRPcHRpb25zfSBGb3JtYXRPcHRpb25zXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvcmUnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/index.js\n");

/***/ })

};
;